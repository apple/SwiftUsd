// swift-tools-version: 6.1
//===----------------------------------------------------------------------===//
// This source file is part of github.com/apple/SwiftUsd
//
// Copyright Â© 2025 Apple Inc. and the SwiftUsd project authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//===----------------------------------------------------------------------===//

// This file was auto-generated by make-swift-package. Do not edit!

import PackageDescription
import CompilerPluginSupport

let package = Package(
    name: "OpenUSD",
    platforms: [.macOS(.v14), .iOS(.v17)],
    products: [
        .library(name: "OpenUSD", targets: [
            "_OpenUSD_SwiftBindingHelpers",
            "OpenUSD"
        ])
    ],
    dependencies: [
        .package(url: "https://github.com/swiftlang/swift-syntax.git", "600.0.0-latest"..<"602.0.0"),
    ],
    targets: [
        .target(name: "OpenUSD",
                dependencies: [
                    "_OpenUSD_SwiftBindingHelpers",
                    "_OpenUSD_MacroImplementations",
                    .product(name: "SwiftSyntaxMacros", package: "swift-syntax"),
                    .product(name: "SwiftCompilerPlugin", package: "swift-syntax")
                ],
                path: "swift-package/Sources/OpenUSD",
                swiftSettings: [
                    .interoperabilityMode(.Cxx)
                ]),

        .macro(name: "_OpenUSD_MacroImplementations",
               dependencies: [
                   .product(name: "SwiftSyntaxMacros", package: "swift-syntax"),
                   .product(name: "SwiftCompilerPlugin", package: "swift-syntax")
               ],
               path: "swift-package/Sources/_OpenUSD_MacroImplementations"),
                
        .target(name: "_OpenUSD_SwiftBindingHelpers",
                dependencies: cppTarget_dependencies(),
                path: "swift-package/Sources/_OpenUSD_SwiftBindingHelpers")
                
    ] + xcframeworkBinaryTargets(),
    cxxLanguageStandard: .gnucxx17
)



// There are a lot of XCFrameworks that need to get wrapped,
// so we list them after the package initializer
func cppTarget_dependencies() -> [Target.Dependency] {
    [
        .target(name: "_Alembic_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Iex_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_IlmThread_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Imath_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_MaterialX_xcframework", condition: .when(platforms: [.iOS])),
        .target(name: "_MaterialXCore_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_MaterialXFormat_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_MaterialXGenGlsl_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_MaterialXGenMsl_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_MaterialXGenShader_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_MaterialXRender_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_MaterialXRenderGlsl_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_MaterialXRenderHw_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_OpenEXR_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_OpenEXRCore_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_OpenEXRUtil_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_OpenVDB_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_OsdCPU_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_OsdGPU_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_TBB_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_Ar_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Arch_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_CameraUtil_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Ef_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Esf_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_EsfUsd_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Exec_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_ExecGeom_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_ExecUsd_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Garch_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_GeomUtil_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Gf_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Glf_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Hd_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_HdGp_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_HdMtlx_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_HdSt_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Hdar_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Hdsi_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Hdx_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Hf_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Hgi_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_HgiGL_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_HgiInterop_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_HgiMetal_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Hio_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_HioOpenVDB_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_Js_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Kind_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Pcp_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Pegtl_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Plug_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_PxOsd_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Sdf_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Sdr_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Tf_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Trace_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Ts_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Usd_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdAppUtils_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdBakeMtlx_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_UsdGeom_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdGeomValidators_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_UsdHydra_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdImaging_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdImagingGL_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdLux_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdMedia_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdMtlx_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdPhysics_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdPhysicsValidators_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_UsdProc_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdProcImaging_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdRender_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdRi_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdRiPxrImaging_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdSemantics_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdShade_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdShadeValidators_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_UsdSkel_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdSkelImaging_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdSkelValidators_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_UsdUI_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdUtils_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdUtilsValidators_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_UsdValidation_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_Usd_UsdVol_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_UsdVolImaging_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Vdf_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Vt_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_Usd_Work_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_blosc_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_boost_iostreams_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_embree3_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_hdEmbree_xcframework", condition: .when(platforms: [.macOS])),
        .target(name: "_hdStorm_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_hioAvif_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_hioImageIO_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_sdrGlslfx_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_usdAbc_xcframework", condition: .when(platforms: [.macOS, .iOS])),
        .target(name: "_usdShaders_xcframework", condition: .when(platforms: [.macOS, .iOS])),
    ]
}

func xcframeworkBinaryTargets() -> [Target] {
    [
        .binaryTarget(name: "_Alembic_xcframework", path: "swift-package/Libraries/Alembic.xcframework"),
        .binaryTarget(name: "_Iex_xcframework", path: "swift-package/Libraries/Iex.xcframework"),
        .binaryTarget(name: "_IlmThread_xcframework", path: "swift-package/Libraries/IlmThread.xcframework"),
        .binaryTarget(name: "_Imath_xcframework", path: "swift-package/Libraries/Imath.xcframework"),
        .binaryTarget(name: "_MaterialX_xcframework", path: "swift-package/Libraries/MaterialX.xcframework"),
        .binaryTarget(name: "_MaterialXCore_xcframework", path: "swift-package/Libraries/MaterialXCore.xcframework"),
        .binaryTarget(name: "_MaterialXFormat_xcframework", path: "swift-package/Libraries/MaterialXFormat.xcframework"),
        .binaryTarget(name: "_MaterialXGenGlsl_xcframework", path: "swift-package/Libraries/MaterialXGenGlsl.xcframework"),
        .binaryTarget(name: "_MaterialXGenMsl_xcframework", path: "swift-package/Libraries/MaterialXGenMsl.xcframework"),
        .binaryTarget(name: "_MaterialXGenShader_xcframework", path: "swift-package/Libraries/MaterialXGenShader.xcframework"),
        .binaryTarget(name: "_MaterialXRender_xcframework", path: "swift-package/Libraries/MaterialXRender.xcframework"),
        .binaryTarget(name: "_MaterialXRenderGlsl_xcframework", path: "swift-package/Libraries/MaterialXRenderGlsl.xcframework"),
        .binaryTarget(name: "_MaterialXRenderHw_xcframework", path: "swift-package/Libraries/MaterialXRenderHw.xcframework"),
        .binaryTarget(name: "_OpenEXR_xcframework", path: "swift-package/Libraries/OpenEXR.xcframework"),
        .binaryTarget(name: "_OpenEXRCore_xcframework", path: "swift-package/Libraries/OpenEXRCore.xcframework"),
        .binaryTarget(name: "_OpenEXRUtil_xcframework", path: "swift-package/Libraries/OpenEXRUtil.xcframework"),
        .binaryTarget(name: "_OpenVDB_xcframework", path: "swift-package/Libraries/OpenVDB.xcframework"),
        .binaryTarget(name: "_OsdCPU_xcframework", path: "swift-package/Libraries/OsdCPU.xcframework"),
        .binaryTarget(name: "_OsdGPU_xcframework", path: "swift-package/Libraries/OsdGPU.xcframework"),
        .binaryTarget(name: "_TBB_xcframework", path: "swift-package/Libraries/TBB.xcframework"),
        .binaryTarget(name: "_Usd_Ar_xcframework", path: "swift-package/Libraries/Usd_Ar.xcframework"),
        .binaryTarget(name: "_Usd_Arch_xcframework", path: "swift-package/Libraries/Usd_Arch.xcframework"),
        .binaryTarget(name: "_Usd_CameraUtil_xcframework", path: "swift-package/Libraries/Usd_CameraUtil.xcframework"),
        .binaryTarget(name: "_Usd_Ef_xcframework", path: "swift-package/Libraries/Usd_Ef.xcframework"),
        .binaryTarget(name: "_Usd_Esf_xcframework", path: "swift-package/Libraries/Usd_Esf.xcframework"),
        .binaryTarget(name: "_Usd_EsfUsd_xcframework", path: "swift-package/Libraries/Usd_EsfUsd.xcframework"),
        .binaryTarget(name: "_Usd_Exec_xcframework", path: "swift-package/Libraries/Usd_Exec.xcframework"),
        .binaryTarget(name: "_Usd_ExecGeom_xcframework", path: "swift-package/Libraries/Usd_ExecGeom.xcframework"),
        .binaryTarget(name: "_Usd_ExecUsd_xcframework", path: "swift-package/Libraries/Usd_ExecUsd.xcframework"),
        .binaryTarget(name: "_Usd_Garch_xcframework", path: "swift-package/Libraries/Usd_Garch.xcframework"),
        .binaryTarget(name: "_Usd_GeomUtil_xcframework", path: "swift-package/Libraries/Usd_GeomUtil.xcframework"),
        .binaryTarget(name: "_Usd_Gf_xcframework", path: "swift-package/Libraries/Usd_Gf.xcframework"),
        .binaryTarget(name: "_Usd_Glf_xcframework", path: "swift-package/Libraries/Usd_Glf.xcframework"),
        .binaryTarget(name: "_Usd_Hd_xcframework", path: "swift-package/Libraries/Usd_Hd.xcframework"),
        .binaryTarget(name: "_Usd_HdGp_xcframework", path: "swift-package/Libraries/Usd_HdGp.xcframework"),
        .binaryTarget(name: "_Usd_HdMtlx_xcframework", path: "swift-package/Libraries/Usd_HdMtlx.xcframework"),
        .binaryTarget(name: "_Usd_HdSt_xcframework", path: "swift-package/Libraries/Usd_HdSt.xcframework"),
        .binaryTarget(name: "_Usd_Hdar_xcframework", path: "swift-package/Libraries/Usd_Hdar.xcframework"),
        .binaryTarget(name: "_Usd_Hdsi_xcframework", path: "swift-package/Libraries/Usd_Hdsi.xcframework"),
        .binaryTarget(name: "_Usd_Hdx_xcframework", path: "swift-package/Libraries/Usd_Hdx.xcframework"),
        .binaryTarget(name: "_Usd_Hf_xcframework", path: "swift-package/Libraries/Usd_Hf.xcframework"),
        .binaryTarget(name: "_Usd_Hgi_xcframework", path: "swift-package/Libraries/Usd_Hgi.xcframework"),
        .binaryTarget(name: "_Usd_HgiGL_xcframework", path: "swift-package/Libraries/Usd_HgiGL.xcframework"),
        .binaryTarget(name: "_Usd_HgiInterop_xcframework", path: "swift-package/Libraries/Usd_HgiInterop.xcframework"),
        .binaryTarget(name: "_Usd_HgiMetal_xcframework", path: "swift-package/Libraries/Usd_HgiMetal.xcframework"),
        .binaryTarget(name: "_Usd_Hio_xcframework", path: "swift-package/Libraries/Usd_Hio.xcframework"),
        .binaryTarget(name: "_Usd_HioOpenVDB_xcframework", path: "swift-package/Libraries/Usd_HioOpenVDB.xcframework"),
        .binaryTarget(name: "_Usd_Js_xcframework", path: "swift-package/Libraries/Usd_Js.xcframework"),
        .binaryTarget(name: "_Usd_Kind_xcframework", path: "swift-package/Libraries/Usd_Kind.xcframework"),
        .binaryTarget(name: "_Usd_Pcp_xcframework", path: "swift-package/Libraries/Usd_Pcp.xcframework"),
        .binaryTarget(name: "_Usd_Pegtl_xcframework", path: "swift-package/Libraries/Usd_Pegtl.xcframework"),
        .binaryTarget(name: "_Usd_Plug_xcframework", path: "swift-package/Libraries/Usd_Plug.xcframework"),
        .binaryTarget(name: "_Usd_PxOsd_xcframework", path: "swift-package/Libraries/Usd_PxOsd.xcframework"),
        .binaryTarget(name: "_Usd_Sdf_xcframework", path: "swift-package/Libraries/Usd_Sdf.xcframework"),
        .binaryTarget(name: "_Usd_Sdr_xcframework", path: "swift-package/Libraries/Usd_Sdr.xcframework"),
        .binaryTarget(name: "_Usd_Tf_xcframework", path: "swift-package/Libraries/Usd_Tf.xcframework"),
        .binaryTarget(name: "_Usd_Trace_xcframework", path: "swift-package/Libraries/Usd_Trace.xcframework"),
        .binaryTarget(name: "_Usd_Ts_xcframework", path: "swift-package/Libraries/Usd_Ts.xcframework"),
        .binaryTarget(name: "_Usd_Usd_xcframework", path: "swift-package/Libraries/Usd_Usd.xcframework"),
        .binaryTarget(name: "_Usd_UsdAppUtils_xcframework", path: "swift-package/Libraries/Usd_UsdAppUtils.xcframework"),
        .binaryTarget(name: "_Usd_UsdBakeMtlx_xcframework", path: "swift-package/Libraries/Usd_UsdBakeMtlx.xcframework"),
        .binaryTarget(name: "_Usd_UsdGeom_xcframework", path: "swift-package/Libraries/Usd_UsdGeom.xcframework"),
        .binaryTarget(name: "_Usd_UsdGeomValidators_xcframework", path: "swift-package/Libraries/Usd_UsdGeomValidators.xcframework"),
        .binaryTarget(name: "_Usd_UsdHydra_xcframework", path: "swift-package/Libraries/Usd_UsdHydra.xcframework"),
        .binaryTarget(name: "_Usd_UsdImaging_xcframework", path: "swift-package/Libraries/Usd_UsdImaging.xcframework"),
        .binaryTarget(name: "_Usd_UsdImagingGL_xcframework", path: "swift-package/Libraries/Usd_UsdImagingGL.xcframework"),
        .binaryTarget(name: "_Usd_UsdLux_xcframework", path: "swift-package/Libraries/Usd_UsdLux.xcframework"),
        .binaryTarget(name: "_Usd_UsdMedia_xcframework", path: "swift-package/Libraries/Usd_UsdMedia.xcframework"),
        .binaryTarget(name: "_Usd_UsdMtlx_xcframework", path: "swift-package/Libraries/Usd_UsdMtlx.xcframework"),
        .binaryTarget(name: "_Usd_UsdPhysics_xcframework", path: "swift-package/Libraries/Usd_UsdPhysics.xcframework"),
        .binaryTarget(name: "_Usd_UsdPhysicsValidators_xcframework", path: "swift-package/Libraries/Usd_UsdPhysicsValidators.xcframework"),
        .binaryTarget(name: "_Usd_UsdProc_xcframework", path: "swift-package/Libraries/Usd_UsdProc.xcframework"),
        .binaryTarget(name: "_Usd_UsdProcImaging_xcframework", path: "swift-package/Libraries/Usd_UsdProcImaging.xcframework"),
        .binaryTarget(name: "_Usd_UsdRender_xcframework", path: "swift-package/Libraries/Usd_UsdRender.xcframework"),
        .binaryTarget(name: "_Usd_UsdRi_xcframework", path: "swift-package/Libraries/Usd_UsdRi.xcframework"),
        .binaryTarget(name: "_Usd_UsdRiPxrImaging_xcframework", path: "swift-package/Libraries/Usd_UsdRiPxrImaging.xcframework"),
        .binaryTarget(name: "_Usd_UsdSemantics_xcframework", path: "swift-package/Libraries/Usd_UsdSemantics.xcframework"),
        .binaryTarget(name: "_Usd_UsdShade_xcframework", path: "swift-package/Libraries/Usd_UsdShade.xcframework"),
        .binaryTarget(name: "_Usd_UsdShadeValidators_xcframework", path: "swift-package/Libraries/Usd_UsdShadeValidators.xcframework"),
        .binaryTarget(name: "_Usd_UsdSkel_xcframework", path: "swift-package/Libraries/Usd_UsdSkel.xcframework"),
        .binaryTarget(name: "_Usd_UsdSkelImaging_xcframework", path: "swift-package/Libraries/Usd_UsdSkelImaging.xcframework"),
        .binaryTarget(name: "_Usd_UsdSkelValidators_xcframework", path: "swift-package/Libraries/Usd_UsdSkelValidators.xcframework"),
        .binaryTarget(name: "_Usd_UsdUI_xcframework", path: "swift-package/Libraries/Usd_UsdUI.xcframework"),
        .binaryTarget(name: "_Usd_UsdUtils_xcframework", path: "swift-package/Libraries/Usd_UsdUtils.xcframework"),
        .binaryTarget(name: "_Usd_UsdUtilsValidators_xcframework", path: "swift-package/Libraries/Usd_UsdUtilsValidators.xcframework"),
        .binaryTarget(name: "_Usd_UsdValidation_xcframework", path: "swift-package/Libraries/Usd_UsdValidation.xcframework"),
        .binaryTarget(name: "_Usd_UsdVol_xcframework", path: "swift-package/Libraries/Usd_UsdVol.xcframework"),
        .binaryTarget(name: "_Usd_UsdVolImaging_xcframework", path: "swift-package/Libraries/Usd_UsdVolImaging.xcframework"),
        .binaryTarget(name: "_Usd_Vdf_xcframework", path: "swift-package/Libraries/Usd_Vdf.xcframework"),
        .binaryTarget(name: "_Usd_Vt_xcframework", path: "swift-package/Libraries/Usd_Vt.xcframework"),
        .binaryTarget(name: "_Usd_Work_xcframework", path: "swift-package/Libraries/Usd_Work.xcframework"),
        .binaryTarget(name: "_blosc_xcframework", path: "swift-package/Libraries/blosc.xcframework"),
        .binaryTarget(name: "_boost_iostreams_xcframework", path: "swift-package/Libraries/boost_iostreams.xcframework"),
        .binaryTarget(name: "_embree3_xcframework", path: "swift-package/Libraries/embree3.xcframework"),
        .binaryTarget(name: "_hdEmbree_xcframework", path: "swift-package/Libraries/hdEmbree.xcframework"),
        .binaryTarget(name: "_hdStorm_xcframework", path: "swift-package/Libraries/hdStorm.xcframework"),
        .binaryTarget(name: "_hioAvif_xcframework", path: "swift-package/Libraries/hioAvif.xcframework"),
        .binaryTarget(name: "_hioImageIO_xcframework", path: "swift-package/Libraries/hioImageIO.xcframework"),
        .binaryTarget(name: "_sdrGlslfx_xcframework", path: "swift-package/Libraries/sdrGlslfx.xcframework"),
        .binaryTarget(name: "_usdAbc_xcframework", path: "swift-package/Libraries/usdAbc.xcframework"),
        .binaryTarget(name: "_usdShaders_xcframework", path: "swift-package/Libraries/usdShaders.xcframework"),
    ]
}