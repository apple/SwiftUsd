{"hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","abstract":[{"text":"Learn about the current limitations of OpenUSD in Swift","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations"},"variants":[{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"occ"}]}],"seeAlsoSections":[{"generated":true,"title":"Essentials","identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials"}],"sections":[],"metadata":{"roleHeading":"Article","title":"Current Limitations","role":"article","modules":[{"name":"OpenUSD"}]},"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:","type":"text"}]},{"text":"Issues","type":"heading","level":3,"anchor":"Issues"},{"items":[{"content":[{"inlineContent":[{"text":"Swift compiler crashes","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"TfRefPtr.pointee"},{"type":"text","text":" and "},{"type":"codeVoice","code":"TfWeakPtr.pointee"},{"type":"text","text":" are unavailable"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Never use "},{"type":"codeVoice","code":".pointee"},{"type":"text","text":", always use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","overridingTitle":"Overlay.Dereference(_:)","overridingTitleInlineContent":[{"type":"codeVoice","code":"Overlay.Dereference(_:)"}]}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Nested "},{"type":"codeVoice","code":"enum"},{"type":"text","text":"s are not always imported ("},{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","isActive":true},{"type":"text","text":")"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Overlay.nested.enum"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"pxr.nested.enum"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Autocomplete is slow to index","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Refer to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/openusd.org\/release\/api\/index.html"},{"text":" ","type":"text"},{"text":"I need to investigate ","type":"text"},{"code":"requires cplusplus","type":"codeVoice"},{"text":" in the modulemap again.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"UsdStage","type":"codeVoice"},{"text":" cannot be passed to function expecting ","type":"text"},{"code":"TfWeakPtr<UsdStage>","type":"codeVoice"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround"}]},{"text":": Manually construct and pass ","type":"text"},{"code":"Overlay.TfWeakPtr(stage)","type":"codeVoice"},{"text":" instead","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"pxr.UsdGeomSphere.GetPrim()"},{"text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Use ","type":"text"},{"type":"codeVoice","code":"Overlay.GetPrim(_ s: UsdGeomSphere)"},{"text":" instead","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Some OpenUSD types are not imported","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Write C++ code that wraps types you need to use from Swift. See ","type":"text"},{"type":"codeVoice","code":"source\/Wrappers"},{"text":" for examples.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Write your own free function"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Highest priority","type":"heading","level":4,"anchor":"Highest-priority"},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Pass default arguments explicitly when calling C++ functions"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"High priority","type":"heading","level":4,"anchor":"High-priority"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/133777029","isActive":true},{"type":"text","text":" "},{"type":"text","text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to "},{"type":"codeVoice","code":"std::function"},{"type":"text","text":", and Linux doesn’t really support that."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch slightly, because it currently ","type":"text"},{"code":"#if !__swift__","type":"codeVoice"},{"text":"’s out some ","type":"text"},{"code":"static_assert","type":"codeVoice"},{"text":"’s that Swift erroneously triggers","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/150456875"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would require simplifying the patch slightly","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/148534260"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch a small amount. Requires ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118"},{"text":" as well to simplify.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation without needing to make a typedef for the nested type"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation and satisfying protocol requirements in C++"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would make organizing import-as-member easier and avoid polluting the global namespace","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Write a non-friend function that calls the friend, and call the non-friend from Swift","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Without Swift-Cxx interop enabled, you get "},{"code":"Error: Cannot load underlying module for 'CxxStdlib'","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Medium priority","type":"heading","level":4,"anchor":"Medium-priority"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Don’t conform to protocols"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Use ","type":"text"},{"code":"Availability: nonswift","type":"codeVoice"},{"text":", then import-as-member on new stubs that call the unavailable methods","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"reference"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/149496877","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/153678715","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/121886233"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can’t use ","type":"text"},{"type":"codeVoice","code":"pxr.VtArray<pxr.GfVec3f>"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"std.set<std.string>"},{"text":" in Swift. Workaround of using a C++ typedef works but is annoying","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Low priority","type":"heading","level":4,"anchor":"Low-priority"},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" not imported"}],"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/138359065","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy to wrap function in Swift Package","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/132742486","isActive":true,"type":"reference"},{"type":"text","text":")"},{"type":"text","text":"\n"},{"type":"text","text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker."}]}]},{"content":[{"inlineContent":[{"type":"reference","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"This could enable me to use API notes to succinctly conform all specializations of "},{"type":"codeVoice","code":"pxr::VtArray<T>"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be replaced with a ","type":"text"},{"code":"Bool.init(UsdGeomSphere)","type":"codeVoice"},{"text":" supplied by this repo, which is also more ergonomic","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","isActive":true,"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types"}]},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would be helpful for SwiftUsd in a few niche places.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy workaround","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"rdar:\/\/138118008","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"rdar:\/\/137880350","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/137879510"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be worked around by calling "},{"type":"codeVoice","code":"__convertToBool()"},{"type":"text","text":". I can probably put "},{"type":"codeVoice","code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}"},{"type":"text","text":" in the Swift Package, or add an initializer on "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround in C++, but annoying to have to use everywhere."},{"type":"text","text":"\n"},{"type":"text","text":"I can improve the workaround by using "},{"code":"SWIFT_NAME","type":"codeVoice"},{"type":"text","text":" on the base class’s declaration of "},{"code":"GetPrim","type":"codeVoice"},{"type":"text","text":" to hide that method from Swift, then extend each subclass to add a Swift method named "},{"code":"GetPrim()","type":"codeVoice"},{"type":"text","text":" that calls a C++ helper method that calls the base class’s definition of "},{"code":"GetPrim","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Limits the ability to do import-as-member replacements","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"references":{"rdar://138118008":{"identifier":"rdar:\/\/138118008","titleInlineContent":[{"type":"text","text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"}],"type":"link","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)","url":"rdar:\/\/138118008"},"https://github.com/swiftlang/swift/issues/83144":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144"},"https://github.com/swiftlang/swift/pull/82485":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485"},"https://github.com/swiftlang/swift/issues/83079":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079"},"https://github.com/swiftlang/swift/issues/83114":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114"},"https://github.com/swiftlang/swift/pull/82161":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161"},"rdar://132742486":{"identifier":"rdar:\/\/132742486","titleInlineContent":[{"type":"text","text":"rdar:\/\/132742486: Function returning C++ type in namespace is "},{"code":"inaccessible due to '@_spi'","type":"codeVoice"},{"type":"text","text":" when it isn’t marked SPI"}],"type":"link","title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI","url":"rdar:\/\/132742486"},"https://github.com/swiftlang/swift/issues/83155":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155"},"https://github.com/swiftlang/swift/issues/83152":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152"},"rdar://150456875":{"title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","identifier":"rdar:\/\/150456875","type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"}],"url":"rdar:\/\/150456875"},"https://github.com/swiftlang/swift/issues/83077":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077"},"https://github.com/swiftlang/swift/pull/82333":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333"},"https://github.com/swiftlang/swift/issues/83154":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154"},"rdar://148534260":{"title":"rdar:\/\/148534260: API notes should support annotating C++ operators","identifier":"rdar:\/\/148534260","type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/148534260: API notes should support annotating C++ operators"}],"url":"rdar:\/\/148534260"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"title":"Getting Started with OpenUSD","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","url":"\/documentation\/swiftusd\/gettingstarted","abstract":[{"type":"text","text":"Adding SwiftUsd to your project or package"}],"kind":"article","role":"article","type":"topic"},"rdar://121886233":{"identifier":"rdar:\/\/121886233","titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}],"type":"link","title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax","url":"rdar:\/\/121886233"},"rdar://138359065":{"title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)","identifier":"rdar:\/\/138359065","type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}],"url":"rdar:\/\/138359065"},"https://github.com/swiftlang/swift/pull/81709":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709"},"rdar://133777029":{"title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)","identifier":"rdar:\/\/133777029","type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}],"url":"rdar:\/\/133777029"},"https://github.com/swiftlang/swift/pull/82579":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579"},"rdar://153678715":{"title":"rdar:\/\/153678715: std::vector should conform to Codable when T does","identifier":"rdar:\/\/153678715","type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/153678715: std::vector"},{"type":"text","text":" should conform to Codable when T does"}],"url":"rdar:\/\/153678715"},"https://github.com/swiftlang/swift/issues/83115":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115"},"https://github.com/swiftlang/swift/pull/82566":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566"},"https://github.com/swiftlang/swift/issues/83117":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117"},"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"type":"topic","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","role":"article","abstract":[{"text":"Learn about the current capabilities of OpenUSD in Swift","type":"text"}],"url":"\/documentation\/swiftusd\/capabilities","kind":"article","title":"Capabilities"},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"abstract":[{"text":"Dereferences a ","type":"text"},{"code":"pxr::TfRefPtr<T>","type":"codeVoice"},{"text":". Crashes if the pointer is null","type":"text"}],"type":"topic","title":"Dereference(_:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dereference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp"},{"text":".","kind":"text"},{"text":"_TfRefBaseType","kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa"}],"role":"symbol","url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz"},"https://github.com/swiftlang/swift/issues/83078":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078"},"https://github.com/swiftlang/swift/issues/83085":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085"},"https://github.com/swiftlang/swift/issues/83148":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},"https://github.com/swiftlang/swift/issues/83081":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081"},"rdar://149496877":{"title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence","identifier":"rdar:\/\/149496877","type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"}],"url":"rdar:\/\/149496877"},"rdar://137880350":{"identifier":"rdar:\/\/137880350","titleInlineContent":[{"type":"text","text":"rdar:\/\/137880350: "},{"code":"pxr.UsdGeomTokens","type":"codeVoice"},{"type":"text","text":" crashes Swift compiler"}],"type":"link","title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler","url":"rdar:\/\/137880350"},"https://github.com/swiftlang/swift/issues/83146":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146"},"https://openusd.org/release/api/index.html":{"identifier":"https:\/\/openusd.org\/release\/api\/index.html","titleInlineContent":[{"type":"text","text":"C++ API documentation"}],"type":"link","title":"C++ API documentation","url":"https:\/\/openusd.org\/release\/api\/index.html"},"https://github.com/swiftlang/swift/issues/83118":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118"},"https://github.com/swiftlang/swift/issues/83080":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080"},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"role":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift","kind":"article","title":"Differences in Swift","url":"\/documentation\/swiftusd\/differencesinswift","type":"topic","abstract":[{"text":"Learn how the OpenUSD API is different in Swift","type":"text"}]},"rdar://137879510":{"title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","identifier":"rdar:\/\/137879510","type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool"}],"url":"rdar:\/\/137879510"},"https://github.com/swiftlang/swift/issues/83151":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151"},"https://github.com/swiftlang/swift/issues/83153":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153"},"doc://SwiftUsd/documentation/OpenUSD":{"url":"\/documentation\/openusd","kind":"symbol","type":"topic","role":"collection","abstract":[],"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD","title":"OpenUSD"},"https://github.com/swiftlang/swift/pull/82496":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},"https://github.com/swiftlang/swift/issues/83149":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149"},"https://github.com/swiftlang/swift/issues/62127":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"}},"variantOverrides":[{"patch":[{"op":"replace","value":"occ","path":"\/identifier\/interfaceLanguage"},{"op":"add","value":null,"path":"\/topicSections"},{"op":"replace","value":[{"anchor":"Essentials","generated":true,"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"title":"Essentials"}],"path":"\/seeAlsoSections"}],"traits":[{"interfaceLanguage":"occ"}]}]}