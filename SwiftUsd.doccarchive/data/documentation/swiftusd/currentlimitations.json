{"identifier":{"url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials","generated":true,"title":"Essentials"}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"OpenUSD"}],"title":"Current Limitations","roleHeading":"Article","role":"article"},"abstract":[{"text":"Learn about the current limitations of OpenUSD in Swift","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:"}]},{"type":"heading","text":"Issues","level":3,"anchor":"Issues"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift compiler crashes"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"TfRefPtr.pointee"},{"type":"text","text":" and "},{"type":"codeVoice","code":"TfWeakPtr.pointee"},{"type":"text","text":" are unavailable"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Never use "},{"type":"codeVoice","code":".pointee"},{"type":"text","text":", always use "},{"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","type":"reference","isActive":true,"overridingTitle":"Overlay.Dereference(_:)","overridingTitleInlineContent":[{"type":"codeVoice","code":"Overlay.Dereference(_:)"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Nested "},{"type":"codeVoice","code":"enum"},{"type":"text","text":"s are not always imported ("},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"},{"type":"text","text":")"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Overlay.nested.enum"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"pxr.nested.enum"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Autocomplete is slow to index","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Refer to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/openusd.org\/release\/api\/index.html"},{"text":" ","type":"text"},{"text":"I need to investigate ","type":"text"},{"type":"codeVoice","code":"requires cplusplus"},{"text":" in the modulemap again.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"UsdStage","type":"codeVoice"},{"type":"text","text":" cannot be passed to function expecting "},{"code":"TfWeakPtr<UsdStage>","type":"codeVoice"},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround"}],"type":"strong"},{"type":"text","text":": Manually construct and pass "},{"code":"Overlay.TfWeakPtr(stage)","type":"codeVoice"},{"type":"text","text":" instead"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"pxr.UsdGeomSphere.GetPrim()","type":"codeVoice"},{"text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Use ","type":"text"},{"code":"Overlay.GetPrim(_ s: UsdGeomSphere)","type":"codeVoice"},{"text":" instead","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Some OpenUSD types are not imported","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Write C++ code that wraps types you need to use from Swift. See ","type":"text"},{"code":"source\/Wrappers","type":"codeVoice"},{"text":" for examples.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Write your own free function"}]}]}]},{"type":"heading","level":4,"anchor":"Highest-priority","text":"Highest priority"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Pass default arguments explicitly when calling C++ functions","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","level":4,"anchor":"High-priority","text":"High priority"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/133777029"},{"type":"text","text":" "},{"type":"text","text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to "},{"type":"codeVoice","code":"std::function"},{"type":"text","text":", and Linux doesn’t really support that."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch slightly, because it currently ","type":"text"},{"code":"#if !__swift__","type":"codeVoice"},{"text":"’s out some ","type":"text"},{"code":"static_assert","type":"codeVoice"},{"text":"’s that Swift erroneously triggers","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/150456875","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would require simplifying the patch slightly","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"rdar:\/\/148534260","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch a small amount. Requires ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","type":"reference"},{"text":" as well to simplify.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would simplify code generation without needing to make a typedef for the nested type","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation and satisfying protocol requirements in C++"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would make organizing import-as-member easier and avoid polluting the global namespace","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Write a non-friend function that calls the friend, and call the non-friend from Swift","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Limits the ability to do import-as-member replacements","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Without Swift-Cxx interop enabled, you get "},{"type":"codeVoice","code":"Error: Cannot load underlying module for 'CxxStdlib'"}],"type":"paragraph"}]}]},{"type":"heading","text":"Medium priority","anchor":"Medium-priority","level":4},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Don’t conform to protocols"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"code":"Availability: nonswift","type":"codeVoice"},{"type":"text","text":", then import-as-member on new stubs that call the unavailable methods"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","type":"reference"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/149496877","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/153678715"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/121886233"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can’t use "},{"type":"codeVoice","code":"pxr.VtArray<pxr.GfVec3f>"},{"type":"text","text":" or "},{"type":"codeVoice","code":"std.set<std.string>"},{"type":"text","text":" in Swift. Workaround of using a C++ typedef works but is annoying"}]}]}]},{"type":"heading","text":"Low priority","anchor":"Low-priority","level":4},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported","overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" not imported"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/138359065"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy to wrap function in Swift Package"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/132742486","isActive":true,"type":"reference"},{"text":")","type":"text"},{"text":"\n","type":"text"},{"text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"This could enable me to use API notes to succinctly conform all specializations of "},{"type":"codeVoice","code":"pxr::VtArray<T>"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be replaced with a "},{"type":"codeVoice","code":"Bool.init(UsdGeomSphere)"},{"type":"text","text":" supplied by this repo, which is also more ergonomic"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","type":"text"}],"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would be helpful for SwiftUsd in a few niche places.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/138118008"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/137880350"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/137879510","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be worked around by calling ","type":"text"},{"code":"__convertToBool()","type":"codeVoice"},{"text":". I can probably put ","type":"text"},{"code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}","type":"codeVoice"},{"text":" in the Swift Package, or add an initializer on ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy workaround in C++, but annoying to have to use everywhere.","type":"text"},{"text":"\n","type":"text"},{"text":"I can improve the workaround by using ","type":"text"},{"code":"SWIFT_NAME","type":"codeVoice"},{"text":" on the base class’s declaration of ","type":"text"},{"code":"GetPrim","type":"codeVoice"},{"text":" to hide that method from Swift, then extend each subclass to add a Swift method named ","type":"text"},{"code":"GetPrim()","type":"codeVoice"},{"text":" that calls a C++ helper method that calls the base class’s definition of ","type":"text"},{"code":"GetPrim","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Limits the ability to do import-as-member replacements","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftusd\/currentlimitations"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/swiftusd\/currentlimitations"]}],"sections":[],"references":{"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"title":"Capabilities","url":"\/documentation\/swiftusd\/capabilities","abstract":[{"text":"Learn about the current capabilities of OpenUSD in Swift","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","type":"topic"},"rdar://148534260":{"url":"rdar:\/\/148534260","identifier":"rdar:\/\/148534260","titleInlineContent":[{"type":"text","text":"rdar:\/\/148534260: API notes should support annotating C++ operators"}],"type":"link","title":"rdar:\/\/148534260: API notes should support annotating C++ operators"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"abstract":[{"text":"Adding SwiftUsd to your project or package","type":"text"}],"url":"\/documentation\/swiftusd\/gettingstarted","type":"topic","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","kind":"article","title":"Getting Started with OpenUSD","role":"article"},"https://github.com/swiftlang/swift/pull/82566":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"}]},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"kind":"symbol","abstract":[{"text":"Dereferences a ","type":"text"},{"code":"pxr::TfRefPtr<T>","type":"codeVoice"},{"text":". Crashes if the pointer is null","type":"text"}],"role":"symbol","type":"topic","title":"Dereference(_:)","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dereference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"_TfRefBaseType","preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa","kind":"typeIdentifier"}]},"https://github.com/swiftlang/swift/issues/83118":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"},"https://github.com/swiftlang/swift/issues/83155":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"}]},"https://github.com/swiftlang/swift/issues/83152":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"},"https://github.com/swiftlang/swift/issues/83151":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}]},"https://github.com/swiftlang/swift/issues/83154":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"},"rdar://137879510":{"type":"link","title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","identifier":"rdar:\/\/137879510","url":"rdar:\/\/137879510","titleInlineContent":[{"type":"text","text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool"}]},"https://github.com/swiftlang/swift/issues/83153":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"},"https://github.com/swiftlang/swift/issues/83081":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}]},"https://github.com/swiftlang/swift/pull/82579":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"},"rdar://133777029":{"type":"link","title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)","identifier":"rdar:\/\/133777029","url":"rdar:\/\/133777029","titleInlineContent":[{"type":"text","text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}]},"https://github.com/swiftlang/swift/pull/82485":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"},"rdar://150456875":{"type":"link","title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","identifier":"rdar:\/\/150456875","url":"rdar:\/\/150456875","titleInlineContent":[{"type":"text","text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"}]},"https://github.com/swiftlang/swift/pull/82496":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"},"https://github.com/swiftlang/swift/issues/83078":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"}]},"https://github.com/swiftlang/swift/issues/83148":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"role":"article","title":"Differences in Swift","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift","type":"topic","url":"\/documentation\/swiftusd\/differencesinswift","abstract":[{"type":"text","text":"Learn how the OpenUSD API is different in Swift"}],"kind":"article"},"https://github.com/swiftlang/swift/issues/62127":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"}]},"https://github.com/swiftlang/swift/issues/83085":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"},"https://github.com/swiftlang/swift/pull/82333":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"}]},"rdar://149496877":{"url":"rdar:\/\/149496877","identifier":"rdar:\/\/149496877","titleInlineContent":[{"type":"text","text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"}],"type":"link","title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"},"https://github.com/swiftlang/swift/issues/83115":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"}]},"rdar://138359065":{"url":"rdar:\/\/138359065","identifier":"rdar:\/\/138359065","titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}],"type":"link","title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"},"https://github.com/swiftlang/swift/issues/83146":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}]},"https://github.com/swiftlang/swift/issues/83117":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"},"https://github.com/swiftlang/swift/issues/83080":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime"}]},"https://github.com/swiftlang/swift/issues/83077":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"},"https://github.com/swiftlang/swift/issues/83144":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}]},"rdar://137880350":{"url":"rdar:\/\/137880350","identifier":"rdar:\/\/137880350","titleInlineContent":[{"type":"text","text":"rdar:\/\/137880350: "},{"type":"codeVoice","code":"pxr.UsdGeomTokens"},{"type":"text","text":" crashes Swift compiler"}],"type":"link","title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler"},"https://github.com/swiftlang/swift/issues/83079":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)"}]},"https://github.com/swiftlang/swift/pull/82161":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"},"https://github.com/swiftlang/swift/issues/83149":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"}]},"https://github.com/swiftlang/swift/pull/81709":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"},"doc://SwiftUsd/documentation/OpenUSD":{"title":"OpenUSD","url":"\/documentation\/openusd","kind":"symbol","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD","role":"collection","abstract":[],"type":"topic"},"rdar://138118008":{"type":"link","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)","identifier":"rdar:\/\/138118008","url":"rdar:\/\/138118008","titleInlineContent":[{"type":"text","text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"}]},"rdar://121886233":{"url":"rdar:\/\/121886233","identifier":"rdar:\/\/121886233","titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}],"type":"link","title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"},"rdar://153678715":{"type":"link","title":"rdar:\/\/153678715: std::vector should conform to Codable when T does","identifier":"rdar:\/\/153678715","url":"rdar:\/\/153678715","titleInlineContent":[{"type":"text","text":"rdar:\/\/153678715: std::vector"},{"type":"text","text":" should conform to Codable when T does"}]},"rdar://132742486":{"url":"rdar:\/\/132742486","identifier":"rdar:\/\/132742486","titleInlineContent":[{"type":"text","text":"rdar:\/\/132742486: Function returning C++ type in namespace is "},{"type":"codeVoice","code":"inaccessible due to '@_spi'"},{"type":"text","text":" when it isn’t marked SPI"}],"type":"link","title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI"},"https://github.com/swiftlang/swift/issues/83114":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"}]},"https://openusd.org/release/api/index.html":{"url":"https:\/\/openusd.org\/release\/api\/index.html","identifier":"https:\/\/openusd.org\/release\/api\/index.html","titleInlineContent":[{"type":"text","text":"C++ API documentation"}],"type":"link","title":"C++ API documentation"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"},{"path":"\/topicSections","op":"add","value":null},{"path":"\/seeAlsoSections","op":"replace","value":[{"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials","title":"Essentials","generated":true}]}]}]}