{"sections":[],"seeAlsoSections":[{"generated":true,"anchor":"Essentials","identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"title":"Essentials"}],"metadata":{"modules":[{"name":"OpenUSD"}],"role":"article","roleHeading":"Article","title":"Current Limitations"},"variants":[{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"occ"}]}],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"abstract":[{"type":"text","text":"Learn about the current limitations of OpenUSD in Swift"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:"}]},{"anchor":"Issues","level":3,"type":"heading","text":"Issues"},{"items":[{"content":[{"inlineContent":[{"text":"Swift compiler crashes","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"TfRefPtr.pointee"},{"type":"text","text":" and "},{"type":"codeVoice","code":"TfWeakPtr.pointee"},{"type":"text","text":" are unavailable"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Never use "},{"type":"codeVoice","code":".pointee"},{"type":"text","text":", always use "},{"type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"Overlay.Dereference(_:)"}],"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","overridingTitle":"Overlay.Dereference(_:)","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Nested ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":"s are not always imported (","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"reference"},{"text":")","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Use ","type":"text"},{"code":"Overlay.nested.enum","type":"codeVoice"},{"text":" instead of ","type":"text"},{"code":"pxr.nested.enum","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Autocomplete is slow to index"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Refer to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/openusd.org\/release\/api\/index.html"},{"text":" ","type":"text"},{"text":"I need to investigate ","type":"text"},{"type":"codeVoice","code":"requires cplusplus"},{"text":" in the modulemap again.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"UsdStage"},{"type":"text","text":" cannot be passed to function expecting "},{"type":"codeVoice","code":"TfWeakPtr<UsdStage>"},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround"}],"type":"strong"},{"type":"text","text":": Manually construct and pass "},{"type":"codeVoice","code":"Overlay.TfWeakPtr(stage)"},{"type":"text","text":" instead"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"pxr.UsdGeomSphere.GetPrim()","type":"codeVoice"},{"type":"text","text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)"},{"type":"text","text":" "},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"type":"text","text":" Use "},{"code":"Overlay.GetPrim(_ s: UsdGeomSphere)","type":"codeVoice"},{"type":"text","text":" instead"}]}]},{"content":[{"inlineContent":[{"text":"Some OpenUSD types are not imported","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Write C++ code that wraps types you need to use from Swift. See ","type":"text"},{"code":"source\/Wrappers","type":"codeVoice"},{"text":" for examples.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Write your own free function"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Highest-priority","type":"heading","text":"Highest priority","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Pass default arguments explicitly when calling C++ functions","type":"text"}]}]}]},{"anchor":"High-priority","type":"heading","text":"High priority","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/133777029"},{"type":"text","text":" "},{"type":"text","text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to "},{"code":"std::function","type":"codeVoice"},{"type":"text","text":", and Linux doesn’t really support that."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch slightly, because it currently ","type":"text"},{"code":"#if !__swift__","type":"codeVoice"},{"text":"’s out some ","type":"text"},{"code":"static_assert","type":"codeVoice"},{"text":"’s that Swift erroneously triggers","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/150456875","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would require simplifying the patch slightly"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/148534260","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would allow simplifying the patch a small amount. Requires "},{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","type":"reference","isActive":true},{"type":"text","text":" as well to simplify."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation without needing to make a typedef for the nested type"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation and satisfying protocol requirements in C++"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would make organizing import-as-member easier and avoid polluting the global namespace","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Write a non-friend function that calls the friend, and call the non-friend from Swift"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Without Swift-Cxx interop enabled, you get "},{"type":"codeVoice","code":"Error: Cannot load underlying module for 'CxxStdlib'"}]}]}]},{"anchor":"Medium-priority","type":"heading","text":"Medium priority","level":4},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115"},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Don’t conform to protocols"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Use ","type":"text"},{"type":"codeVoice","code":"Availability: nonswift"},{"text":", then import-as-member on new stubs that call the unavailable methods","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/149496877","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/153678715","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/121886233"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can’t use "},{"code":"pxr.VtArray<pxr.GfVec3f>","type":"codeVoice"},{"type":"text","text":" or "},{"code":"std.set<std.string>","type":"codeVoice"},{"type":"text","text":" in Swift. Workaround of using a C++ typedef works but is annoying"}]}]}]},{"anchor":"Low-priority","type":"heading","text":"Low priority","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114"}]}]},{"content":[{"inlineContent":[{"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported","overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" not imported"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/138359065","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy to wrap function in Swift Package","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/132742486"},{"type":"text","text":")"},{"type":"text","text":"\n"},{"type":"text","text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"text"}],"isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"This could enable me to use API notes to succinctly conform all specializations of "},{"type":"codeVoice","code":"pxr::VtArray<T>"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be replaced with a "},{"code":"Bool.init(UsdGeomSphere)","type":"codeVoice"},{"type":"text","text":" supplied by this repo, which is also more ergonomic"}]}]},{"content":[{"inlineContent":[{"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would be helpful for SwiftUsd in a few niche places.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy workaround","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/138118008"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"rdar:\/\/137880350","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur.","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/137879510"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be worked around by calling "},{"code":"__convertToBool()","type":"codeVoice"},{"type":"text","text":". I can probably put "},{"code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}","type":"codeVoice"},{"type":"text","text":" in the Swift Package, or add an initializer on "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround in C++, but annoying to have to use everywhere."},{"type":"text","text":"\n"},{"type":"text","text":"I can improve the workaround by using "},{"code":"SWIFT_NAME","type":"codeVoice"},{"type":"text","text":" on the base class’s declaration of "},{"code":"GetPrim","type":"codeVoice"},{"type":"text","text":" to hide that method from Swift, then extend each subclass to add a Swift method named "},{"code":"GetPrim()","type":"codeVoice"},{"type":"text","text":" that calls a C++ helper method that calls the base class’s definition of "},{"code":"GetPrim","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}]}]}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations"},"references":{"rdar://153678715":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/153678715: std::vector"},{"type":"text","text":" should conform to Codable when T does"}],"title":"rdar:\/\/153678715: std::vector should conform to Codable when T does","identifier":"rdar:\/\/153678715","url":"rdar:\/\/153678715","type":"link"},"https://github.com/swiftlang/swift/issues/83148":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"},"rdar://138359065":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}],"title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)","identifier":"rdar:\/\/138359065","url":"rdar:\/\/138359065","type":"link"},"https://github.com/swiftlang/swift/issues/83114":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"},"https://github.com/swiftlang/swift/issues/83146":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"abstract":[{"text":"Learn how the OpenUSD API is different in Swift","type":"text"}],"url":"\/documentation\/swiftusd\/differencesinswift","role":"article","type":"topic","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift","title":"Differences in Swift","kind":"article"},"rdar://121886233":{"url":"rdar:\/\/121886233","titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}],"type":"link","identifier":"rdar:\/\/121886233","title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"},"https://github.com/swiftlang/swift/issues/83144":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","type":"link"},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dereference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp"},{"text":".","kind":"text"},{"text":"_TfRefBaseType","kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa"}],"abstract":[{"text":"Dereferences a ","type":"text"},{"type":"codeVoice","code":"pxr::TfRefPtr<T>"},{"text":". Crashes if the pointer is null","type":"text"}],"url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz","role":"symbol","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","kind":"symbol","type":"topic","title":"Dereference(_:)"},"https://github.com/swiftlang/swift/issues/62127":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"role":"article","kind":"article","url":"\/documentation\/swiftusd\/gettingstarted","title":"Getting Started with OpenUSD","abstract":[{"type":"text","text":"Adding SwiftUsd to your project or package"}],"identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","type":"topic"},"rdar://150456875":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"}],"title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","identifier":"rdar:\/\/150456875","url":"rdar:\/\/150456875","type":"link"},"https://github.com/swiftlang/swift/issues/83154":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"},"https://github.com/swiftlang/swift/issues/83115":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","type":"link"},"https://github.com/swiftlang/swift/pull/82566":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"},"https://github.com/swiftlang/swift/issues/83153":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","type":"link"},"https://github.com/swiftlang/swift/issues/83155":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"},"https://github.com/swiftlang/swift/issues/83080":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"kind":"article","abstract":[{"text":"Learn about the current capabilities of OpenUSD in Swift","type":"text"}],"title":"Capabilities","type":"topic","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","role":"article","url":"\/documentation\/swiftusd\/capabilities"},"https://github.com/swiftlang/swift/pull/82333":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"},"https://github.com/swiftlang/swift/issues/83077":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","type":"link"},"https://github.com/swiftlang/swift/pull/81709":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"},"doc://SwiftUsd/documentation/OpenUSD":{"title":"OpenUSD","abstract":[],"role":"collection","type":"topic","url":"\/documentation\/openusd","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD","kind":"symbol"},"https://github.com/swiftlang/swift/issues/83151":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","type":"link"},"https://github.com/swiftlang/swift/pull/82161":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"},"https://github.com/swiftlang/swift/issues/83081":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","type":"link"},"rdar://138118008":{"url":"rdar:\/\/138118008","titleInlineContent":[{"type":"text","text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"}],"type":"link","identifier":"rdar:\/\/138118008","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"},"https://github.com/swiftlang/swift/pull/82485":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"}],"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","type":"link"},"rdar://132742486":{"url":"rdar:\/\/132742486","titleInlineContent":[{"type":"text","text":"rdar:\/\/132742486: Function returning C++ type in namespace is "},{"type":"codeVoice","code":"inaccessible due to '@_spi'"},{"type":"text","text":" when it isn’t marked SPI"}],"type":"link","identifier":"rdar:\/\/132742486","title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI"},"https://github.com/swiftlang/swift/issues/83078":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","type":"link"},"rdar://133777029":{"url":"rdar:\/\/133777029","titleInlineContent":[{"type":"text","text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}],"type":"link","identifier":"rdar:\/\/133777029","title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"},"rdar://137879510":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool"}],"title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","identifier":"rdar:\/\/137879510","url":"rdar:\/\/137879510","type":"link"},"rdar://137880350":{"url":"rdar:\/\/137880350","titleInlineContent":[{"type":"text","text":"rdar:\/\/137880350: "},{"type":"codeVoice","code":"pxr.UsdGeomTokens"},{"type":"text","text":" crashes Swift compiler"}],"type":"link","identifier":"rdar:\/\/137880350","title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler"},"https://github.com/swiftlang/swift/issues/83149":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"link"},"https://github.com/swiftlang/swift/issues/83118":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"},"https://github.com/swiftlang/swift/pull/82496":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}],"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","type":"link"},"rdar://148534260":{"url":"rdar:\/\/148534260","titleInlineContent":[{"type":"text","text":"rdar:\/\/148534260: API notes should support annotating C++ operators"}],"type":"link","identifier":"rdar:\/\/148534260","title":"rdar:\/\/148534260: API notes should support annotating C++ operators"},"https://openusd.org/release/api/index.html":{"titleInlineContent":[{"type":"text","text":"C++ API documentation"}],"title":"C++ API documentation","identifier":"https:\/\/openusd.org\/release\/api\/index.html","url":"https:\/\/openusd.org\/release\/api\/index.html","type":"link"},"https://github.com/swiftlang/swift/pull/82579":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"},"https://github.com/swiftlang/swift/issues/83079":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","type":"link"},"https://github.com/swiftlang/swift/issues/83152":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"},"rdar://149496877":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"}],"title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence","identifier":"rdar:\/\/149496877","url":"rdar:\/\/149496877","type":"link"},"https://github.com/swiftlang/swift/issues/83117":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"}],"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"},"https://github.com/swiftlang/swift/issues/83085":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","type":"link"}},"variantOverrides":[{"patch":[{"value":"occ","op":"replace","path":"\/identifier\/interfaceLanguage"},{"value":null,"op":"add","path":"\/topicSections"},{"value":[{"generated":true,"title":"Essentials","identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials"}],"op":"replace","path":"\/seeAlsoSections"}],"traits":[{"interfaceLanguage":"occ"}]}]}