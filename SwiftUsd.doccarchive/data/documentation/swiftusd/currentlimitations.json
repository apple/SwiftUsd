{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations"},"abstract":[{"type":"text","text":"Learn about the current limitations of OpenUSD in Swift"}],"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"generated":true,"anchor":"Essentials","title":"Essentials"}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"occ"}]}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:"}],"type":"paragraph"},{"anchor":"Issues","type":"heading","text":"Issues","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Swift compiler crashes"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"TfRefPtr.pointee","type":"codeVoice"},{"type":"text","text":" and "},{"code":"TfWeakPtr.pointee","type":"codeVoice"},{"type":"text","text":" are unavailable"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Never use "},{"code":".pointee","type":"codeVoice"},{"type":"text","text":", always use "},{"overridingTitle":"Overlay.Dereference(_:)","type":"reference","isActive":true,"overridingTitleInlineContent":[{"code":"Overlay.Dereference(_:)","type":"codeVoice"}],"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Nested "},{"type":"codeVoice","code":"enum"},{"type":"text","text":"s are not always imported ("},{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","isActive":true},{"type":"text","text":")"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Overlay.nested.enum"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"pxr.nested.enum"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Autocomplete is slow to index"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Refer to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/openusd.org\/release\/api\/index.html"},{"type":"text","text":" "},{"type":"text","text":"I need to investigate "},{"code":"requires cplusplus","type":"codeVoice"},{"type":"text","text":" in the modulemap again."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"UsdStage","type":"codeVoice"},{"type":"text","text":" cannot be passed to function expecting "},{"code":"TfWeakPtr<UsdStage>","type":"codeVoice"},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround"}],"type":"strong"},{"type":"text","text":": Manually construct and pass "},{"code":"Overlay.TfWeakPtr(stage)","type":"codeVoice"},{"type":"text","text":" instead"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"pxr.UsdGeomSphere.GetPrim()","type":"codeVoice"},{"text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Use ","type":"text"},{"code":"Overlay.GetPrim(_ s: UsdGeomSphere)","type":"codeVoice"},{"text":" instead","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Some OpenUSD types are not imported"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Write C++ code that wraps types you need to use from Swift. See "},{"type":"codeVoice","code":"source\/Wrappers"},{"type":"text","text":" for examples."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"type":"text","text":" Write your own free function"}],"type":"paragraph"}]}]},{"anchor":"Highest-priority","type":"heading","text":"Highest priority","level":4},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Pass default arguments explicitly when calling C++ functions"}],"type":"paragraph"}]}]},{"anchor":"High-priority","type":"heading","text":"High priority","level":4},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/133777029"},{"text":" ","type":"text"},{"text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to ","type":"text"},{"code":"std::function","type":"codeVoice"},{"text":", and Linux doesn’t really support that.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would allow simplifying the patch slightly, because it currently "},{"type":"codeVoice","code":"#if !__swift__"},{"type":"text","text":"’s out some "},{"type":"codeVoice","code":"static_assert"},{"type":"text","text":"’s that Swift erroneously triggers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/150456875","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would require simplifying the patch slightly"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/148534260","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would allow simplifying the patch a small amount. Requires "},{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","isActive":true},{"type":"text","text":" as well to simplify."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation without needing to make a typedef for the nested type"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would simplify code generation and satisfying protocol requirements in C++","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would make organizing import-as-member easier and avoid polluting the global namespace"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Write a non-friend function that calls the friend, and call the non-friend from Swift","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Limits the ability to do import-as-member replacements","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Without Swift-Cxx interop enabled, you get "},{"type":"codeVoice","code":"Error: Cannot load underlying module for 'CxxStdlib'"}],"type":"paragraph"}]}]},{"anchor":"Medium-priority","type":"heading","text":"Medium priority","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Don’t conform to protocols","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Use ","type":"text"},{"type":"codeVoice","code":"Availability: nonswift"},{"text":", then import-as-member on new stubs that call the unavailable methods","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","type":"reference"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/149496877","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/153678715","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/121886233","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can’t use ","type":"text"},{"type":"codeVoice","code":"pxr.VtArray<pxr.GfVec3f>"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"std.set<std.string>"},{"text":" in Swift. Workaround of using a C++ typedef works but is annoying","type":"text"}]}]}]},{"anchor":"Low-priority","type":"heading","text":"Low priority","level":4},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","isActive":true,"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported","overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" not imported"}],"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/138359065","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy to wrap function in Swift Package"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"rdar:\/\/132742486","type":"reference"},{"text":")","type":"text"},{"text":"\n","type":"text"},{"text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker.","type":"text"}]}]},{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"This could enable me to use API notes to succinctly conform all specializations of ","type":"text"},{"code":"pxr::VtArray<T>","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ExpressibleByArrayLiteral","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be replaced with a ","type":"text"},{"code":"Bool.init(UsdGeomSphere)","type":"codeVoice"},{"text":" supplied by this repo, which is also more ergonomic","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","type":"text"}],"type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would be helpful for SwiftUsd in a few niche places.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy workaround","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/138118008"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless."}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"rdar:\/\/137880350","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/137879510","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be worked around by calling "},{"type":"codeVoice","code":"__convertToBool()"},{"type":"text","text":". I can probably put "},{"type":"codeVoice","code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}"},{"type":"text","text":" in the Swift Package, or add an initializer on "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround in C++, but annoying to have to use everywhere."},{"type":"text","text":"\n"},{"type":"text","text":"I can improve the workaround by using "},{"type":"codeVoice","code":"SWIFT_NAME"},{"type":"text","text":" on the base class’s declaration of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":" to hide that method from Swift, then extend each subclass to add a Swift method named "},{"type":"codeVoice","code":"GetPrim()"},{"type":"text","text":" that calls a C++ helper method that calls the base class’s definition of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}]}]}]}]}],"metadata":{"role":"article","modules":[{"name":"OpenUSD"}],"title":"Current Limitations","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"references":{"rdar://137879510":{"titleInlineContent":[{"text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","type":"text"}],"url":"rdar:\/\/137879510","type":"link","identifier":"rdar:\/\/137879510","title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool"},"doc://SwiftUsd/documentation/OpenUSD":{"type":"topic","url":"\/documentation\/openusd","title":"OpenUSD","role":"collection","abstract":[],"kind":"symbol","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD"},"https://github.com/swiftlang/swift/issues/83155":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"},"https://github.com/swiftlang/swift/issues/83148":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"},"https://github.com/swiftlang/swift/pull/82333":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"},"https://github.com/swiftlang/swift/issues/83149":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"},"https://github.com/swiftlang/swift/pull/81709":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"},"https://github.com/swiftlang/swift/issues/83078":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"},"rdar://132742486":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/132742486: Function returning C++ type in namespace is "},{"type":"codeVoice","code":"inaccessible due to '@_spi'"},{"type":"text","text":" when it isn’t marked SPI"}],"url":"rdar:\/\/132742486","type":"link","identifier":"rdar:\/\/132742486","title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI"},"rdar://138359065":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}],"url":"rdar:\/\/138359065","type":"link","identifier":"rdar:\/\/138359065","title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"},"https://github.com/swiftlang/swift/issues/83152":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"},"rdar://138118008":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"}],"url":"rdar:\/\/138118008","type":"link","identifier":"rdar:\/\/138118008","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"},"https://github.com/swiftlang/swift/pull/82485":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"},"https://github.com/swiftlang/swift/issues/83118":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"},"https://github.com/swiftlang/swift/issues/83153":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"},"https://github.com/swiftlang/swift/issues/83154":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"},"https://openusd.org/release/api/index.html":{"titleInlineContent":[{"type":"text","text":"C++ API documentation"}],"url":"https:\/\/openusd.org\/release\/api\/index.html","type":"link","identifier":"https:\/\/openusd.org\/release\/api\/index.html","title":"C++ API documentation"},"https://github.com/swiftlang/swift/issues/83151":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"},"rdar://150456875":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"}],"url":"rdar:\/\/150456875","type":"link","identifier":"rdar:\/\/150456875","title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift","url":"\/documentation\/swiftusd\/differencesinswift","title":"Differences in Swift","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn how the OpenUSD API is different in Swift","type":"text"}]},"rdar://121886233":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}],"url":"rdar:\/\/121886233","type":"link","identifier":"rdar:\/\/121886233","title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"},"https://github.com/swiftlang/swift/issues/83079":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)"},"https://github.com/swiftlang/swift/pull/82161":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"title":"Dereference(_:)","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","role":"symbol","kind":"symbol","url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz","type":"topic","abstract":[{"text":"Dereferences a ","type":"text"},{"code":"pxr::TfRefPtr<T>","type":"codeVoice"},{"text":". Crashes if the pointer is null","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dereference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa","text":"_TfRefBaseType","kind":"typeIdentifier"}]},"https://github.com/swiftlang/swift/issues/62127":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"},"https://github.com/swiftlang/swift/issues/83081":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"},"https://github.com/swiftlang/swift/pull/82566":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"},"https://github.com/swiftlang/swift/issues/83114":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"},"rdar://149496877":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"}],"url":"rdar:\/\/149496877","type":"link","identifier":"rdar:\/\/149496877","title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"},"https://github.com/swiftlang/swift/pull/82496":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"},"https://github.com/swiftlang/swift/pull/82579":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"},"https://github.com/swiftlang/swift/issues/83085":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"},"https://github.com/swiftlang/swift/issues/83146":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"},"https://github.com/swiftlang/swift/issues/83144":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"},"https://github.com/swiftlang/swift/issues/83080":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime"},"rdar://148534260":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/148534260: API notes should support annotating C++ operators"}],"url":"rdar:\/\/148534260","type":"link","identifier":"rdar:\/\/148534260","title":"rdar:\/\/148534260: API notes should support annotating C++ operators"},"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"type":"topic","role":"article","url":"\/documentation\/swiftusd\/capabilities","kind":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","abstract":[{"text":"Learn about the current capabilities of OpenUSD in Swift","type":"text"}],"title":"Capabilities"},"https://github.com/swiftlang/swift/issues/83115":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","kind":"article","abstract":[{"type":"text","text":"Adding SwiftUsd to your project or package"}],"url":"\/documentation\/swiftusd\/gettingstarted","type":"topic","title":"Getting Started with OpenUSD","role":"article"},"rdar://137880350":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/137880350: "},{"type":"codeVoice","code":"pxr.UsdGeomTokens"},{"type":"text","text":" crashes Swift compiler"}],"url":"rdar:\/\/137880350","type":"link","identifier":"rdar:\/\/137880350","title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler"},"https://github.com/swiftlang/swift/issues/83117":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"},"https://github.com/swiftlang/swift/issues/83077":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"},"rdar://153678715":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/153678715: std::vector"},{"type":"text","text":" should conform to Codable when T does"}],"url":"rdar:\/\/153678715","type":"link","identifier":"rdar:\/\/153678715","title":"rdar:\/\/153678715: std::vector should conform to Codable when T does"},"rdar://133777029":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}],"url":"rdar:\/\/133777029","type":"link","identifier":"rdar:\/\/133777029","title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}},"variantOverrides":[{"patch":[{"path":"\/identifier\/interfaceLanguage","value":"occ","op":"replace"},{"path":"\/topicSections","value":null,"op":"add"},{"path":"\/seeAlsoSections","value":[{"title":"Essentials","generated":true,"anchor":"Essentials","identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"]}],"op":"replace"}],"traits":[{"interfaceLanguage":"occ"}]}]}