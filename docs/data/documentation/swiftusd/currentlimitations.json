{"variants":[{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"occ"}]}],"hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"abstract":[{"type":"text","text":"Learn about the current limitations of OpenUSD in Swift"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations"},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"generated":true,"anchor":"Essentials","title":"Essentials"}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:"}],"type":"paragraph"},{"anchor":"Issues","level":3,"text":"Issues","type":"heading"},{"items":[{"content":[{"inlineContent":[{"text":"Swift compiler crashes","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"TfRefPtr.pointee","type":"codeVoice"},{"type":"text","text":" and "},{"code":"TfWeakPtr.pointee","type":"codeVoice"},{"type":"text","text":" are unavailable"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Never use "},{"code":".pointee","type":"codeVoice"},{"type":"text","text":", always use "},{"overridingTitle":"Overlay.Dereference(_:)","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","overridingTitleInlineContent":[{"type":"codeVoice","code":"Overlay.Dereference(_:)"}],"isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Nested ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":"s are not always imported (","type":"text"},{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"reference","isActive":true},{"text":")","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Use ","type":"text"},{"type":"codeVoice","code":"Overlay.nested.enum"},{"text":" instead of ","type":"text"},{"type":"codeVoice","code":"pxr.nested.enum"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Autocomplete is slow to index","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Refer to the ","type":"text"},{"isActive":true,"identifier":"https:\/\/openusd.org\/release\/api\/index.html","type":"reference"},{"text":" ","type":"text"},{"text":"I need to investigate ","type":"text"},{"code":"requires cplusplus","type":"codeVoice"},{"text":" in the modulemap again.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"UsdStage","type":"codeVoice"},{"text":" cannot be passed to function expecting ","type":"text"},{"code":"TfWeakPtr<UsdStage>","type":"codeVoice"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround"}]},{"text":": Manually construct and pass ","type":"text"},{"code":"Overlay.TfWeakPtr(stage)","type":"codeVoice"},{"text":" instead","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"pxr.UsdGeomSphere.GetPrim()"},{"type":"text","text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Overlay.GetPrim(_ s: UsdGeomSphere)"},{"type":"text","text":" instead"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Some OpenUSD types are not imported","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Write C++ code that wraps types you need to use from Swift. See ","type":"text"},{"code":"source\/Wrappers","type":"codeVoice"},{"text":" for examples.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Write your own free function"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Highest-priority","level":4,"text":"Highest priority","type":"heading"},{"items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Pass default arguments explicitly when calling C++ functions","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"High-priority","level":4,"text":"High priority","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/133777029"},{"type":"text","text":" "},{"type":"text","text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to "},{"type":"codeVoice","code":"std::function"},{"type":"text","text":", and Linux doesn’t really support that."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would allow simplifying the patch slightly, because it currently "},{"type":"codeVoice","code":"#if !__swift__"},{"type":"text","text":"’s out some "},{"type":"codeVoice","code":"static_assert"},{"type":"text","text":"’s that Swift erroneously triggers"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/150456875"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would require simplifying the patch slightly"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/148534260","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would allow simplifying the patch a small amount. Requires "},{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","isActive":true},{"type":"text","text":" as well to simplify."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation without needing to make a typedef for the nested type"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation and satisfying protocol requirements in C++"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would make organizing import-as-member easier and avoid polluting the global namespace"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Write a non-friend function that calls the friend, and call the non-friend from Swift","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Limits the ability to do import-as-member replacements","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Without Swift-Cxx interop enabled, you get "},{"type":"codeVoice","code":"Error: Cannot load underlying module for 'CxxStdlib'"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Medium-priority","level":4,"text":"Medium priority","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Don’t conform to protocols"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Use "},{"code":"Availability: nonswift","type":"codeVoice"},{"type":"text","text":", then import-as-member on new stubs that call the unavailable methods"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/149496877"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/153678715","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/121886233"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can’t use "},{"code":"pxr.VtArray<pxr.GfVec3f>","type":"codeVoice"},{"type":"text","text":" or "},{"code":"std.set<std.string>","type":"codeVoice"},{"type":"text","text":" in Swift. Workaround of using a C++ typedef works but is annoying"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Low-priority","level":4,"text":"Low priority","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" not imported","type":"text"}],"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"reference","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/138359065","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames."}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy to wrap function in Swift Package","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/132742486","type":"reference","isActive":true},{"text":")","type":"text"},{"text":"\n","type":"text"},{"text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","type":"reference","isActive":true,"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"This could enable me to use API notes to succinctly conform all specializations of "},{"type":"codeVoice","code":"pxr::VtArray<T>"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be replaced with a "},{"type":"codeVoice","code":"Bool.init(UsdGeomSphere)"},{"type":"text","text":" supplied by this repo, which is also more ergonomic"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","type":"text"}],"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would be helpful for SwiftUsd in a few niche places."}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/138118008","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless."}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"rdar:\/\/137880350","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"rdar:\/\/137879510","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be worked around by calling ","type":"text"},{"type":"codeVoice","code":"__convertToBool()"},{"text":". I can probably put ","type":"text"},{"type":"codeVoice","code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}"},{"text":" in the Swift Package, or add an initializer on ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround in C++, but annoying to have to use everywhere."},{"type":"text","text":"\n"},{"type":"text","text":"I can improve the workaround by using "},{"type":"codeVoice","code":"SWIFT_NAME"},{"type":"text","text":" on the base class’s declaration of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":" to hide that method from Swift, then extend each subclass to add a Swift method named "},{"type":"codeVoice","code":"GetPrim()"},{"type":"text","text":" that calls a C++ helper method that calls the base class’s definition of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"kind":"article","metadata":{"modules":[{"name":"OpenUSD"}],"role":"article","roleHeading":"Article","title":"Current Limitations"},"sections":[],"references":{"rdar://133777029":{"type":"link","identifier":"rdar:\/\/133777029","titleInlineContent":[{"text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)","type":"text"}],"url":"rdar:\/\/133777029","title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"},"rdar://137879510":{"url":"rdar:\/\/137879510","identifier":"rdar:\/\/137879510","titleInlineContent":[{"type":"text","text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool"}],"title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"url":"\/documentation\/swiftusd\/differencesinswift","kind":"article","role":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift","title":"Differences in Swift","abstract":[{"type":"text","text":"Learn how the OpenUSD API is different in Swift"}],"type":"topic"},"https://github.com/swiftlang/swift/issues/83080":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83149":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","type":"text"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","type":"link"},"rdar://132742486":{"type":"link","identifier":"rdar:\/\/132742486","titleInlineContent":[{"text":"rdar:\/\/132742486: Function returning C++ type in namespace is ","type":"text"},{"type":"codeVoice","code":"inaccessible due to '@_spi'"},{"text":" when it isn’t marked SPI","type":"text"}],"url":"rdar:\/\/132742486","title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI"},"https://github.com/swiftlang/swift/issues/83151":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable","type":"link"},"https://github.com/swiftlang/swift/issues/83079":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079"},"https://github.com/swiftlang/swift/issues/83078":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","type":"text"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","type":"link"},"https://github.com/swiftlang/swift/pull/82333":{"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"},"https://github.com/swiftlang/swift/pull/82485":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"}],"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","type":"link"},"rdar://148534260":{"identifier":"rdar:\/\/148534260","type":"link","title":"rdar:\/\/148534260: API notes should support annotating C++ operators","titleInlineContent":[{"type":"text","text":"rdar:\/\/148534260: API notes should support annotating C++ operators"}],"url":"rdar:\/\/148534260"},"https://github.com/swiftlang/swift/issues/83144":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates","type":"link"},"https://github.com/swiftlang/swift/issues/83148":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},"https://github.com/swiftlang/swift/issues/83155":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","type":"text"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","type":"link"},"https://github.com/swiftlang/swift/issues/83117":{"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"},"https://github.com/swiftlang/swift/pull/82496":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}],"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces","type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"url":"\/documentation\/swiftusd\/gettingstarted","kind":"article","role":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","title":"Getting Started with OpenUSD","abstract":[{"type":"text","text":"Adding SwiftUsd to your project or package"}],"type":"topic"},"https://openusd.org/release/api/index.html":{"title":"C++ API documentation","identifier":"https:\/\/openusd.org\/release\/api\/index.html","url":"https:\/\/openusd.org\/release\/api\/index.html","titleInlineContent":[{"type":"text","text":"C++ API documentation"}],"type":"link"},"rdar://137880350":{"url":"rdar:\/\/137880350","identifier":"rdar:\/\/137880350","titleInlineContent":[{"text":"rdar:\/\/137880350: ","type":"text"},{"type":"codeVoice","code":"pxr.UsdGeomTokens"},{"text":" crashes Swift compiler","type":"text"}],"title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler","type":"link"},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dereference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa","text":"_TfRefBaseType","kind":"typeIdentifier"}],"role":"symbol","abstract":[{"text":"Dereferences a ","type":"text"},{"code":"pxr::TfRefPtr<T>","type":"codeVoice"},{"text":". Crashes if the pointer is null","type":"text"}],"title":"Dereference(_:)","url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz"},"https://github.com/swiftlang/swift/pull/82566":{"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"},"https://github.com/swiftlang/swift/issues/83085":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","type":"link"},"https://github.com/swiftlang/swift/issues/83152":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152"},"https://github.com/swiftlang/swift/issues/62127":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"text"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"link"},"https://github.com/swiftlang/swift/issues/83154":{"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"},"rdar://150456875":{"url":"rdar:\/\/150456875","identifier":"rdar:\/\/150456875","titleInlineContent":[{"type":"text","text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"}],"title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","type":"link"},"https://github.com/swiftlang/swift/issues/83081":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081"},"https://github.com/swiftlang/swift/pull/82579":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace","type":"text"}],"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace","type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"abstract":[{"text":"Learn about the current capabilities of OpenUSD in Swift","type":"text"}],"role":"article","title":"Capabilities","url":"\/documentation\/swiftusd\/capabilities","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","type":"topic","kind":"article"},"rdar://153678715":{"type":"link","identifier":"rdar:\/\/153678715","titleInlineContent":[{"text":"rdar:\/\/153678715: std::vector","type":"text"},{"text":" should conform to Codable when T does","type":"text"}],"url":"rdar:\/\/153678715","title":"rdar:\/\/153678715: std::vector should conform to Codable when T does"},"rdar://149496877":{"url":"rdar:\/\/149496877","identifier":"rdar:\/\/149496877","titleInlineContent":[{"text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence","type":"text"}],"title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence","type":"link"},"doc://SwiftUsd/documentation/OpenUSD":{"role":"collection","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD","type":"topic","abstract":[],"title":"OpenUSD","url":"\/documentation\/openusd","kind":"symbol"},"https://github.com/swiftlang/swift/pull/82161":{"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"},"https://github.com/swiftlang/swift/issues/83077":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift","type":"link"},"https://github.com/swiftlang/swift/pull/81709":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709"},"https://github.com/swiftlang/swift/issues/83114":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types","type":"text"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types","type":"link"},"rdar://138118008":{"type":"link","identifier":"rdar:\/\/138118008","titleInlineContent":[{"text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)","type":"text"}],"url":"rdar:\/\/138118008","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"},"rdar://121886233":{"url":"rdar:\/\/121886233","identifier":"rdar:\/\/121886233","titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}],"title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax","type":"link"},"https://github.com/swiftlang/swift/issues/83146":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146"},"https://github.com/swiftlang/swift/issues/83115":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","type":"text"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","type":"link"},"https://github.com/swiftlang/swift/issues/83118":{"type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"},"rdar://138359065":{"url":"rdar:\/\/138359065","identifier":"rdar:\/\/138359065","titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}],"title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)","type":"link"},"https://github.com/swiftlang/swift/issues/83153":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}],"type":"link"}},"variantOverrides":[{"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"},{"path":"\/topicSections","op":"add","value":null},{"path":"\/seeAlsoSections","op":"replace","value":[{"title":"Essentials","generated":true,"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials"}]}],"traits":[{"interfaceLanguage":"occ"}]}]}