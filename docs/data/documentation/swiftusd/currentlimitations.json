{"sections":[],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Issues","anchor":"Issues"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Swift compiler crashes","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"TfRefPtr.pointee","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"TfWeakPtr.pointee","type":"codeVoice"},{"text":" are unavailable","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Never use ","type":"text"},{"code":".pointee","type":"codeVoice"},{"text":", always use ","type":"text"},{"isActive":true,"overridingTitle":"Overlay.Dereference(_:)","overridingTitleInlineContent":[{"code":"Overlay.Dereference(_:)","type":"codeVoice"}],"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Nested "},{"code":"enum","type":"codeVoice"},{"type":"text","text":"s are not always imported ("},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"},{"type":"text","text":")"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Use "},{"code":"Overlay.nested.enum","type":"codeVoice"},{"type":"text","text":" instead of "},{"code":"pxr.nested.enum","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Autocomplete is slow to index","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Refer to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/openusd.org\/release\/api\/index.html"},{"text":" ","type":"text"},{"text":"I need to investigate ","type":"text"},{"type":"codeVoice","code":"requires cplusplus"},{"text":" in the modulemap again.","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"UsdStage","type":"codeVoice"},{"text":" cannot be passed to function expecting ","type":"text"},{"code":"TfWeakPtr<UsdStage>","type":"codeVoice"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround","type":"text"}]},{"text":": Manually construct and pass ","type":"text"},{"code":"Overlay.TfWeakPtr(stage)","type":"codeVoice"},{"text":" instead","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"pxr.UsdGeomSphere.GetPrim()","type":"codeVoice"},{"type":"text","text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"code":"Overlay.GetPrim(_ s: UsdGeomSphere)","type":"codeVoice"},{"type":"text","text":" instead"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Some OpenUSD types are not imported","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Write C++ code that wraps types you need to use from Swift. See ","type":"text"},{"code":"source\/Wrappers","type":"codeVoice"},{"text":" for examples.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Write your own free function","type":"text"}]}]}]},{"type":"heading","level":4,"text":"Highest priority","anchor":"Highest-priority"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Pass default arguments explicitly when calling C++ functions"}],"type":"paragraph"}]}]},{"type":"heading","level":4,"text":"High priority","anchor":"High-priority"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/133777029","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to ","type":"text"},{"code":"std::function","type":"codeVoice"},{"text":", and Linux doesn’t really support that.","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch slightly, because it currently ","type":"text"},{"code":"#if !__swift__","type":"codeVoice"},{"text":"’s out some ","type":"text"},{"code":"static_assert","type":"codeVoice"},{"text":"’s that Swift erroneously triggers","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/150456875"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would require simplifying the patch slightly"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/148534260"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would allow simplifying the patch a small amount. Requires "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118"},{"type":"text","text":" as well to simplify."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would simplify code generation without needing to make a typedef for the nested type","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would simplify code generation and satisfying protocol requirements in C++","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would make organizing import-as-member easier and avoid polluting the global namespace","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085"},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"type":"text","text":" Write a non-friend function that calls the friend, and call the non-friend from Swift"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Limits the ability to do import-as-member replacements","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Without Swift-Cxx interop enabled, you get ","type":"text"},{"code":"Error: Cannot load underlying module for 'CxxStdlib'","type":"codeVoice"}]}]}]},{"type":"heading","level":4,"text":"Medium priority","anchor":"Medium-priority"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Don’t conform to protocols","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Availability: nonswift"},{"type":"text","text":", then import-as-member on new stubs that call the unavailable methods"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"rdar:\/\/149496877","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/153678715","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/121886233"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can’t use "},{"code":"pxr.VtArray<pxr.GfVec3f>","type":"codeVoice"},{"type":"text","text":" or "},{"code":"std.set<std.string>","type":"codeVoice"},{"type":"text","text":" in Swift. Workaround of using a C++ typedef works but is annoying"}]}]}]},{"type":"heading","level":4,"text":"Low priority","anchor":"Low-priority"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" not imported","type":"text"}],"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST.","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/138359065","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy to wrap function in Swift Package","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/132742486","type":"reference","isActive":true},{"text":")","type":"text"},{"text":"\n","type":"text"},{"text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}]},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"This could enable me to use API notes to succinctly conform all specializations of ","type":"text"},{"type":"codeVoice","code":"pxr::VtArray<T>"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be replaced with a "},{"type":"codeVoice","code":"Bool.init(UsdGeomSphere)"},{"type":"text","text":" supplied by this repo, which is also more ergonomic"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would be helpful for SwiftUsd in a few niche places."}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy workaround","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/138118008","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless.","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"rdar:\/\/137880350","type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/137879510","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be worked around by calling ","type":"text"},{"code":"__convertToBool()","type":"codeVoice"},{"text":". I can probably put ","type":"text"},{"code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}","type":"codeVoice"},{"text":" in the Swift Package, or add an initializer on ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy workaround in C++, but annoying to have to use everywhere.","type":"text"},{"text":"\n","type":"text"},{"text":"I can improve the workaround by using ","type":"text"},{"code":"SWIFT_NAME","type":"codeVoice"},{"text":" on the base class’s declaration of ","type":"text"},{"code":"GetPrim","type":"codeVoice"},{"text":" to hide that method from Swift, then extend each subclass to add a Swift method named ","type":"text"},{"code":"GetPrim()","type":"codeVoice"},{"text":" that calls a C++ helper method that calls the base class’s definition of ","type":"text"},{"code":"GetPrim","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}],"type":"paragraph"}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"occ"}]}],"kind":"article","abstract":[{"text":"Learn about the current limitations of OpenUSD in Swift","type":"text"}],"metadata":{"roleHeading":"Article","title":"Current Limitations","role":"article","modules":[{"name":"OpenUSD"}]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials","title":"Essentials"}],"identifier":{"url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations","interfaceLanguage":"swift"},"references":{"https://github.com/swiftlang/swift/issues/83080":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83114":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"},"rdar://150456875":{"url":"rdar:\/\/150456875","identifier":"rdar:\/\/150456875","title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","titleInlineContent":[{"type":"text","text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"}],"type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"kind":"article","role":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","title":"Getting Started with OpenUSD","url":"\/documentation\/swiftusd\/gettingstarted","abstract":[{"text":"Adding SwiftUsd to your project or package","type":"text"}],"type":"topic"},"https://github.com/swiftlang/swift/issues/83154":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"},"https://github.com/swiftlang/swift/issues/83117":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83118":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"},"https://github.com/swiftlang/swift/issues/83081":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83115":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"},"rdar://153678715":{"url":"rdar:\/\/153678715","identifier":"rdar:\/\/153678715","title":"rdar:\/\/153678715: std::vector should conform to Codable when T does","titleInlineContent":[{"type":"text","text":"rdar:\/\/153678715: std::vector"},{"type":"text","text":" should conform to Codable when T does"}],"type":"link"},"rdar://137880350":{"type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/137880350: "},{"type":"codeVoice","code":"pxr.UsdGeomTokens"},{"type":"text","text":" crashes Swift compiler"}],"url":"rdar:\/\/137880350","identifier":"rdar:\/\/137880350","title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler"},"rdar://138359065":{"url":"rdar:\/\/138359065","identifier":"rdar:\/\/138359065","title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)","titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}],"type":"link"},"https://github.com/swiftlang/swift/pull/82161":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"},"https://github.com/swiftlang/swift/pull/82333":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"}],"type":"link"},"rdar://138118008":{"type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"}],"url":"rdar:\/\/138118008","identifier":"rdar:\/\/138118008","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"},"https://github.com/swiftlang/swift/issues/62127":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83152":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"},"https://github.com/swiftlang/swift/issues/83155":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83144":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"},"rdar://149496877":{"url":"rdar:\/\/149496877","identifier":"rdar:\/\/149496877","title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence","titleInlineContent":[{"type":"text","text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83077":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"},"https://github.com/swiftlang/swift/issues/83146":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83153":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"},"https://github.com/swiftlang/swift/pull/81709":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"}],"type":"link"},"rdar://133777029":{"type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}],"url":"rdar:\/\/133777029","identifier":"rdar:\/\/133777029","title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"},"https://github.com/swiftlang/swift/pull/82579":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"}],"type":"link"},"https://github.com/swiftlang/swift/pull/82496":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"},"https://github.com/swiftlang/swift/issues/83085":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83151":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"},"https://openusd.org/release/api/index.html":{"url":"https:\/\/openusd.org\/release\/api\/index.html","identifier":"https:\/\/openusd.org\/release\/api\/index.html","title":"C++ API documentation","titleInlineContent":[{"type":"text","text":"C++ API documentation"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83149":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"},"https://github.com/swiftlang/swift/issues/83148":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83078":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"},"https://github.com/swiftlang/swift/pull/82485":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"}],"type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"kind":"article","role":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","title":"Capabilities","url":"\/documentation\/swiftusd\/capabilities","abstract":[{"text":"Learn about the current capabilities of OpenUSD in Swift","type":"text"}],"type":"topic"},"rdar://137879510":{"type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool"}],"url":"rdar:\/\/137879510","identifier":"rdar:\/\/137879510","title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool"},"https://github.com/swiftlang/swift/issues/83079":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)"}],"type":"link"},"doc://SwiftUsd/documentation/OpenUSD":{"title":"OpenUSD","abstract":[],"url":"\/documentation\/openusd","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD"},"rdar://148534260":{"type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/148534260: API notes should support annotating C++ operators"}],"url":"rdar:\/\/148534260","identifier":"rdar:\/\/148534260","title":"rdar:\/\/148534260: API notes should support annotating C++ operators"},"https://github.com/swiftlang/swift/pull/82566":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"}],"type":"link"},"rdar://121886233":{"type":"link","titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}],"url":"rdar:\/\/121886233","identifier":"rdar:\/\/121886233","title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"kind":"symbol","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dereference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa","text":"_TfRefBaseType","kind":"typeIdentifier"}],"url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz","title":"Dereference(_:)","abstract":[{"type":"text","text":"Dereferences a "},{"type":"codeVoice","code":"pxr::TfRefPtr<T>"},{"type":"text","text":". Crashes if the pointer is null"}],"role":"symbol","type":"topic"},"rdar://132742486":{"url":"rdar:\/\/132742486","identifier":"rdar:\/\/132742486","title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI","titleInlineContent":[{"type":"text","text":"rdar:\/\/132742486: Function returning C++ type in namespace is "},{"type":"codeVoice","code":"inaccessible due to '@_spi'"},{"type":"text","text":" when it isn’t marked SPI"}],"type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"title":"Differences in Swift","role":"article","kind":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift","type":"topic","url":"\/documentation\/swiftusd\/differencesinswift","abstract":[{"type":"text","text":"Learn how the OpenUSD API is different in Swift"}]}},"variantOverrides":[{"patch":[{"value":"occ","op":"replace","path":"\/identifier\/interfaceLanguage"},{"value":null,"op":"add","path":"\/topicSections"},{"value":[{"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"generated":true}],"op":"replace","path":"\/seeAlsoSections"}],"traits":[{"interfaceLanguage":"occ"}]}]}