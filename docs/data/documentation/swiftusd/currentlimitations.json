{"metadata":{"roleHeading":"Article","title":"Current Limitations","role":"article","modules":[{"name":"OpenUSD"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftusd\/currentlimitations"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/swiftusd\/currentlimitations"]}],"seeAlsoSections":[{"title":"Essentials","generated":true,"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:","type":"text"}]},{"type":"heading","anchor":"Issues","text":"Issues","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift compiler crashes"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently"}]}]},{"content":[{"inlineContent":[{"code":"TfRefPtr.pointee","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"TfWeakPtr.pointee","type":"codeVoice"},{"text":" are unavailable","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Never use ","type":"text"},{"code":".pointee","type":"codeVoice"},{"text":", always use ","type":"text"},{"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","overridingTitle":"Overlay.Dereference(_:)","overridingTitleInlineContent":[{"code":"Overlay.Dereference(_:)","type":"codeVoice"}],"isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Nested ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":"s are not always imported (","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","isActive":true},{"text":")","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Use ","type":"text"},{"type":"codeVoice","code":"Overlay.nested.enum"},{"text":" instead of ","type":"text"},{"type":"codeVoice","code":"pxr.nested.enum"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Autocomplete is slow to index"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Refer to the "},{"type":"reference","identifier":"https:\/\/openusd.org\/release\/api\/index.html","isActive":true},{"type":"text","text":" "},{"type":"text","text":"I need to investigate "},{"type":"codeVoice","code":"requires cplusplus"},{"type":"text","text":" in the modulemap again."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"UsdStage"},{"type":"text","text":" cannot be passed to function expecting "},{"type":"codeVoice","code":"TfWeakPtr<UsdStage>"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround","type":"text"}]},{"type":"text","text":": Manually construct and pass "},{"type":"codeVoice","code":"Overlay.TfWeakPtr(stage)"},{"type":"text","text":" instead"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"pxr.UsdGeomSphere.GetPrim()"},{"text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)","type":"text"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Use ","type":"text"},{"type":"codeVoice","code":"Overlay.GetPrim(_ s: UsdGeomSphere)"},{"text":" instead","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Some OpenUSD types are not imported"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Write C++ code that wraps types you need to use from Swift. See "},{"type":"codeVoice","code":"source\/Wrappers"},{"type":"text","text":" for examples."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Write your own free function","type":"text"}]}]}]},{"type":"heading","anchor":"Highest-priority","text":"Highest priority","level":4},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Pass default arguments explicitly when calling C++ functions","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"High-priority","text":"High priority","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/133777029","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to "},{"code":"std::function","type":"codeVoice"},{"type":"text","text":", and Linux doesn’t really support that."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch slightly, because it currently ","type":"text"},{"code":"#if !__swift__","type":"codeVoice"},{"text":"’s out some ","type":"text"},{"code":"static_assert","type":"codeVoice"},{"text":"’s that Swift erroneously triggers","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/150456875","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would require simplifying the patch slightly","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"rdar:\/\/148534260","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch a small amount. Requires ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","type":"reference"},{"text":" as well to simplify.","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would simplify code generation without needing to make a typedef for the nested type","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation and satisfying protocol requirements in C++"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would make organizing import-as-member easier and avoid polluting the global namespace","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Write a non-friend function that calls the friend, and call the non-friend from Swift"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Without Swift-Cxx interop enabled, you get "},{"type":"codeVoice","code":"Error: Cannot load underlying module for 'CxxStdlib'"}]}]}]},{"type":"heading","anchor":"Medium-priority","text":"Medium priority","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Don’t conform to protocols"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Availability: nonswift"},{"type":"text","text":", then import-as-member on new stubs that call the unavailable methods"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/149496877","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"rdar:\/\/153678715","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/121886233","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can’t use "},{"type":"codeVoice","code":"pxr.VtArray<pxr.GfVec3f>"},{"type":"text","text":" or "},{"type":"codeVoice","code":"std.set<std.string>"},{"type":"text","text":" in Swift. Workaround of using a C++ typedef works but is annoying"}]}]}]},{"type":"heading","anchor":"Low-priority","text":"Low priority","level":4},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","isActive":true,"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported","overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" not imported","type":"text"}]},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/138359065","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames."}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy to wrap function in Swift Package"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/132742486","type":"reference","isActive":true},{"type":"text","text":")"},{"type":"text","text":"\n"},{"type":"text","text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"This could enable me to use API notes to succinctly conform all specializations of ","type":"text"},{"code":"pxr::VtArray<T>","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ExpressibleByArrayLiteral","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be replaced with a "},{"type":"codeVoice","code":"Bool.init(UsdGeomSphere)"},{"type":"text","text":" supplied by this repo, which is also more ergonomic"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types"}],"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would be helpful for SwiftUsd in a few niche places.","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy workaround","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/138118008"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"rdar:\/\/137880350","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur.","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/137879510","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be worked around by calling ","type":"text"},{"code":"__convertToBool()","type":"codeVoice"},{"text":". I can probably put ","type":"text"},{"code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}","type":"codeVoice"},{"text":" in the Swift Package, or add an initializer on ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround in C++, but annoying to have to use everywhere."},{"type":"text","text":"\n"},{"type":"text","text":"I can improve the workaround by using "},{"type":"codeVoice","code":"SWIFT_NAME"},{"type":"text","text":" on the base class’s declaration of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":" to hide that method from Swift, then extend each subclass to add a Swift method named "},{"type":"codeVoice","code":"GetPrim()"},{"type":"text","text":" that calls a C++ helper method that calls the base class’s definition of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}]}]}]}]}],"kind":"article","abstract":[{"type":"text","text":"Learn about the current limitations of OpenUSD in Swift"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations"},"hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"sections":[],"references":{"https://github.com/swiftlang/swift/pull/82579":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"}]},"https://github.com/swiftlang/swift/issues/83117":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","type":"link"},"https://github.com/swiftlang/swift/issues/83153":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}]},"https://github.com/swiftlang/swift/issues/83151":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","type":"link"},"https://github.com/swiftlang/swift/issues/83144":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}]},"https://github.com/swiftlang/swift/issues/83149":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"link"},"rdar://138359065":{"identifier":"rdar:\/\/138359065","type":"link","title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)","url":"rdar:\/\/138359065","titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}]},"https://github.com/swiftlang/swift/issues/83114":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","type":"link"},"https://github.com/swiftlang/swift/issues/83115":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"}]},"https://github.com/swiftlang/swift/issues/83152":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"type":"topic","title":"Capabilities","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","kind":"article","abstract":[{"type":"text","text":"Learn about the current capabilities of OpenUSD in Swift"}],"role":"article","url":"\/documentation\/swiftusd\/capabilities"},"https://github.com/swiftlang/swift/issues/83081":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}]},"rdar://149496877":{"title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence","identifier":"rdar:\/\/149496877","titleInlineContent":[{"type":"text","text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"}],"url":"rdar:\/\/149496877","type":"link"},"https://github.com/swiftlang/swift/issues/83118":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}]},"https://openusd.org/release/api/index.html":{"title":"C++ API documentation","identifier":"https:\/\/openusd.org\/release\/api\/index.html","titleInlineContent":[{"type":"text","text":"C++ API documentation"}],"url":"https:\/\/openusd.org\/release\/api\/index.html","type":"link"},"https://github.com/swiftlang/swift/pull/82333":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments"}]},"rdar://121886233":{"title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax","identifier":"rdar:\/\/121886233","titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}],"url":"rdar:\/\/121886233","type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"url":"\/documentation\/swiftusd\/gettingstarted","role":"article","type":"topic","title":"Getting Started with OpenUSD","abstract":[{"text":"Adding SwiftUsd to your project or package","type":"text"}],"kind":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted"},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"type":"topic","role":"symbol","title":"Dereference(_:)","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"Dereference"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa","text":"_TfRefBaseType"}],"kind":"symbol","abstract":[{"text":"Dereferences a ","type":"text"},{"type":"codeVoice","code":"pxr::TfRefPtr<T>"},{"text":". Crashes if the pointer is null","type":"text"}],"url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz"},"rdar://138118008":{"identifier":"rdar:\/\/138118008","type":"link","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)","url":"rdar:\/\/138118008","titleInlineContent":[{"type":"text","text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"}]},"rdar://150456875":{"title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","identifier":"rdar:\/\/150456875","titleInlineContent":[{"type":"text","text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"}],"url":"rdar:\/\/150456875","type":"link"},"https://github.com/swiftlang/swift/issues/83155":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"}]},"https://github.com/swiftlang/swift/pull/82161":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","type":"link"},"https://github.com/swiftlang/swift/issues/83146":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}]},"rdar://133777029":{"title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)","identifier":"rdar:\/\/133777029","titleInlineContent":[{"type":"text","text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}],"url":"rdar:\/\/133777029","type":"link"},"rdar://148534260":{"identifier":"rdar:\/\/148534260","type":"link","title":"rdar:\/\/148534260: API notes should support annotating C++ operators","url":"rdar:\/\/148534260","titleInlineContent":[{"type":"text","text":"rdar:\/\/148534260: API notes should support annotating C++ operators"}]},"https://github.com/swiftlang/swift/pull/82485":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","type":"link"},"https://github.com/swiftlang/swift/issues/83154":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"}]},"rdar://137880350":{"title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler","identifier":"rdar:\/\/137880350","titleInlineContent":[{"type":"text","text":"rdar:\/\/137880350: "},{"type":"codeVoice","code":"pxr.UsdGeomTokens"},{"type":"text","text":" crashes Swift compiler"}],"url":"rdar:\/\/137880350","type":"link"},"https://github.com/swiftlang/swift/pull/82566":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"}]},"https://github.com/swiftlang/swift/issues/83077":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","type":"link"},"https://github.com/swiftlang/swift/issues/62127":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"}]},"https://github.com/swiftlang/swift/pull/82496":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","type":"link"},"rdar://132742486":{"identifier":"rdar:\/\/132742486","type":"link","title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI","url":"rdar:\/\/132742486","titleInlineContent":[{"type":"text","text":"rdar:\/\/132742486: Function returning C++ type in namespace is "},{"type":"codeVoice","code":"inaccessible due to '@_spi'"},{"type":"text","text":" when it isn’t marked SPI"}]},"https://github.com/swiftlang/swift/issues/83079":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","type":"link"},"rdar://153678715":{"identifier":"rdar:\/\/153678715","type":"link","title":"rdar:\/\/153678715: std::vector should conform to Codable when T does","url":"rdar:\/\/153678715","titleInlineContent":[{"type":"text","text":"rdar:\/\/153678715: std::vector"},{"type":"text","text":" should conform to Codable when T does"}]},"rdar://137879510":{"title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","identifier":"rdar:\/\/137879510","titleInlineContent":[{"type":"text","text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool"}],"url":"rdar:\/\/137879510","type":"link"},"https://github.com/swiftlang/swift/issues/83078":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"}]},"https://github.com/swiftlang/swift/issues/83085":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"type":"topic","title":"Differences in Swift","url":"\/documentation\/swiftusd\/differencesinswift","role":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift","kind":"article","abstract":[{"type":"text","text":"Learn how the OpenUSD API is different in Swift"}]},"https://github.com/swiftlang/swift/pull/81709":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance"}],"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","type":"link"},"https://github.com/swiftlang/swift/issues/83148":{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand"}]},"https://github.com/swiftlang/swift/issues/83080":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","type":"link"},"doc://SwiftUsd/documentation/OpenUSD":{"kind":"symbol","title":"OpenUSD","url":"\/documentation\/openusd","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD","role":"collection","type":"topic","abstract":[]}},"variantOverrides":[{"patch":[{"value":"occ","op":"replace","path":"\/identifier\/interfaceLanguage"},{"value":null,"op":"add","path":"\/topicSections"},{"value":[{"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"generated":true,"anchor":"Essentials","title":"Essentials"}],"op":"replace","path":"\/seeAlsoSections"}],"traits":[{"interfaceLanguage":"occ"}]}]}