{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftusd\/currentlimitations"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/swiftusd\/currentlimitations"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"metadata":{"title":"Current Limitations","modules":[{"name":"OpenUSD"}],"roleHeading":"Article","role":"article"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:"}]},{"anchor":"Issues","type":"heading","text":"Issues","level":3},{"items":[{"content":[{"inlineContent":[{"text":"Swift compiler crashes","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"TfRefPtr.pointee"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"TfWeakPtr.pointee"},{"text":" are unavailable","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Never use ","type":"text"},{"type":"codeVoice","code":".pointee"},{"text":", always use ","type":"text"},{"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","overridingTitle":"Overlay.Dereference(_:)","isActive":true,"overridingTitleInlineContent":[{"code":"Overlay.Dereference(_:)","type":"codeVoice"}],"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Nested "},{"type":"codeVoice","code":"enum"},{"type":"text","text":"s are not always imported ("},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"},{"type":"text","text":")"},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Overlay.nested.enum"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"pxr.nested.enum"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Autocomplete is slow to index"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Refer to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/openusd.org\/release\/api\/index.html"},{"type":"text","text":" "},{"type":"text","text":"I need to investigate "},{"type":"codeVoice","code":"requires cplusplus"},{"type":"text","text":" in the modulemap again."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"UsdStage","type":"codeVoice"},{"text":" cannot be passed to function expecting ","type":"text"},{"code":"TfWeakPtr<UsdStage>","type":"codeVoice"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround"}],"type":"strong"},{"text":": Manually construct and pass ","type":"text"},{"code":"Overlay.TfWeakPtr(stage)","type":"codeVoice"},{"text":" instead","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"pxr.UsdGeomSphere.GetPrim()"},{"type":"text","text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Overlay.GetPrim(_ s: UsdGeomSphere)"},{"type":"text","text":" instead"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Some OpenUSD types are not imported"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"type":"text","text":" Write C++ code that wraps types you need to use from Swift. See "},{"code":"source\/Wrappers","type":"codeVoice"},{"type":"text","text":" for examples."}]}]},{"content":[{"inlineContent":[{"text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Write your own free function","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Highest-priority","type":"heading","text":"Highest priority","level":4},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Pass default arguments explicitly when calling C++ functions"}]}]}],"type":"unorderedList"},{"anchor":"High-priority","type":"heading","text":"High priority","level":4},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/133777029","isActive":true},{"text":" ","type":"text"},{"text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to ","type":"text"},{"type":"codeVoice","code":"std::function"},{"text":", and Linux doesn’t really support that.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch slightly, because it currently ","type":"text"},{"code":"#if !__swift__","type":"codeVoice"},{"text":"’s out some ","type":"text"},{"code":"static_assert","type":"codeVoice"},{"text":"’s that Swift erroneously triggers","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/150456875","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would require simplifying the patch slightly","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/148534260"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch a small amount. Requires ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118"},{"text":" as well to simplify.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would simplify code generation without needing to make a typedef for the nested type","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would simplify code generation and satisfying protocol requirements in C++","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would make organizing import-as-member easier and avoid polluting the global namespace","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Write a non-friend function that calls the friend, and call the non-friend from Swift","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Limits the ability to do import-as-member replacements","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Without Swift-Cxx interop enabled, you get ","type":"text"},{"type":"codeVoice","code":"Error: Cannot load underlying module for 'CxxStdlib'"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Medium-priority","type":"heading","text":"Medium priority","level":4},{"items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"text":" Don’t conform to protocols","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"type":"text","text":" Use "},{"type":"codeVoice","code":"Availability: nonswift"},{"type":"text","text":", then import-as-member on new stubs that call the unavailable methods"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/149496877"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"rdar:\/\/153678715","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/121886233"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can’t use "},{"type":"codeVoice","code":"pxr.VtArray<pxr.GfVec3f>"},{"type":"text","text":" or "},{"type":"codeVoice","code":"std.set<std.string>"},{"type":"text","text":" in Swift. Workaround of using a C++ typedef works but is annoying"}]}]}],"type":"unorderedList"},{"anchor":"Low-priority","type":"heading","text":"Low priority","level":4},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" not imported","type":"text"}],"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/138359065"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames."}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy to wrap function in Swift Package"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/132742486","isActive":true,"type":"reference"},{"text":")","type":"text"},{"text":"\n","type":"text"},{"text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"}]},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"This could enable me to use API notes to succinctly conform all specializations of "},{"type":"codeVoice","code":"pxr::VtArray<T>"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Can be replaced with a "},{"code":"Bool.init(UsdGeomSphere)","type":"codeVoice"},{"type":"text","text":" supplied by this repo, which is also more ergonomic"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","overridingTitleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types"}]},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would be helpful for SwiftUsd in a few niche places.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Easy workaround","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"rdar:\/\/138118008","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/137880350"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"rdar:\/\/137879510","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be worked around by calling ","type":"text"},{"code":"__convertToBool()","type":"codeVoice"},{"text":". I can probably put ","type":"text"},{"code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}","type":"codeVoice"},{"text":" in the Swift Package, or add an initializer on ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround in C++, but annoying to have to use everywhere."},{"type":"text","text":"\n"},{"type":"text","text":"I can improve the workaround by using "},{"type":"codeVoice","code":"SWIFT_NAME"},{"type":"text","text":" on the base class’s declaration of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":" to hide that method from Swift, then extend each subclass to add a Swift method named "},{"type":"codeVoice","code":"GetPrim()"},{"type":"text","text":" that calls a C++ helper method that calls the base class’s definition of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}]}]}]}]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Learn about the current limitations of OpenUSD in Swift"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials","title":"Essentials"}],"identifier":{"url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations","interfaceLanguage":"swift"},"references":{"rdar://138359065":{"url":"rdar:\/\/138359065","type":"link","identifier":"rdar:\/\/138359065","title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)","titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}]},"doc://SwiftUsd/documentation/OpenUSD":{"kind":"symbol","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD","title":"OpenUSD","type":"topic","url":"\/documentation\/openusd","abstract":[],"role":"collection"},"https://github.com/swiftlang/swift/pull/82485":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485"},"rdar://133777029":{"url":"rdar:\/\/133777029","type":"link","identifier":"rdar:\/\/133777029","title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)","titleInlineContent":[{"type":"text","text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}]},"https://github.com/swiftlang/swift/pull/81709":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709"},"https://github.com/swiftlang/swift/issues/83144":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}]},"rdar://137879510":{"title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","type":"link","titleInlineContent":[{"text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","type":"text"}],"identifier":"rdar:\/\/137879510","url":"rdar:\/\/137879510"},"https://github.com/swiftlang/swift/issues/83155":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift"}]},"https://openusd.org/release/api/index.html":{"title":"C++ API documentation","type":"link","titleInlineContent":[{"text":"C++ API documentation","type":"text"}],"identifier":"https:\/\/openusd.org\/release\/api\/index.html","url":"https:\/\/openusd.org\/release\/api\/index.html"},"https://github.com/swiftlang/swift/issues/83081":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}]},"https://github.com/swiftlang/swift/issues/83154":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154"},"https://github.com/swiftlang/swift/pull/82496":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}]},"https://github.com/swiftlang/swift/issues/83080":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080"},"https://github.com/swiftlang/swift/issues/83115":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)"}]},"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","type":"topic","url":"\/documentation\/swiftusd\/capabilities","abstract":[{"type":"text","text":"Learn about the current capabilities of OpenUSD in Swift"}],"kind":"article","title":"Capabilities","role":"article"},"https://github.com/swiftlang/swift/pull/82161":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161"},"https://github.com/swiftlang/swift/issues/83146":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}]},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"role":"article","title":"Differences in Swift","url":"\/documentation\/swiftusd\/differencesinswift","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift","abstract":[{"text":"Learn how the OpenUSD API is different in Swift","type":"text"}],"type":"topic","kind":"article"},"https://github.com/swiftlang/swift/issues/83114":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114"},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"abstract":[{"type":"text","text":"Dereferences a "},{"type":"codeVoice","code":"pxr::TfRefPtr<T>"},{"type":"text","text":". Crashes if the pointer is null"}],"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","kind":"symbol","title":"Dereference(_:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dereference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa","text":"_TfRefBaseType","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz"},"https://github.com/swiftlang/swift/issues/83152":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}]},"rdar://137880350":{"title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler","type":"link","titleInlineContent":[{"text":"rdar:\/\/137880350: ","type":"text"},{"code":"pxr.UsdGeomTokens","type":"codeVoice"},{"text":" crashes Swift compiler","type":"text"}],"identifier":"rdar:\/\/137880350","url":"rdar:\/\/137880350"},"https://github.com/swiftlang/swift/issues/83149":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities"}]},"https://github.com/swiftlang/swift/issues/83148":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},"https://github.com/swiftlang/swift/issues/83077":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}]},"https://github.com/swiftlang/swift/issues/83117":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117"},"rdar://150456875":{"url":"rdar:\/\/150456875","type":"link","identifier":"rdar:\/\/150456875","title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","titleInlineContent":[{"type":"text","text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)"}]},"https://github.com/swiftlang/swift/issues/62127":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"},"rdar://149496877":{"url":"rdar:\/\/149496877","type":"link","identifier":"rdar:\/\/149496877","title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence","titleInlineContent":[{"type":"text","text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"}]},"https://github.com/swiftlang/swift/issues/83078":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"abstract":[{"text":"Adding SwiftUsd to your project or package","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","url":"\/documentation\/swiftusd\/gettingstarted","title":"Getting Started with OpenUSD","type":"topic"},"https://github.com/swiftlang/swift/pull/82579":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"}]},"https://github.com/swiftlang/swift/pull/82333":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333"},"https://github.com/swiftlang/swift/issues/83153":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}]},"rdar://153678715":{"title":"rdar:\/\/153678715: std::vector should conform to Codable when T does","type":"link","titleInlineContent":[{"text":"rdar:\/\/153678715: std::vector","type":"text"},{"text":" should conform to Codable when T does","type":"text"}],"identifier":"rdar:\/\/153678715","url":"rdar:\/\/153678715"},"rdar://138118008":{"url":"rdar:\/\/138118008","type":"link","identifier":"rdar:\/\/138118008","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)","titleInlineContent":[{"type":"text","text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)"}]},"https://github.com/swiftlang/swift/issues/83118":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118"},"https://github.com/swiftlang/swift/pull/82566":{"url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"}]},"rdar://132742486":{"title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI","type":"link","titleInlineContent":[{"text":"rdar:\/\/132742486: Function returning C++ type in namespace is ","type":"text"},{"code":"inaccessible due to '@_spi'","type":"codeVoice"},{"text":" when it isn’t marked SPI","type":"text"}],"identifier":"rdar:\/\/132742486","url":"rdar:\/\/132742486"},"rdar://121886233":{"url":"rdar:\/\/121886233","type":"link","identifier":"rdar:\/\/121886233","title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax","titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}]},"https://github.com/swiftlang/swift/issues/83079":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079"},"https://github.com/swiftlang/swift/issues/83151":{"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","type":"link","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}]},"https://github.com/swiftlang/swift/issues/83085":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","type":"link","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","type":"text"}],"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085"},"rdar://148534260":{"url":"rdar:\/\/148534260","type":"link","identifier":"rdar:\/\/148534260","title":"rdar:\/\/148534260: API notes should support annotating C++ operators","titleInlineContent":[{"type":"text","text":"rdar:\/\/148534260: API notes should support annotating C++ operators"}]}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"op":"replace","path":"\/identifier\/interfaceLanguage","value":"occ"},{"op":"add","path":"\/topicSections","value":null},{"op":"replace","path":"\/seeAlsoSections","value":[{"title":"Essentials","identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials","generated":true}]}]}]}