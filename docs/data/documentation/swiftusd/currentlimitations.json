{"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"generated":true,"title":"Essentials","anchor":"Essentials"}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/CurrentLimitations"},"metadata":{"roleHeading":"Article","modules":[{"name":"OpenUSD"}],"title":"Current Limitations","role":"article"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Learn about the current limitations of OpenUSD in Swift","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SwiftUsd\/documentation\/OpenUSD"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"OpenUSD in Swift is currently evolving and may change in the future. Here are some current limitations:"}],"type":"paragraph"},{"anchor":"Issues","type":"heading","text":"Issues","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift compiler crashes","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"text":" Prefer making incremental changes and recompile often to making large changes and recompiling infrequently","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"TfRefPtr.pointee","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"TfWeakPtr.pointee","type":"codeVoice"},{"text":" are unavailable","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Never use ","type":"text"},{"code":".pointee","type":"codeVoice"},{"text":", always use ","type":"text"},{"overridingTitle":"Overlay.Dereference(_:)","type":"reference","identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","overridingTitleInlineContent":[{"code":"Overlay.Dereference(_:)","type":"codeVoice"}],"isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Nested ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":"s are not always imported (","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"reference"},{"text":")","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Use ","type":"text"},{"code":"Overlay.nested.enum","type":"codeVoice"},{"text":" instead of ","type":"text"},{"code":"pxr.nested.enum","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Autocomplete is slow to index"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Refer to the "},{"type":"reference","identifier":"https:\/\/openusd.org\/release\/api\/index.html","isActive":true},{"type":"text","text":" "},{"type":"text","text":"I need to investigate "},{"type":"codeVoice","code":"requires cplusplus"},{"type":"text","text":" in the modulemap again."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"UsdStage"},{"text":" cannot be passed to function expecting ","type":"text"},{"type":"codeVoice","code":"TfWeakPtr<UsdStage>"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"text":"Workaround","type":"text"}]},{"text":": Manually construct and pass ","type":"text"},{"type":"codeVoice","code":"Overlay.TfWeakPtr(stage)"},{"text":" instead","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"pxr.UsdGeomSphere.GetPrim()","type":"codeVoice"},{"type":"text","text":" is ambiguous when it shouldn’t be (https:\/\/github.com\/swiftlang\/swift\/pull\/81709)"},{"type":"text","text":" "},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"type":"text","text":" Use "},{"code":"Overlay.GetPrim(_ s: UsdGeomSphere)","type":"codeVoice"},{"type":"text","text":" instead"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Some OpenUSD types are not imported","type":"text"},{"text":"\n","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Workaround:"}]},{"text":" Write C++ code that wraps types you need to use from Swift. See ","type":"text"},{"code":"source\/Wrappers","type":"codeVoice"},{"text":" for examples.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Some OpenUSD free friend functions (e.g. arithmetic for linear algebra) are not imported"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"Workaround:","type":"text"}],"type":"strong"},{"type":"text","text":" Write your own free function"}]}]}]},{"anchor":"Highest-priority","type":"heading","text":"Highest priority","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"strong","inlineContent":[{"text":"Workaround:","type":"text"}]},{"type":"text","text":" Pass default arguments explicitly when calling C++ functions"}]}]}]},{"anchor":"High-priority","type":"heading","text":"High priority","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"rdar:\/\/133777029"},{"text":" ","type":"text"},{"text":"Impacts Linux, because TfNotice support has to use Objective-C blocks to convert thick Swift closures to ","type":"text"},{"type":"codeVoice","code":"std::function"},{"text":", and Linux doesn’t really support that.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Hard to predict when it will occur, and annoying to workaround. (Making the return type void and adding an out-param usually works)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would allow simplifying the patch slightly, because it currently ","type":"text"},{"code":"#if !__swift__","type":"codeVoice"},{"text":"’s out some ","type":"text"},{"code":"static_assert","type":"codeVoice"},{"text":"’s that Swift erroneously triggers","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/150456875"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would require simplifying the patch slightly"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/148534260","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would allow simplifying the patch a small amount. Requires "},{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","isActive":true},{"type":"text","text":" as well to simplify."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would simplify code generation without needing to make a typedef for the nested type"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would simplify code generation and satisfying protocol requirements in C++","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Would make organizing import-as-member easier and avoid polluting the global namespace"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085"},{"type":"text","text":""},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"type":"text","text":" Write a non-friend function that calls the friend, and call the non-friend from Swift"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Without Swift-Cxx interop enabled, you get ","type":"text"},{"code":"Error: Cannot load underlying module for 'CxxStdlib'","type":"codeVoice"}]}]}]},{"level":4,"text":"Medium priority","anchor":"Medium-priority","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Don’t conform to protocols","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"Workaround:"}],"type":"strong"},{"text":" Use ","type":"text"},{"type":"codeVoice","code":"Availability: nonswift"},{"text":", then import-as-member on new stubs that call the unavailable methods","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/149496877"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"rdar:\/\/153678715","type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"rdar:\/\/121886233","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can’t use ","type":"text"},{"code":"pxr.VtArray<pxr.GfVec3f>","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"std.set<std.string>","type":"codeVoice"},{"text":" in Swift. Workaround of using a C++ typedef works but is annoying","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":4,"text":"Low priority","anchor":"Low-priority","type":"heading"},{"items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested enum not imported","isActive":true,"overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127: C++ interop: nested ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" not imported","type":"text"}]},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Worked around in Swift Package by automatically wrapping all public enums from Usd, by introspecting the Clang AST."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"rdar:\/\/138359065","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Workaround involves putting a typealias in downstream client projects. Not the worst, but not at all intuitive, especially since it only breaks for typenames.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy to wrap function in Swift Package"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/132742486"},{"text":")","type":"text"},{"text":"\n","type":"text"},{"text":"Doesn’t currently impact OpenUSD because I’m not adding free functions that return Usd types. But if I wanted to add free functions that return Usd types, this would be a blocker.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"text"}],"isActive":true,"type":"reference","overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"This could enable me to use API notes to succinctly conform all specializations of ","type":"text"},{"code":"pxr::VtArray<T>","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ExpressibleByArrayLiteral","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be replaced with a ","type":"text"},{"code":"Bool.init(UsdGeomSphere)","type":"codeVoice"},{"text":" supplied by this repo, which is also more ergonomic","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","overridingTitleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","type":"text"}],"overridingTitle":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported classes aren’t available on imported types","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Would be helpful for SwiftUsd in a few niche places.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/138118008"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Spurious warning that occurs in a few places when building the Swift Package. Seems harmless."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"rdar:\/\/137880350","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"People might try to write this expression in OpenUSD, but I’ve provided wrappers for most of the cases something like this would occur.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"rdar:\/\/137879510"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"text":"Can be worked around by calling ","type":"text"},{"type":"codeVoice","code":"__convertToBool()"},{"text":". I can probably put ","type":"text"},{"type":"codeVoice","code":"extension pxr.SdfValueTypeName: CxxConvertibleToBool {}"},{"text":" in the Swift Package, or add an initializer on ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709"},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Easy workaround in C++, but annoying to have to use everywhere."},{"type":"text","text":"\n"},{"type":"text","text":"I can improve the workaround by using "},{"type":"codeVoice","code":"SWIFT_NAME"},{"type":"text","text":" on the base class’s declaration of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":" to hide that method from Swift, then extend each subclass to add a Swift method named "},{"type":"codeVoice","code":"GetPrim()"},{"type":"text","text":" that calls a C++ helper method that calls the base class’s definition of "},{"type":"codeVoice","code":"GetPrim"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"type":"text","text":"Limits the ability to do import-as-member replacements"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/swiftusd\/currentlimitations"],"traits":[{"interfaceLanguage":"occ"}]}],"sections":[],"references":{"rdar://148534260":{"titleInlineContent":[{"text":"rdar:\/\/148534260: API notes should support annotating C++ operators","type":"text"}],"type":"link","title":"rdar:\/\/148534260: API notes should support annotating C++ operators","identifier":"rdar:\/\/148534260","url":"rdar:\/\/148534260"},"https://github.com/swiftlang/swift/issues/83152":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152: Add support for default arguments in C++ function templates","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83152","type":"link"},"https://github.com/swiftlang/swift/issues/83114":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83114: Inherited methods from non-imported C++ types aren’t available on imported types"}],"type":"link"},"rdar://138118008":{"type":"link","title":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)","identifier":"rdar:\/\/138118008","titleInlineContent":[{"text":"rdar:\/\/138118008: Spurious “warning: cycle detected while resolving” message (Usd interop)","type":"text"}],"url":"rdar:\/\/138118008"},"https://github.com/swiftlang/swift/issues/83155":{"titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","type":"text"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155: Add support for std::ostream in Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83155"},"https://github.com/swiftlang/swift/pull/82566":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions"}],"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566: [cxx-interop] Test import-as-member for inline functions","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82566","type":"link"},"https://github.com/swiftlang/swift/issues/83081":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83081: Templated C++ function incorrectly imported as returning Void in Swift"}],"type":"link"},"rdar://137879510":{"type":"link","title":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","identifier":"rdar:\/\/137879510","titleInlineContent":[{"text":"rdar:\/\/137879510: SdfValueTypeName does not automatically conform to CxxConvertibleToBool","type":"text"}],"url":"rdar:\/\/137879510"},"rdar://150456875":{"titleInlineContent":[{"text":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","type":"text"}],"type":"link","title":"rdar:\/\/150456875: Forward declaring std::map’s value causes an error for Swift but not C++ (Swift 6.1 regression)","identifier":"rdar:\/\/150456875","url":"rdar:\/\/150456875"},"rdar://138359065":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)"}],"title":"rdar:\/\/138359065: ‘pxr.UsdStage’ is not a member of type ‘__ObjC.pxr’; public typealias not used in typenames, only statements)","identifier":"rdar:\/\/138359065","url":"rdar:\/\/138359065","type":"link"},"rdar://149496877":{"title":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence","url":"rdar:\/\/149496877","identifier":"rdar:\/\/149496877","titleInlineContent":[{"type":"text","text":"rdar:\/\/149496877: std::map, unordered_map should conform to Sequence"}],"type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/GettingStarted":{"url":"\/documentation\/swiftusd\/gettingstarted","title":"Getting Started with OpenUSD","abstract":[{"type":"text","text":"Adding SwiftUsd to your project or package"}],"type":"topic","role":"article","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","kind":"article"},"https://openusd.org/release/api/index.html":{"type":"link","title":"C++ API documentation","identifier":"https:\/\/openusd.org\/release\/api\/index.html","titleInlineContent":[{"type":"text","text":"C++ API documentation"}],"url":"https:\/\/openusd.org\/release\/api\/index.html"},"https://github.com/swiftlang/swift/pull/82485":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82485: [cxx-interop] Allow virtual methods to be renamed with SWIFT_NAME","type":"text"}],"type":"link"},"rdar://133777029":{"titleInlineContent":[{"type":"text","text":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)"}],"type":"link","title":"rdar:\/\/133777029: Cannot create std::function from Swift closures that capture context (thick closures)","identifier":"rdar:\/\/133777029","url":"rdar:\/\/133777029"},"rdar://132742486":{"titleInlineContent":[{"text":"rdar:\/\/132742486: Function returning C++ type in namespace is ","type":"text"},{"code":"inaccessible due to '@_spi'","type":"codeVoice"},{"text":" when it isn’t marked SPI","type":"text"}],"title":"rdar:\/\/132742486: Function returning C++ type in namespace is inaccessible due to '@_spi' when it isn’t marked SPI","identifier":"rdar:\/\/132742486","url":"rdar:\/\/132742486","type":"link"},"https://github.com/swiftlang/swift/issues/83146":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146: Calling free function template with SWIFT_NAME + import-as-member as free function crashes compiler"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83146"},"https://github.com/swiftlang/swift/issues/83118":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83118: API notes should support annotating templated C++ tags","type":"text"}],"type":"link"},"https://github.com/swiftlang/swift/pull/82496":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496: [cxx-interop] Allow import-as-member for types in namespaces","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82496"},"https://github.com/swiftlang/swift/issues/83149":{"titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","type":"text"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149: API Notes doesn’t support renaming function overloads with different arities","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83149","type":"link"},"https://github.com/swiftlang/swift/issues/83077":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077: Linker error when accessing C++ constant static member from Swift"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83077"},"rdar://137880350":{"title":"rdar:\/\/137880350: pxr.UsdGeomTokens crashes Swift compiler","url":"rdar:\/\/137880350","identifier":"rdar:\/\/137880350","titleInlineContent":[{"text":"rdar:\/\/137880350: ","type":"text"},{"code":"pxr.UsdGeomTokens","type":"codeVoice"},{"text":" crashes Swift compiler","type":"text"}],"type":"link"},"https://github.com/swiftlang/swift/pull/82333":{"titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","type":"text"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333: [cxx-interop] Fix duplicate symbol error with default arguments","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82333"},"https://github.com/swiftlang/swift/issues/83151":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr"},{"type":"text","text":"> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151: C++ struct holding std::vector<std::unique_ptr> can’t be used in Swift: get obscure template errors instead of being imported as ~Copyable","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83151","type":"link"},"https://github.com/swiftlang/swift/issues/83117":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83117: Swift Array addition causes unrelated static_assert to fail"}],"type":"link"},"doc://SwiftUsd/documentation/SwiftUsd/Capabilities":{"url":"\/documentation\/swiftusd\/capabilities","abstract":[{"text":"Learn about the current capabilities of OpenUSD in Swift","type":"text"}],"kind":"article","title":"Capabilities","type":"topic","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","role":"article"},"https://github.com/swiftlang/swift/issues/83080":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080: Assigning a non-nil value to a weak SWIFT_SHARED_REFERENCE variable crashes at runtime","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83080"},"https://github.com/swiftlang/swift/issues/83148":{"titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand","type":"text"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148: Adding import CxxStdlib makes diagnostic about not enabling C++ interoperability harder to understand","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83148"},"https://github.com/swiftlang/swift/issues/83153":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153: Add support for importing operator function templates from C++","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83153","type":"link"},"https://github.com/swiftlang/swift/pull/82161":{"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82161: [cxx-interop] Import nullability of templated function parameters correctly"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83115":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115: Conforming C++ enum to Swift protocol causes linker errors (missing destructors for STL types)","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83115"},"https://github.com/swiftlang/swift/pull/81709":{"titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance","type":"text"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709: [cxx-interop] Fix ambiguous methods in long chains of inheritance","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/81709"},"https://github.com/swiftlang/swift/pull/82579":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace"}],"title":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579: [cxx-interop] Allow import-as-member for functions declared within a namespace","identifier":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","url":"https:\/\/github.com\/swiftlang\/swift\/pull\/82579","type":"link"},"doc://SwiftUsd/documentation/OpenUSD":{"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD","type":"topic","url":"\/documentation\/openusd","kind":"symbol","role":"collection","title":"OpenUSD","abstract":[]},"https://github.com/swiftlang/swift/issues/83144":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83144: SWIFT_NAME annotation has no effect on function templates"}],"type":"link"},"rdar://153678715":{"type":"link","title":"rdar:\/\/153678715: std::vector should conform to Codable when T does","identifier":"rdar:\/\/153678715","titleInlineContent":[{"text":"rdar:\/\/153678715: std::vector","type":"text"},{"text":" should conform to Codable when T does","type":"text"}],"url":"rdar:\/\/153678715"},"https://github.com/swiftlang/swift/issues/62127":{"titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","type":"text"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/62127"},"doc://SwiftUsd/documentation/SwiftUsd/DifferencesInSwift":{"url":"\/documentation\/swiftusd\/differencesinswift","kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Learn how the OpenUSD API is different in Swift"}],"title":"Differences in Swift","identifier":"doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"},"doc://SwiftUsd/documentation/OpenUSD/C++/Overlay/Dereference(_:)-67vpz":{"identifier":"doc:\/\/SwiftUsd\/documentation\/OpenUSD\/C++\/Overlay\/Dereference(_:)-67vpz","kind":"symbol","abstract":[{"type":"text","text":"Dereferences a "},{"type":"codeVoice","code":"pxr::TfRefPtr<T>"},{"type":"text","text":". Crashes if the pointer is null"}],"role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"Dereference"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE11Dereferencey14_TfRefBaseTypeQzxAbCE01_eF11PtrProtocolRzlFZ1TL_xmfp","text":"T"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:So7OverlayO7OpenUSDE17_TfRefPtrProtocolP01_dE8BaseTypeQa","text":"_TfRefBaseType"}],"title":"Dereference(_:)","url":"\/documentation\/openusd\/c++\/overlay\/dereference(_:)-67vpz"},"https://github.com/swiftlang/swift/issues/83154":{"titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift"}],"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154: Add a way to extract elements from std::tuple in Swift","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83154","type":"link"},"rdar://121886233":{"title":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax","url":"rdar:\/\/121886233","identifier":"rdar:\/\/121886233","titleInlineContent":[{"type":"text","text":"rdar:\/\/121886233: Support specializing class templates with concrete types using <> syntax"}],"type":"link"},"https://github.com/swiftlang/swift/issues/83085":{"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085","titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085: Calling friend function of type nested in C++ namespace crashes Swift compiler","type":"text"}],"url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83085"},"https://github.com/swiftlang/swift/issues/83079":{"titleInlineContent":[{"text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","type":"text"}],"type":"link","title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079: Templated overload causes substitution failure in Swift but not in C++ (SFINAE)","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83079"},"https://github.com/swiftlang/swift/issues/83078":{"title":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes","url":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","identifier":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/swiftlang\/swift\/issues\/83078: Calling __convertToBool() from Swift on derived C++ value type crashes"}],"type":"link"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"op":"replace","path":"\/identifier\/interfaceLanguage","value":"occ"},{"op":"add","path":"\/topicSections","value":null},{"op":"replace","path":"\/seeAlsoSections","value":[{"identifiers":["doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/GettingStarted","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/Capabilities","doc:\/\/SwiftUsd\/documentation\/SwiftUsd\/DifferencesInSwift"],"anchor":"Essentials","title":"Essentials","generated":true}]}]}]}