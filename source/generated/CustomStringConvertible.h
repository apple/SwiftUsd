//
//  CustomStringConvertible.h
//  swiftUsd
//
//  Created by Maddy Adams on 4/17/24.
//

// This file was generated by ast-answerer. Do not edit!
#ifndef SWIFTUSD_GENERATED_CUSTOMSTRINGCONVERTIBLE_H
#define SWIFTUSD_GENERATED_CUSTOMSTRINGCONVERTIBLE_H

#include "swiftUsd/defines.h"

#include "pxr/base/arch/fileSystem.h"
#include "pxr/base/arch/virtualMemory.h"
#include "pxr/base/gf/bbox3d.h"
#include "pxr/base/gf/camera.h"
#include "pxr/base/gf/color.h"
#include "pxr/base/gf/dualQuatd.h"
#include "pxr/base/gf/dualQuatf.h"
#include "pxr/base/gf/dualQuath.h"
#include "pxr/base/gf/frustum.h"
#include "pxr/base/gf/ilmbase_half.h"
#include "pxr/base/gf/interval.h"
#include "pxr/base/gf/line.h"
#include "pxr/base/gf/lineSeg.h"
#include "pxr/base/gf/matrix2d.h"
#include "pxr/base/gf/matrix2f.h"
#include "pxr/base/gf/matrix3d.h"
#include "pxr/base/gf/matrix3f.h"
#include "pxr/base/gf/matrix4d.h"
#include "pxr/base/gf/matrix4f.h"
#include "pxr/base/gf/multiInterval.h"
#include "pxr/base/gf/numericCast.h"
#include "pxr/base/gf/plane.h"
#include "pxr/base/gf/quatd.h"
#include "pxr/base/gf/quaternion.h"
#include "pxr/base/gf/quatf.h"
#include "pxr/base/gf/quath.h"
#include "pxr/base/gf/range1d.h"
#include "pxr/base/gf/range1f.h"
#include "pxr/base/gf/range2d.h"
#include "pxr/base/gf/range2f.h"
#include "pxr/base/gf/range3d.h"
#include "pxr/base/gf/range3f.h"
#include "pxr/base/gf/ray.h"
#include "pxr/base/gf/rect2i.h"
#include "pxr/base/gf/rotation.h"
#include "pxr/base/gf/size2.h"
#include "pxr/base/gf/size3.h"
#include "pxr/base/gf/transform.h"
#include "pxr/base/gf/vec2d.h"
#include "pxr/base/gf/vec2f.h"
#include "pxr/base/gf/vec2h.h"
#include "pxr/base/gf/vec2i.h"
#include "pxr/base/gf/vec3d.h"
#include "pxr/base/gf/vec3f.h"
#include "pxr/base/gf/vec3h.h"
#include "pxr/base/gf/vec3i.h"
#include "pxr/base/gf/vec4d.h"
#include "pxr/base/gf/vec4f.h"
#include "pxr/base/gf/vec4h.h"
#include "pxr/base/gf/vec4i.h"
#include "pxr/base/js/value.h"
#include "pxr/base/tf/anyWeakPtr.h"
#include "pxr/base/tf/bits.h"
#include "pxr/base/tf/compressedBits.h"
#include "pxr/base/tf/diagnosticLite.h"
#include "pxr/base/tf/enum.h"
#include "pxr/base/tf/mallocTag.h"
#include "pxr/base/tf/notice.h"
#include "pxr/base/tf/refPtrTracker.h"
#include "pxr/base/tf/stopwatch.h"
#include "pxr/base/tf/token.h"
#include "pxr/base/tf/type.h"
#include "pxr/base/trace/event.h"
#include "pxr/base/ts/knot.h"
#include "pxr/base/ts/regressionPreventer.h"
#include "pxr/base/ts/spline.h"
#include "pxr/base/ts/types.h"
#include "pxr/base/vt/array.h"
#include "pxr/base/vt/dictionary.h"
#include "pxr/base/vt/types.h"
#include "pxr/base/vt/value.h"
#include "pxr/exec/ef/time.h"
#include "pxr/exec/ef/timeInterval.h"
#include "pxr/exec/exec/providerResolution.h"
#include "pxr/exec/vdf/dataManagerVector.h"
#include "pxr/exec/vdf/executionStats.h"
#include "pxr/exec/vdf/grapherOptions.h"
#include "pxr/exec/vdf/indexedData.h"
#include "pxr/exec/vdf/indexedWeights.h"
#include "pxr/exec/vdf/indexedWeightsOperand.h"
#include "pxr/exec/vdf/inputSpec.h"
#include "pxr/exec/vdf/mask.h"
#include "pxr/exec/vdf/maskedIterator.h"
#include "pxr/exec/vdf/object.h"
#include "pxr/exec/vdf/sparseInputTraverser.h"
#include "pxr/exec/vdf/sparseVectorizedInputTraverser.h"
#include "pxr/exec/vdf/vector.h"
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/imaging/cameraUtil/conformWindow.h"
#include "pxr/imaging/garch/glDebugWindow.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && defined(ARCH_OS_DARWIN)
#include "pxr/imaging/garch/glPlatformContextDarwin.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && defined(ARCH_OS_DARWIN)
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/imaging/glf/simpleLight.h"
#include "pxr/imaging/hd/aov.h"
#include "pxr/imaging/hd/basisCurvesTopology.h"
#include "pxr/imaging/hd/bufferArray.h"
#include "pxr/imaging/hd/camera.h"
#include "pxr/imaging/hd/collectionExpressionEvaluator.h"
#include "pxr/imaging/hd/coordSys.h"
#include "pxr/imaging/hd/dataSourceLocator.h"
#include "pxr/imaging/hd/enums.h"
#include "pxr/imaging/hd/field.h"
#include "pxr/imaging/hd/geomSubset.h"
#include "pxr/imaging/hd/light.h"
#include "pxr/imaging/hd/material.h"
#include "pxr/imaging/hd/primOriginSchema.h"
#include "pxr/imaging/hd/renderBuffer.h"
#include "pxr/imaging/hd/renderPassState.h"
#include "pxr/imaging/hd/repr.h"
#include "pxr/imaging/hd/rprimCollection.h"
#include "pxr/imaging/hd/sceneIndexPluginRegistry.h"
#include "pxr/imaging/hd/topology.h"
#include "pxr/imaging/hd/types.h"
#include "pxr/imaging/hdGp/generativeProcedural.h"
#include "pxr/imaging/hdSt/binding.h"
#include "pxr/imaging/hdSt/enums.h"
#include "pxr/imaging/hdSt/resourceRegistry.h"
#include "pxr/imaging/hdsi/legacyDisplayStyleOverrideSceneIndex.h"
#include "pxr/imaging/hdx/aovInputTask.h"
#include "pxr/imaging/hdx/boundingBoxTask.h"
#include "pxr/imaging/hdx/colorChannelTask.h"
#include "pxr/imaging/hdx/colorCorrectionTask.h"
#include "pxr/imaging/hdx/colorizeSelectionTask.h"
#include "pxr/imaging/hdx/drawTargetTask.h"
#include "pxr/imaging/hdx/oitResolveTask.h"
#include "pxr/imaging/hdx/pickFromRenderBufferTask.h"
#include "pxr/imaging/hdx/pickTask.h"
#include "pxr/imaging/hdx/presentTask.h"
#include "pxr/imaging/hdx/renderSetupTask.h"
#include "pxr/imaging/hdx/selectionTask.h"
#include "pxr/imaging/hdx/shadowTask.h"
#include "pxr/imaging/hdx/simpleLightTask.h"
#include "pxr/imaging/hdx/types.h"
#include "pxr/imaging/hdx/visualizeAovTask.h"
#include "pxr/imaging/hgi/attachmentDesc.h"
#include "pxr/imaging/hgi/enums.h"
#include "pxr/imaging/hgi/graphicsCmdsDesc.h"
#include "pxr/imaging/hgi/graphicsPipeline.h"
#include "pxr/imaging/hgi/shaderFunctionDesc.h"
#include "pxr/imaging/hgi/types.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && __has_include(<Metal/Metal.h>)
#include "pxr/imaging/hgiMetal/resourceBindings.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && __has_include(<Metal/Metal.h>)
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/imaging/hio/glslfxConfig.h"
#include "pxr/imaging/hio/glslfxResourceLayout.h"
#include "pxr/imaging/hio/types.h"
#include "pxr/imaging/pxOsd/meshTopology.h"
#include "pxr/imaging/pxOsd/meshTopologyValidation.h"
#include "pxr/imaging/pxOsd/subdivTags.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/usd/pcp/changes.h"
#include "pxr/usd/pcp/dependency.h"
#include "pxr/usd/pcp/errors.h"
#include "pxr/usd/pcp/layerStack.h"
#include "pxr/usd/pcp/layerStackIdentifier.h"
#include "pxr/usd/pcp/namespaceEdits.h"
#include "pxr/usd/pcp/node.h"
#include "pxr/usd/pcp/primIndex.h"
#include "pxr/usd/pcp/site.h"
#include "pxr/usd/pcp/types.h"
#include "pxr/usd/sdf/assetPath.h"
#include "pxr/usd/sdf/attributeSpec.h"
#include "pxr/usd/sdf/changeList.h"
#include "pxr/usd/sdf/layerOffset.h"
#include "pxr/usd/sdf/listOp.h"
#include "pxr/usd/sdf/mapEditProxy.h"
#include "pxr/usd/sdf/namespaceEdit.h"
#include "pxr/usd/sdf/opaqueValue.h"
#include "pxr/usd/sdf/path.h"
#include "pxr/usd/sdf/pathExpression.h"
#include "pxr/usd/sdf/payload.h"
#include "pxr/usd/sdf/predicateExpression.h"
#include "pxr/usd/sdf/predicateLibrary.h"
#include "pxr/usd/sdf/primSpec.h"
#include "pxr/usd/sdf/propertySpec.h"
#include "pxr/usd/sdf/proxyTypes.h"
#include "pxr/usd/sdf/pseudoRootSpec.h"
#include "pxr/usd/sdf/reference.h"
#include "pxr/usd/sdf/relationshipSpec.h"
#include "pxr/usd/sdf/spec.h"
#include "pxr/usd/sdf/timeCode.h"
#include "pxr/usd/sdf/types.h"
#include "pxr/usd/sdf/valueTypeName.h"
#include "pxr/usd/sdf/variantSetSpec.h"
#include "pxr/usd/sdf/variantSpec.h"
#include "pxr/usd/sdr/declare.h"
#include "pxr/usd/usd/attribute.h"
#include "pxr/usd/usd/common.h"
#include "pxr/usd/usd/interpolation.h"
#include "pxr/usd/usd/modelAPI.h"
#include "pxr/usd/usd/notice.h"
#include "pxr/usd/usd/object.h"
#include "pxr/usd/usd/prim.h"
#include "pxr/usd/usd/primCompositionQuery.h"
#include "pxr/usd/usd/property.h"
#include "pxr/usd/usd/relationship.h"
#include "pxr/usd/usd/resolveInfo.h"
#include "pxr/usd/usd/schemaRegistry.h"
#include "pxr/usd/usd/stage.h"
#include "pxr/usd/usd/stageCacheContext.h"
#include "pxr/usd/usd/stageLoadRules.h"
#include "pxr/usd/usd/stagePopulationMask.h"
#include "pxr/usd/usd/timeCode.h"
#include "pxr/usd/usdGeom/pointInstancer.h"
#include "pxr/usd/usdGeom/xformCommonAPI.h"
#include "pxr/usd/usdGeom/xformOp.h"
#include "pxr/usd/usdLux/lightListAPI.h"
#include "pxr/usd/usdLux/listAPI.h"
#include "pxr/usd/usdPhysics/parseDesc.h"
#include "pxr/usd/usdShade/connectableAPIBehavior.h"
#include "pxr/usd/usdShade/types.h"
#include "pxr/usd/usdSkel/bakeSkinning.h"
#include "pxr/usd/usdUtils/registeredVariantSet.h"
#include "pxr/usd/usdUtils/stitch.h"
#include "pxr/usd/usdUtils/timeCodeRange.h"
#if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
#include "pxr/usdImaging/usdImaging/primAdapter.h"
#include "pxr/usdImaging/usdImaging/types.h"
#include "pxr/usdImaging/usdImagingGL/renderParams.h"
#include "pxr/usdImaging/usdImagingGL/rendererSettings.h"
#endif // #if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT

namespace __Overlay {
  std::string to_string(const pxr::ArchMemAdvice& x);
  std::string to_string(const pxr::ArchFileAdvice& x);
  std::string to_string(const pxr::ArchMemoryProtection& x);
  std::string to_string(const pxr::TfAnyWeakPtr& x);
  std::string to_string(const pxr::TfType& x);
  std::string to_string(const pxr::TfType::LegacyFlags& x);
  std::string to_string(const pxr::TfDiagnosticType& x);
  std::string to_string(const pxr::TfBits& x);
  std::string to_string(const pxr::TfBits::Mode& x);
  std::string to_string(const pxr::TfCompressedBits& x);
  std::string to_string(const pxr::TfCompressedBits::Mode& x);
  std::string to_string(const pxr::TfCompressedBits::ComplementTagType& x);
  std::string to_string(const pxr::TfEnum& x);
  std::string to_string(const pxr::TfStopwatch& x);
  std::string to_string(const pxr::TfNotice::Key& x);
  std::string to_string(const pxr::TfMallocTag::CallTree::PrintSetting& x);
  std::string to_string(const pxr::TfRefPtrTracker::TraceType& x);
  std::string to_string(const pxr::TfToken& x);
  std::string to_string(const pxr::GfBBox3d& x);
  std::string to_string(const pxr::GfMatrix4d& x);
  std::string to_string(const pxr::GfVec4d& x);
  std::string to_string(const pxr::GfVec4f& x);
  std::string to_string(const pxr::GfVec4h& x);
  std::string to_string(const pxr::pxr_half::half& x);
  std::string to_string(const pxr::GfVec4i& x);
  std::string to_string(const pxr::GfVec3d& x);
  std::string to_string(const pxr::GfVec3f& x);
  std::string to_string(const pxr::GfVec3h& x);
  std::string to_string(const pxr::GfVec3i& x);
  std::string to_string(const pxr::GfRange3d& x);
  std::string to_string(const pxr::GfRange3f& x);
  std::string to_string(const pxr::GfCamera::Projection& x);
  std::string to_string(const pxr::GfCamera::FOVDirection& x);
  std::string to_string(const pxr::GfRange1f& x);
  std::string to_string(const pxr::GfRange1d& x);
  std::string to_string(const pxr::GfColor& x);
  std::string to_string(const pxr::GfVec2f& x);
  std::string to_string(const pxr::GfVec2d& x);
  std::string to_string(const pxr::GfVec2h& x);
  std::string to_string(const pxr::GfVec2i& x);
  std::string to_string(const pxr::GfMatrix3f& x);
  std::string to_string(const pxr::GfDualQuatd& x);
  std::string to_string(const pxr::GfQuatd& x);
  std::string to_string(const pxr::GfDualQuatf& x);
  std::string to_string(const pxr::GfQuatf& x);
  std::string to_string(const pxr::GfDualQuath& x);
  std::string to_string(const pxr::GfQuath& x);
  std::string to_string(const pxr::GfFrustum& x);
  std::string to_string(const pxr::GfFrustum::ProjectionType& x);
  std::string to_string(const pxr::GfPlane& x);
  std::string to_string(const pxr::GfRay& x);
  std::string to_string(const pxr::GfRange2d& x);
  std::string to_string(const pxr::GfRange2f& x);
  std::string to_string(const pxr::GfRotation& x);
  std::string to_string(const pxr::GfQuaternion& x);
  std::string to_string(const pxr::GfInterval& x);
  std::string to_string(const pxr::GfLine& x);
  std::string to_string(const pxr::GfLineSeg& x);
  std::string to_string(const pxr::GfMatrix2d& x);
  std::string to_string(const pxr::GfMatrix2f& x);
  std::string to_string(const pxr::GfMatrix3d& x);
  std::string to_string(const pxr::GfMatrix4f& x);
  std::string to_string(const pxr::GfMultiInterval& x);
  std::string to_string(const pxr::GfRect2i& x);
  std::string to_string(const pxr::GfSize2& x);
  std::string to_string(const pxr::GfSize3& x);
  std::string to_string(const pxr::GfTransform& x);
  std::string to_string(const pxr::GfNumericCastFailureType& x);
  std::string to_string(const pxr::JsValue::Type& x);
  std::string to_string(const pxr::TraceEvent::BeginTag& x);
  std::string to_string(const pxr::TraceEvent::EndTag& x);
  std::string to_string(const pxr::TraceEvent::TimespanTag& x);
  std::string to_string(const pxr::TraceEvent::MarkerTag& x);
  std::string to_string(const pxr::TraceEvent::CounterDeltaTag& x);
  std::string to_string(const pxr::TraceEvent::CounterValueTag& x);
  std::string to_string(const pxr::TraceEvent::DataTag& x);
  std::string to_string(const pxr::TraceEvent::EventType& x);
  std::string to_string(const pxr::TraceEvent::DataType& x);
  std::string to_string(const pxr::VtDualQuatdArray& x);
  std::string to_string(const pxr::VtDualQuatfArray& x);
  std::string to_string(const pxr::VtDualQuathArray& x);
  std::string to_string(const pxr::VtHalfArray& x);
  std::string to_string(const pxr::VtIntervalArray& x);
  std::string to_string(const pxr::VtMatrix2dArray& x);
  std::string to_string(const pxr::VtMatrix2fArray& x);
  std::string to_string(const pxr::VtMatrix3dArray& x);
  std::string to_string(const pxr::VtMatrix3fArray& x);
  std::string to_string(const pxr::VtMatrix4dArray& x);
  std::string to_string(const pxr::VtMatrix4fArray& x);
  std::string to_string(const pxr::VtQuatdArray& x);
  std::string to_string(const pxr::VtQuaternionArray& x);
  std::string to_string(const pxr::VtQuatfArray& x);
  std::string to_string(const pxr::VtQuathArray& x);
  std::string to_string(const pxr::VtRange1dArray& x);
  std::string to_string(const pxr::VtRange1fArray& x);
  std::string to_string(const pxr::VtRange2dArray& x);
  std::string to_string(const pxr::VtRange2fArray& x);
  std::string to_string(const pxr::VtRange3dArray& x);
  std::string to_string(const pxr::VtRange3fArray& x);
  std::string to_string(const pxr::VtRect2iArray& x);
  std::string to_string(const pxr::VtVec2dArray& x);
  std::string to_string(const pxr::VtVec2fArray& x);
  std::string to_string(const pxr::VtVec2hArray& x);
  std::string to_string(const pxr::VtVec2iArray& x);
  std::string to_string(const pxr::VtVec3dArray& x);
  std::string to_string(const pxr::VtVec3fArray& x);
  std::string to_string(const pxr::VtVec3hArray& x);
  std::string to_string(const pxr::VtVec3iArray& x);
  std::string to_string(const pxr::VtVec4dArray& x);
  std::string to_string(const pxr::VtVec4fArray& x);
  std::string to_string(const pxr::VtVec4hArray& x);
  std::string to_string(const pxr::VtVec4iArray& x);
  std::string to_string(const pxr::VtTokenArray& x);
  std::string to_string(const pxr::VtBoolArray& x);
  std::string to_string(const pxr::VtCharArray& x);
  std::string to_string(const pxr::VtDoubleArray& x);
  std::string to_string(const pxr::VtFloatArray& x);
  std::string to_string(const pxr::VtInt64Array& x);
  std::string to_string(const pxr::VtIntArray& x);
  std::string to_string(const pxr::VtShortArray& x);
  std::string to_string(const pxr::VtStringArray& x);
  std::string to_string(const pxr::VtUInt64Array& x);
  std::string to_string(const pxr::VtUCharArray& x);
  std::string to_string(const pxr::VtUIntArray& x);
  std::string to_string(const pxr::VtUShortArray& x);
  std::string to_string(const pxr::VtDictionary& x);
  std::string to_string(const pxr::VtValue& x);
  std::string to_string(const pxr::UsdMetadataValueMap& x);
  std::string to_string(const pxr::TsSpline& x);
  std::string to_string(const pxr::TsInterpMode& x);
  std::string to_string(const pxr::TsCurveType& x);
  std::string to_string(const pxr::TsExtrapMode& x);
  std::string to_string(const pxr::TsSplineSampleSource& x);
  std::string to_string(const pxr::TsTangentAlgorithm& x);
  std::string to_string(const pxr::TsAntiRegressionMode& x);
  std::string to_string(const pxr::TsKnot& x);
  std::string to_string(const pxr::TsRegressionPreventer::InteractiveMode& x);
  std::string to_string(const pxr::SdfPath& x);
  std::string to_string(const pxr::SdfSpecType& x);
  std::string to_string(const pxr::SdfSpecifier& x);
  std::string to_string(const pxr::SdfPermission& x);
  std::string to_string(const pxr::SdfVariability& x);
  std::string to_string(const pxr::SdfAuthoringError& x);
  std::string to_string(const pxr::SdfAngularUnit& x);
  std::string to_string(const pxr::SdfDimensionlessUnit& x);
  std::string to_string(const pxr::SdfLengthUnit& x);
  std::string to_string(const pxr::SdfUnregisteredValue& x);
  std::string to_string(const pxr::SdfValueBlock& x);
  std::string to_string(const pxr::SdfAnimationBlock& x);
  std::string to_string(const pxr::SdfHumanReadableValue& x);
  std::string to_string(const pxr::SdfAssetPath& x);
  std::string to_string(const pxr::SdfListOpType& x);
  std::string to_string(const pxr::SdfOpaqueValue& x);
  std::string to_string(const pxr::SdfPathExpression& x);
  std::string to_string(const pxr::SdfPathExpression::Op& x);
  std::string to_string(const pxr::SdfPredicateExpression& x);
  std::string to_string(const pxr::SdfPredicateExpression::FnCall::Kind& x);
  std::string to_string(const pxr::SdfPredicateExpression::Op& x);
  std::string to_string(const pxr::SdfTimeCode& x);
  std::string to_string(const pxr::SdfValueTypeName& x);
  std::string to_string(const pxr::SdfAttributeSpec& x);
  std::string to_string(const pxr::SdfAttributeSpecHandle& x);
  std::string to_string(const pxr::SdfPropertySpecHandle& x);
  std::string to_string(const pxr::SdfPropertySpec& x);
  std::string to_string(const pxr::SdfSpecHandle& x);
  std::string to_string(const pxr::SdfSpec& x);
  std::string to_string(const pxr::SdfDictionaryProxy& x);
  std::string to_string(const pxr::SdfRelocatesMapProxy& x);
  std::string to_string(const pxr::SdfChangeList& x);
  std::string to_string(const pxr::SdfChangeList::SubLayerChangeType& x);
  std::string to_string(const pxr::SdfLayerOffset& x);
  std::string to_string(const pxr::SdfNamespaceEdit& x);
  std::string to_string(const pxr::SdfNamespaceEditDetail& x);
  std::string to_string(const pxr::SdfNamespaceEditDetail::Result& x);
  std::string to_string(const pxr::SdfPredicateFunctionResult::Constancy& x);
  std::string to_string(const pxr::SdfPayload& x);
  std::string to_string(const pxr::SdfPrimSpecHandle& x);
  std::string to_string(const pxr::SdfPrimSpec& x);
  std::string to_string(const pxr::SdfPseudoRootSpec& x);
  std::string to_string(const pxr::SdfReference& x);
  std::string to_string(const pxr::SdfRelationshipSpecHandle& x);
  std::string to_string(const pxr::SdfRelationshipSpec& x);
  std::string to_string(const pxr::SdfVariantSetSpecHandle& x);
  std::string to_string(const pxr::SdfVariantSetSpec& x);
  std::string to_string(const pxr::SdfVariantSpecHandle& x);
  std::string to_string(const pxr::SdfVariantSpec& x);
  std::string to_string(const pxr::SdrVersionFilter& x);
  std::string to_string(const pxr::PcpNodeRef& x);
  std::string to_string(const pxr::PcpArcType& x);
  std::string to_string(const pxr::PcpRangeType& x);
  std::string to_string(const pxr::PcpSite& x);
  std::string to_string(const pxr::PcpLayerStackSite& x);
  std::string to_string(const pxr::PcpLayerStackIdentifier& x);
  std::string to_string(const pxr::PcpDependencyType& x);
  std::string to_string(const pxr::PcpErrorType& x);
  std::string to_string(const pxr::PcpErrorInvalidConflictingRelocation::ConflictReason& x);
  std::string to_string(const pxr::PcpPrimIndexOutputs::PayloadState& x);
  std::string to_string(const pxr::PcpCacheChanges::TargetType& x);
  std::string to_string(const pxr::PcpChanges::ChangeSpecsType& x);
  std::string to_string(const pxr::PcpLayerStackRefPtr& x);
  std::string to_string(const pxr::PcpLayerStackPtr& x);
  std::string to_string(const pxr::PcpNamespaceEdits::EditType& x);
  std::string to_string(const pxr::UsdPrim& x);
  std::string to_string(const pxr::UsdListPosition& x);
  std::string to_string(const pxr::UsdLoadPolicy& x);
  std::string to_string(const pxr::UsdSchemaKind& x);
  std::string to_string(const pxr::UsdTimeCode& x);
  std::string to_string(const pxr::UsdObjType& x);
  std::string to_string(const pxr::UsdObject& x);
  std::string to_string(const pxr::UsdSchemaRegistry::VersionPolicy& x);
  std::string to_string(const pxr::UsdStage::InitialLoadSet& x);
  std::string to_string(const pxr::UsdInterpolationType& x);
  std::string to_string(const pxr::UsdStageLoadRules& x);
  std::string to_string(const pxr::UsdStageLoadRules::Rule& x);
  std::string to_string(const pxr::UsdStagePopulationMask& x);
  std::string to_string(const pxr::UsdAttribute& x);
  std::string to_string(const pxr::UsdProperty& x);
  std::string to_string(const pxr::UsdResolveInfoSource& x);
  std::string to_string(const pxr::UsdRelationship& x);
  std::string to_string(const pxr::UsdModelAPI::KindValidation& x);
  std::string to_string(const pxr::UsdNotice::ObjectsChanged::PrimResyncType& x);
  std::string to_string(const pxr::UsdPrimCompositionQuery::ArcTypeFilter& x);
  std::string to_string(const pxr::UsdPrimCompositionQuery::DependencyTypeFilter& x);
  std::string to_string(const pxr::UsdPrimCompositionQuery::ArcIntroducedFilter& x);
  std::string to_string(const pxr::UsdPrimCompositionQuery::HasSpecsFilter& x);
  std::string to_string(const pxr::UsdStageCacheContextBlockType& x);
  std::string to_string(const pxr::UsdGeomXformOp& x);
  std::string to_string(const pxr::UsdGeomXformOp::Type& x);
  std::string to_string(const pxr::UsdGeomXformOp::Precision& x);
  std::string to_string(const pxr::UsdGeomPointInstancer::ProtoXformInclusion& x);
  std::string to_string(const pxr::UsdGeomPointInstancer::MaskApplication& x);
  std::string to_string(const pxr::UsdGeomXformCommonAPI::RotationOrder& x);
  std::string to_string(const pxr::UsdGeomXformCommonAPI::OpFlags& x);
  std::string to_string(const pxr::UsdShadeAttributeType& x);
  std::string to_string(const pxr::UsdShadeConnectionModification& x);
  std::string to_string(const pxr::UsdShadeConnectableAPIBehavior::ConnectableNodeTypes& x);
  std::string to_string(const pxr::UsdLuxLightListAPI::ComputeMode& x);
  std::string to_string(const pxr::UsdLuxListAPI::ComputeMode& x);
  std::string to_string(const pxr::UsdSkelBakeSkinningParms::DeformationFlags& x);
  std::string to_string(const pxr::UsdUtilsRegisteredVariantSet::SelectionExportPolicy& x);
  std::string to_string(const pxr::UsdUtilsStitchValueStatus& x);
  std::string to_string(const pxr::UsdUtilsTimeCodeRange& x);
  std::string to_string(const pxr::UsdPhysicsObjectType& x);
  std::string to_string(const pxr::UsdPhysicsAxis& x);
  std::string to_string(const pxr::UsdPhysicsJointDOF& x);
  std::string to_string(const pxr::VdfInputSpec::Access& x);
  std::string to_string(const pxr::VdfMask& x);
  std::string to_string(const pxr::VdfVector::ConstructBoxedCopyTag& x);
  std::string to_string(const pxr::VdfVector::DebugPrintable& x);
  std::string to_string(const pxr::VdfIndexedWeights& x);
  std::string to_string(const pxr::VdfExecutionStats::EventType& x);
  std::string to_string(const pxr::VdfMaskedIteratorMode& x);
  std::string to_string(const pxr::VdfDataManagerDeallocationMode& x);
  std::string to_string(const pxr::VdfGrapherOptions::DisplayStyle& x);
  std::string to_string(const pxr::VdfObjectPtr& x);
  std::string to_string(const pxr::VdfObjectPtr::Type& x);
  std::string to_string(const pxr::VdfIndexedWeightsOperand::SetOperation& x);
  std::string to_string(const pxr::VdfSparseInputTraverser::CallbackMode& x);
  std::string to_string(const pxr::VdfSparseVectorizedInputTraverser::CallbackMode& x);
  std::string to_string(const pxr::EfTime& x);
  std::string to_string(const pxr::EfTimeInterval& x);
  std::string to_string(const pxr::ExecProviderResolution::DynamicTraversal& x);
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
  std::string to_string(const pxr::GarchGLDebugWindow::Buttons& x);
  std::string to_string(const pxr::GarchGLDebugWindow::ModifierKeys& x);
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && defined(ARCH_OS_DARWIN)
  std::string to_string(const pxr::GarchNSGLContextState::NullState& x);
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && defined(ARCH_OS_DARWIN)
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
  std::string to_string(const pxr::HioFormat& x);
  std::string to_string(const pxr::HioAddressDimension& x);
  std::string to_string(const pxr::HioAddressMode& x);
  std::string to_string(const pxr::HioType& x);
  std::string to_string(const pxr::HioGlslfxConfig::Role& x);
  std::string to_string(const pxr::HioGlslfxResourceLayout::InOut& x);
  std::string to_string(const pxr::HioGlslfxResourceLayout::Kind& x);
  std::string to_string(const pxr::HioGlslfxResourceLayout::TextureType& x);
  std::string to_string(const pxr::CameraUtilConformWindowPolicy& x);
  std::string to_string(const pxr::PxOsdMeshTopology& x);
  std::string to_string(const pxr::PxOsdSubdivTags& x);
  std::string to_string(const pxr::PxOsdMeshTopologyValidation::Code& x);
  std::string to_string(const pxr::GlfSimpleLight& x);
  std::string to_string(const pxr::HgiAttachmentDesc& x);
  std::string to_string(const pxr::HgiDeviceCapabilitiesBits& x);
  std::string to_string(const pxr::HgiTextureType& x);
  std::string to_string(const pxr::HgiTextureUsageBits& x);
  std::string to_string(const pxr::HgiSamplerAddressMode& x);
  std::string to_string(const pxr::HgiSamplerFilter& x);
  std::string to_string(const pxr::HgiMipFilter& x);
  std::string to_string(const pxr::HgiBorderColor& x);
  std::string to_string(const pxr::HgiSampleCount& x);
  std::string to_string(const pxr::HgiAttachmentLoadOp& x);
  std::string to_string(const pxr::HgiAttachmentStoreOp& x);
  std::string to_string(const pxr::HgiBufferUsageBits& x);
  std::string to_string(const pxr::HgiShaderStageBits& x);
  std::string to_string(const pxr::HgiBindResourceType& x);
  std::string to_string(const pxr::HgiPolygonMode& x);
  std::string to_string(const pxr::HgiCullMode& x);
  std::string to_string(const pxr::HgiWinding& x);
  std::string to_string(const pxr::HgiBlendOp& x);
  std::string to_string(const pxr::HgiBlendFactor& x);
  std::string to_string(const pxr::HgiColorMaskBits& x);
  std::string to_string(const pxr::HgiCompareFunction& x);
  std::string to_string(const pxr::HgiStencilOp& x);
  std::string to_string(const pxr::HgiComponentSwizzle& x);
  std::string to_string(const pxr::HgiPrimitiveType& x);
  std::string to_string(const pxr::HgiVertexBufferStepFunction& x);
  std::string to_string(const pxr::HgiSubmitWaitType& x);
  std::string to_string(const pxr::HgiMemoryBarrierBits& x);
  std::string to_string(const pxr::HgiBindingType& x);
  std::string to_string(const pxr::HgiInterpolationType& x);
  std::string to_string(const pxr::HgiSamplingType& x);
  std::string to_string(const pxr::HgiStorageType& x);
  std::string to_string(const pxr::HgiShaderTextureType& x);
  std::string to_string(const pxr::HgiComputeDispatch& x);
  std::string to_string(const pxr::HgiFormat& x);
  std::string to_string(const pxr::HgiShaderFunctionTessellationDesc::PatchType& x);
  std::string to_string(const pxr::HgiShaderFunctionTessellationDesc::Spacing& x);
  std::string to_string(const pxr::HgiShaderFunctionTessellationDesc::Ordering& x);
  std::string to_string(const pxr::HgiShaderFunctionGeometryDesc::InPrimitiveType& x);
  std::string to_string(const pxr::HgiShaderFunctionGeometryDesc::OutPrimitiveType& x);
  std::string to_string(const pxr::HgiGraphicsCmdsDesc& x);
  std::string to_string(const pxr::HgiTessellationState::PatchType& x);
  std::string to_string(const pxr::HgiTessellationState::TessFactorMode& x);
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && __has_include(<Metal/Metal.h>)
  std::string to_string(const pxr::HgiMetalArgumentIndex& x);
  std::string to_string(const pxr::HgiMetalArgumentOffset& x);
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && __has_include(<Metal/Metal.h>)
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
  std::string to_string(const pxr::HdRenderPassAovBinding& x);
  std::string to_string(const pxr::HdWrap& x);
  std::string to_string(const pxr::HdMinFilter& x);
  std::string to_string(const pxr::HdMagFilter& x);
  std::string to_string(const pxr::HdBorderColor& x);
  std::string to_string(const pxr::HdType& x);
  std::string to_string(const pxr::HdFormat& x);
  std::string to_string(const pxr::HdCompareFunction& x);
  std::string to_string(const pxr::HdStencilOp& x);
  std::string to_string(const pxr::HdBlendOp& x);
  std::string to_string(const pxr::HdBlendFactor& x);
  std::string to_string(const pxr::HdCullStyle& x);
  std::string to_string(const pxr::HdPolygonMode& x);
  std::string to_string(const pxr::HdMeshGeomStyle& x);
  std::string to_string(const pxr::HdBasisCurvesGeomStyle& x);
  std::string to_string(const pxr::HdPointsGeomStyle& x);
  std::string to_string(const pxr::HdInterpolation& x);
  std::string to_string(const pxr::HdDepthPriority& x);
  std::string to_string(const pxr::HdBufferArrayUsageHintBits& x);
  std::string to_string(const pxr::HdReprSelector& x);
  std::string to_string(const pxr::HdBasisCurvesTopology& x);
  std::string to_string(const pxr::HdTopology& x);
  std::string to_string(const pxr::HdGeomSubset::Type& x);
  std::string to_string(const pxr::HdRprimCollection& x);
  std::string to_string(const pxr::HdDataSourceLocator& x);
  std::string to_string(const pxr::HdDataSourceLocatorSet& x);
  std::string to_string(const pxr::HdCamera::DirtyBits& x);
  std::string to_string(const pxr::HdCamera::Projection& x);
  std::string to_string(const pxr::HdCollectionExpressionEvaluator::MatchKind& x);
  std::string to_string(const pxr::HdCoordSys::DirtyBits& x);
  std::string to_string(const pxr::HdField::DirtyBits& x);
  std::string to_string(const pxr::HdMaterialNetwork& x);
  std::string to_string(const pxr::HdMaterialNetworkMap& x);
  std::string to_string(const pxr::HdMaterialNode2& x);
  std::string to_string(const pxr::HdLight::DirtyBits& x);
  std::string to_string(const pxr::HdPrimOriginSchema::OriginPath& x);
  std::string to_string(const pxr::HdRenderBuffer::DirtyBits& x);
  std::string to_string(const pxr::HdRenderPassState::ColorMask& x);
  std::string to_string(const pxr::HdSceneIndexPluginRegistry::InsertionOrder& x);
  std::string to_string(const pxr::HdGpGenerativeProcedural::AsyncState& x);
  std::string to_string(const pxr::HdsiLegacyDisplayStyleOverrideSceneIndex::OptionalInt& x);
  std::string to_string(const pxr::HdStBinding::Type& x);
  std::string to_string(const pxr::HdStBinding::Location& x);
  std::string to_string(const pxr::HdStTextureType& x);
  std::string to_string(const pxr::HdStComputeQueue& x);
  std::string to_string(const pxr::HdxAovInputTaskParams& x);
  std::string to_string(const pxr::HdxBoundingBoxTaskParams& x);
  std::string to_string(const pxr::HdxColorizeSelectionTaskParams& x);
  std::string to_string(const pxr::HdxColorChannelTaskParams& x);
  std::string to_string(const pxr::HdxColorCorrectionTaskParams& x);
  std::string to_string(const pxr::HdxDrawTargetTaskParams& x);
  std::string to_string(const pxr::HdxRenderTaskParams& x);
  std::string to_string(const pxr::HdxOitResolveTaskParams& x);
  std::string to_string(const pxr::HdxPickTaskParams& x);
  std::string to_string(const pxr::HdxPickHit& x);
  std::string to_string(const pxr::HdxPickTaskContextParams& x);
  std::string to_string(const pxr::HdxPickFromRenderBufferTaskParams& x);
  std::string to_string(const pxr::HdxPresentTaskParams& x);
  std::string to_string(const pxr::HdxSelectionTaskParams& x);
  std::string to_string(const pxr::HdxShadowTaskParams& x);
  std::string to_string(const pxr::HdxSimpleLightTaskParams& x);
  std::string to_string(const pxr::HdxShadowParams& x);
  std::string to_string(const pxr::HdxShaderInputs& x);
  std::string to_string(const pxr::HdxVisualizeAovTaskParams& x);
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
  std::string to_string(const pxr::UsdImagingPropertyInvalidationType& x);
  std::string to_string(const pxr::UsdImagingPrimAdapter::PopulationMode& x);
  std::string to_string(const pxr::UsdImagingGLDrawMode& x);
  std::string to_string(const pxr::UsdImagingGLCullStyle& x);
  std::string to_string(const pxr::UsdImagingGLRendererSetting::Type& x);
#endif // #if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
}
#endif /* SWIFTUSD_GENERATED_CUSTOMSTRINGCONVERTIBLE_H */
