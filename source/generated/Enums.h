//
//  Enums.h
//  swiftUsd
//
//  Created by Maddy Adams on 4/17/24.
//

// This file was generated by ast-answerer. Do not edit!
#ifndef SWIFTUSD_GENERATED_ENUMS_H
#define SWIFTUSD_GENERATED_ENUMS_H

#include "swiftUsd/defines.h"

#include "pxr/base/arch/fileSystem.h"
#include "pxr/base/arch/virtualMemory.h"
#include "pxr/base/gf/camera.h"
#include "pxr/base/gf/frustum.h"
#include "pxr/base/gf/numericCast.h"
#include "pxr/base/js/value.h"
#include "pxr/base/tf/bits.h"
#include "pxr/base/tf/compressedBits.h"
#include "pxr/base/tf/diagnosticLite.h"
#include "pxr/base/tf/mallocTag.h"
#include "pxr/base/tf/refPtrTracker.h"
#include "pxr/base/tf/type.h"
#include "pxr/base/trace/event.h"
#include "pxr/base/ts/regressionPreventer.h"
#include "pxr/base/ts/types.h"
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/imaging/cameraUtil/conformWindow.h"
#include "pxr/imaging/garch/glDebugWindow.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && defined(ARCH_OS_DARWIN)
#include "pxr/imaging/garch/glPlatformContextDarwin.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && defined(ARCH_OS_DARWIN)
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/imaging/hd/bufferArray.h"
#include "pxr/imaging/hd/camera.h"
#include "pxr/imaging/hd/collectionExpressionEvaluator.h"
#include "pxr/imaging/hd/coordSys.h"
#include "pxr/imaging/hd/enums.h"
#include "pxr/imaging/hd/field.h"
#include "pxr/imaging/hd/geomSubset.h"
#include "pxr/imaging/hd/light.h"
#include "pxr/imaging/hd/renderBuffer.h"
#include "pxr/imaging/hd/renderPassState.h"
#include "pxr/imaging/hd/sceneIndexPluginRegistry.h"
#include "pxr/imaging/hd/selection.h"
#include "pxr/imaging/hd/types.h"
#include "pxr/imaging/hdGp/generativeProcedural.h"
#include "pxr/imaging/hdSt/binding.h"
#include "pxr/imaging/hdSt/enums.h"
#include "pxr/imaging/hdSt/resourceRegistry.h"
#include "pxr/imaging/hgi/enums.h"
#include "pxr/imaging/hgi/graphicsPipeline.h"
#include "pxr/imaging/hgi/shaderFunctionDesc.h"
#include "pxr/imaging/hgi/types.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && __has_include(<Metal/Metal.h>)
#include "pxr/imaging/hgiMetal/resourceBindings.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && __has_include(<Metal/Metal.h>)
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/imaging/hio/glslfxConfig.h"
#include "pxr/imaging/hio/glslfxResourceLayout.h"
#include "pxr/imaging/hio/types.h"
#include "pxr/imaging/pxOsd/meshTopologyValidation.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/usd/ndr/declare.h"
#include "pxr/usd/pcp/changes.h"
#include "pxr/usd/pcp/dependency.h"
#include "pxr/usd/pcp/errors.h"
#include "pxr/usd/pcp/namespaceEdits.h"
#include "pxr/usd/pcp/primIndex.h"
#include "pxr/usd/pcp/types.h"
#include "pxr/usd/sdf/changeList.h"
#include "pxr/usd/sdf/listOp.h"
#include "pxr/usd/sdf/namespaceEdit.h"
#include "pxr/usd/sdf/pathExpression.h"
#include "pxr/usd/sdf/predicateExpression.h"
#include "pxr/usd/sdf/predicateLibrary.h"
#include "pxr/usd/sdf/types.h"
#include "pxr/usd/sdr/declare.h"
#include "pxr/usd/usd/common.h"
#include "pxr/usd/usd/interpolation.h"
#include "pxr/usd/usd/modelAPI.h"
#include "pxr/usd/usd/notice.h"
#include "pxr/usd/usd/object.h"
#include "pxr/usd/usd/primCompositionQuery.h"
#include "pxr/usd/usd/resolveInfo.h"
#include "pxr/usd/usd/schemaRegistry.h"
#include "pxr/usd/usd/stage.h"
#include "pxr/usd/usd/stageCacheContext.h"
#include "pxr/usd/usd/stageLoadRules.h"
#include "pxr/usd/usdGeom/pointInstancer.h"
#include "pxr/usd/usdGeom/xformCommonAPI.h"
#include "pxr/usd/usdGeom/xformOp.h"
#include "pxr/usd/usdLux/lightListAPI.h"
#include "pxr/usd/usdLux/listAPI.h"
#include "pxr/usd/usdPhysics/parseDesc.h"
#include "pxr/usd/usdShade/connectableAPIBehavior.h"
#include "pxr/usd/usdShade/types.h"
#include "pxr/usd/usdSkel/bakeSkinning.h"
#include "pxr/usd/usdUtils/registeredVariantSet.h"
#include "pxr/usd/usdUtils/stitch.h"
#if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
#include "pxr/usdImaging/usdImaging/primAdapter.h"
#include "pxr/usdImaging/usdImaging/types.h"
#include "pxr/usdImaging/usdImagingGL/renderParams.h"
#include "pxr/usdImaging/usdImagingGL/rendererSettings.h"
#endif // #if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT

namespace Overlay {
  extern const pxr::ArchMemAdvice ArchMemAdviceNormal;
  extern const pxr::ArchMemAdvice ArchMemAdviceWillNeed;
  extern const pxr::ArchMemAdvice ArchMemAdviceDontNeed;
  extern const pxr::ArchMemAdvice ArchMemAdviceRandomAccess;
}
namespace Overlay {
  extern const pxr::ArchFileAdvice ArchFileAdviceNormal;
  extern const pxr::ArchFileAdvice ArchFileAdviceWillNeed;
  extern const pxr::ArchFileAdvice ArchFileAdviceDontNeed;
  extern const pxr::ArchFileAdvice ArchFileAdviceRandomAccess;
}
namespace Overlay {
  extern const pxr::ArchMemoryProtection ArchProtectNoAccess;
  extern const pxr::ArchMemoryProtection ArchProtectReadOnly;
  extern const pxr::ArchMemoryProtection ArchProtectReadWrite;
  extern const pxr::ArchMemoryProtection ArchProtectReadWriteCopy;
}
namespace Overlay {
  namespace TfType {
    extern const pxr::TfType::LegacyFlags ABSTRACT;
    extern const pxr::TfType::LegacyFlags CONCRETE;
    extern const pxr::TfType::LegacyFlags MANUFACTURABLE;
  }
}
namespace Overlay {
  extern const pxr::TfDiagnosticType TF_DIAGNOSTIC_INVALID_TYPE;
  extern const pxr::TfDiagnosticType TF_DIAGNOSTIC_CODING_ERROR_TYPE;
  extern const pxr::TfDiagnosticType TF_DIAGNOSTIC_FATAL_CODING_ERROR_TYPE;
  extern const pxr::TfDiagnosticType TF_DIAGNOSTIC_RUNTIME_ERROR_TYPE;
  extern const pxr::TfDiagnosticType TF_DIAGNOSTIC_FATAL_ERROR_TYPE;
  extern const pxr::TfDiagnosticType TF_DIAGNOSTIC_NONFATAL_ERROR_TYPE;
  extern const pxr::TfDiagnosticType TF_DIAGNOSTIC_WARNING_TYPE;
  extern const pxr::TfDiagnosticType TF_DIAGNOSTIC_STATUS_TYPE;
  extern const pxr::TfDiagnosticType TF_APPLICATION_EXIT_TYPE;
}
namespace Overlay {
  namespace TfBits {
    extern const pxr::TfBits::Mode All;
    extern const pxr::TfBits::Mode AllSet;
    extern const pxr::TfBits::Mode AllUnset;
  }
}
namespace Overlay {
  namespace TfCompressedBits {
    namespace Mode {
      extern const pxr::TfCompressedBits::Mode All;
      extern const pxr::TfCompressedBits::Mode AllSet;
      extern const pxr::TfCompressedBits::Mode AllUnset;
      extern const pxr::TfCompressedBits::Mode Platforms;
    }
  }
}
namespace Overlay {
  namespace TfCompressedBits {
    extern const pxr::TfCompressedBits::ComplementTagType ComplementTag;
  }
}
namespace Overlay {
  namespace TfMallocTag {
    namespace CallTree {
      extern const pxr::TfMallocTag::CallTree::PrintSetting TREE;
      extern const pxr::TfMallocTag::CallTree::PrintSetting CALLSITES;
      extern const pxr::TfMallocTag::CallTree::PrintSetting BOTH;
    }
  }
}
namespace Overlay {
  namespace TfRefPtrTracker {
    extern const pxr::TfRefPtrTracker::TraceType Add;
    extern const pxr::TfRefPtrTracker::TraceType Assign;
  }
}
namespace Overlay {
  namespace GfCamera {
    extern const pxr::GfCamera::Projection Perspective;
    extern const pxr::GfCamera::Projection Orthographic;
  }
}
namespace Overlay {
  namespace GfCamera {
    extern const pxr::GfCamera::FOVDirection FOVHorizontal;
    extern const pxr::GfCamera::FOVDirection FOVVertical;
  }
}
namespace Overlay {
  namespace GfFrustum {
    extern const pxr::GfFrustum::ProjectionType Orthographic;
    extern const pxr::GfFrustum::ProjectionType Perspective;
  }
}
namespace Overlay {
  extern const pxr::GfNumericCastFailureType GfNumericCastPosOverflow;
  extern const pxr::GfNumericCastFailureType GfNumericCastNegOverflow;
  extern const pxr::GfNumericCastFailureType GfNumericCastNaN;
}
namespace Overlay {
  namespace JsValue {
    extern const pxr::JsValue::Type ObjectType;
    extern const pxr::JsValue::Type ArrayType;
    extern const pxr::JsValue::Type StringType;
    extern const pxr::JsValue::Type BoolType;
    extern const pxr::JsValue::Type IntType;
    extern const pxr::JsValue::Type RealType;
    extern const pxr::JsValue::Type NullType;
  }
}
namespace Overlay {
  namespace TraceEvent {
    extern const pxr::TraceEvent::BeginTag Begin;
  }
}
namespace Overlay {
  namespace TraceEvent {
    extern const pxr::TraceEvent::EndTag End;
  }
}
namespace Overlay {
  namespace TraceEvent {
    extern const pxr::TraceEvent::TimespanTag Timespan;
  }
}
namespace Overlay {
  namespace TraceEvent {
    extern const pxr::TraceEvent::MarkerTag Marker;
  }
}
namespace Overlay {
  namespace TraceEvent {
    extern const pxr::TraceEvent::CounterDeltaTag CounterDelta;
  }
}
namespace Overlay {
  namespace TraceEvent {
    extern const pxr::TraceEvent::CounterValueTag CounterValue;
  }
}
namespace Overlay {
  namespace TraceEvent {
    extern const pxr::TraceEvent::DataTag Data;
  }
}
namespace Overlay {
  namespace TraceEvent {
    namespace EventType {
      extern const pxr::TraceEvent::EventType Unknown;
      extern const pxr::TraceEvent::EventType Begin;
      extern const pxr::TraceEvent::EventType End;
      extern const pxr::TraceEvent::EventType Timespan;
      extern const pxr::TraceEvent::EventType Marker;
      extern const pxr::TraceEvent::EventType CounterDelta;
      extern const pxr::TraceEvent::EventType CounterValue;
      extern const pxr::TraceEvent::EventType ScopeData;
    }
  }
}
namespace Overlay {
  namespace TraceEvent {
    namespace DataType {
      extern const pxr::TraceEvent::DataType String;
      extern const pxr::TraceEvent::DataType Boolean;
      extern const pxr::TraceEvent::DataType Int;
      extern const pxr::TraceEvent::DataType UInt;
      extern const pxr::TraceEvent::DataType Float;
      extern const pxr::TraceEvent::DataType Invalid;
    }
  }
}
namespace Overlay {
  extern const pxr::TsInterpMode TsInterpValueBlock;
  extern const pxr::TsInterpMode TsInterpHeld;
  extern const pxr::TsInterpMode TsInterpLinear;
  extern const pxr::TsInterpMode TsInterpCurve;
}
namespace Overlay {
  extern const pxr::TsCurveType TsCurveTypeBezier;
  extern const pxr::TsCurveType TsCurveTypeHermite;
}
namespace Overlay {
  extern const pxr::TsExtrapMode TsExtrapValueBlock;
  extern const pxr::TsExtrapMode TsExtrapHeld;
  extern const pxr::TsExtrapMode TsExtrapLinear;
  extern const pxr::TsExtrapMode TsExtrapSloped;
  extern const pxr::TsExtrapMode TsExtrapLoopRepeat;
  extern const pxr::TsExtrapMode TsExtrapLoopReset;
  extern const pxr::TsExtrapMode TsExtrapLoopOscillate;
}
namespace Overlay {
  extern const pxr::TsSplineSampleSource TsSourcePreExtrap;
  extern const pxr::TsSplineSampleSource TsSourcePreExtrapLoop;
  extern const pxr::TsSplineSampleSource TsSourceInnerLoopPreEcho;
  extern const pxr::TsSplineSampleSource TsSourceInnerLoopProto;
  extern const pxr::TsSplineSampleSource TsSourceInnerLoopPostEcho;
  extern const pxr::TsSplineSampleSource TsSourceKnotInterp;
  extern const pxr::TsSplineSampleSource TsSourcePostExtrap;
  extern const pxr::TsSplineSampleSource TsSourcePostExtrapLoop;
}
namespace Overlay {
  extern const pxr::TsAntiRegressionMode TsAntiRegressionNone;
  extern const pxr::TsAntiRegressionMode TsAntiRegressionContain;
  extern const pxr::TsAntiRegressionMode TsAntiRegressionKeepRatio;
  extern const pxr::TsAntiRegressionMode TsAntiRegressionKeepStart;
}
namespace Overlay {
  namespace TsRegressionPreventer {
    extern const pxr::TsRegressionPreventer::InteractiveMode ModeLimitActive;
    extern const pxr::TsRegressionPreventer::InteractiveMode ModeLimitOpposite;
  }
}
namespace Overlay {
  extern const pxr::SdfSpecType SdfSpecTypeUnknown;
  extern const pxr::SdfSpecType SdfSpecTypeAttribute;
  extern const pxr::SdfSpecType SdfSpecTypeConnection;
  extern const pxr::SdfSpecType SdfSpecTypeExpression;
  extern const pxr::SdfSpecType SdfSpecTypeMapper;
  extern const pxr::SdfSpecType SdfSpecTypeMapperArg;
  extern const pxr::SdfSpecType SdfSpecTypePrim;
  extern const pxr::SdfSpecType SdfSpecTypePseudoRoot;
  extern const pxr::SdfSpecType SdfSpecTypeRelationship;
  extern const pxr::SdfSpecType SdfSpecTypeRelationshipTarget;
  extern const pxr::SdfSpecType SdfSpecTypeVariant;
  extern const pxr::SdfSpecType SdfSpecTypeVariantSet;
  extern const pxr::SdfSpecType SdfNumSpecTypes;
}
namespace Overlay {
  extern const pxr::SdfSpecifier SdfSpecifierDef;
  extern const pxr::SdfSpecifier SdfSpecifierOver;
  extern const pxr::SdfSpecifier SdfSpecifierClass;
  extern const pxr::SdfSpecifier SdfNumSpecifiers;
}
namespace Overlay {
  extern const pxr::SdfPermission SdfPermissionPublic;
  extern const pxr::SdfPermission SdfPermissionPrivate;
  extern const pxr::SdfPermission SdfNumPermissions;
}
namespace Overlay {
  extern const pxr::SdfVariability SdfVariabilityVarying;
  extern const pxr::SdfVariability SdfVariabilityUniform;
  extern const pxr::SdfVariability SdfNumVariabilities;
}
namespace Overlay {
  extern const pxr::SdfAuthoringError SdfAuthoringErrorUnrecognizedFields;
  extern const pxr::SdfAuthoringError SdfAuthoringErrorUnrecognizedSpecType;
}
namespace Overlay {
  extern const pxr::SdfAngularUnit SdfAngularUnitDegrees;
  extern const pxr::SdfAngularUnit SdfAngularUnitRadians;
}
namespace Overlay {
  extern const pxr::SdfDimensionlessUnit SdfDimensionlessUnitPercent;
  extern const pxr::SdfDimensionlessUnit SdfDimensionlessUnitDefault;
}
namespace Overlay {
  extern const pxr::SdfLengthUnit SdfLengthUnitMillimeter;
  extern const pxr::SdfLengthUnit SdfLengthUnitCentimeter;
  extern const pxr::SdfLengthUnit SdfLengthUnitDecimeter;
  extern const pxr::SdfLengthUnit SdfLengthUnitMeter;
  extern const pxr::SdfLengthUnit SdfLengthUnitKilometer;
  extern const pxr::SdfLengthUnit SdfLengthUnitInch;
  extern const pxr::SdfLengthUnit SdfLengthUnitFoot;
  extern const pxr::SdfLengthUnit SdfLengthUnitYard;
  extern const pxr::SdfLengthUnit SdfLengthUnitMile;
}
namespace Overlay {
  extern const pxr::SdfListOpType SdfListOpTypeExplicit;
  extern const pxr::SdfListOpType SdfListOpTypeAdded;
  extern const pxr::SdfListOpType SdfListOpTypeDeleted;
  extern const pxr::SdfListOpType SdfListOpTypeOrdered;
  extern const pxr::SdfListOpType SdfListOpTypePrepended;
  extern const pxr::SdfListOpType SdfListOpTypeAppended;
}
namespace Overlay {
  namespace SdfPathExpression {
    extern const pxr::SdfPathExpression::Op Complement;
    extern const pxr::SdfPathExpression::Op ImpliedUnion;
    extern const pxr::SdfPathExpression::Op Union;
    extern const pxr::SdfPathExpression::Op Intersection;
    extern const pxr::SdfPathExpression::Op Difference;
    extern const pxr::SdfPathExpression::Op ExpressionRef;
    extern const pxr::SdfPathExpression::Op Pattern;
  }
}
namespace Overlay {
  namespace SdfPredicateExpression {
    namespace FnCall {
      extern const pxr::SdfPredicateExpression::FnCall::Kind BareCall;
      extern const pxr::SdfPredicateExpression::FnCall::Kind ColonCall;
      extern const pxr::SdfPredicateExpression::FnCall::Kind ParenCall;
    }
  }
}
namespace Overlay {
  namespace SdfPredicateExpression {
    extern const pxr::SdfPredicateExpression::Op Call;
    extern const pxr::SdfPredicateExpression::Op Not;
    extern const pxr::SdfPredicateExpression::Op ImpliedAnd;
    extern const pxr::SdfPredicateExpression::Op And;
    extern const pxr::SdfPredicateExpression::Op Or;
  }
}
namespace Overlay {
  namespace SdfChangeList {
    extern const pxr::SdfChangeList::SubLayerChangeType SubLayerAdded;
    extern const pxr::SdfChangeList::SubLayerChangeType SubLayerRemoved;
    extern const pxr::SdfChangeList::SubLayerChangeType SubLayerOffset;
  }
}
namespace Overlay {
  namespace SdfNamespaceEditDetail {
    extern const pxr::SdfNamespaceEditDetail::Result Error;
    extern const pxr::SdfNamespaceEditDetail::Result Unbatched;
    extern const pxr::SdfNamespaceEditDetail::Result Okay;
  }
}
namespace Overlay {
  namespace SdfPredicateFunctionResult {
    extern const pxr::SdfPredicateFunctionResult::Constancy ConstantOverDescendants;
    extern const pxr::SdfPredicateFunctionResult::Constancy MayVaryOverDescendants;
  }
}
namespace Overlay {
  extern const pxr::NdrVersionFilter NdrVersionFilterDefaultOnly;
  extern const pxr::NdrVersionFilter NdrVersionFilterAllVersions;
  extern const pxr::NdrVersionFilter NdrNumVersionFilters;
}
namespace Overlay {
  extern const pxr::SdrVersionFilter SdrVersionFilterDefaultOnly;
  extern const pxr::SdrVersionFilter SdrVersionFilterAllVersions;
  extern const pxr::SdrVersionFilter SdrNumVersionFilters;
}
namespace Overlay {
  extern const pxr::PcpArcType PcpArcTypeRoot;
  extern const pxr::PcpArcType PcpArcTypeInherit;
  extern const pxr::PcpArcType PcpArcTypeVariant;
  extern const pxr::PcpArcType PcpArcTypeRelocate;
  extern const pxr::PcpArcType PcpArcTypeReference;
  extern const pxr::PcpArcType PcpArcTypePayload;
  extern const pxr::PcpArcType PcpArcTypeSpecialize;
  extern const pxr::PcpArcType PcpNumArcTypes;
}
namespace Overlay {
  extern const pxr::PcpRangeType PcpRangeTypeRoot;
  extern const pxr::PcpRangeType PcpRangeTypeInherit;
  extern const pxr::PcpRangeType PcpRangeTypeVariant;
  extern const pxr::PcpRangeType PcpRangeTypeReference;
  extern const pxr::PcpRangeType PcpRangeTypePayload;
  extern const pxr::PcpRangeType PcpRangeTypeSpecialize;
  extern const pxr::PcpRangeType PcpRangeTypeAll;
  extern const pxr::PcpRangeType PcpRangeTypeWeakerThanRoot;
  extern const pxr::PcpRangeType PcpRangeTypeStrongerThanPayload;
  extern const pxr::PcpRangeType PcpRangeTypeInvalid;
}
namespace Overlay {
  extern const pxr::PcpDependencyType PcpDependencyTypeNone;
  extern const pxr::PcpDependencyType PcpDependencyTypeRoot;
  extern const pxr::PcpDependencyType PcpDependencyTypePurelyDirect;
  extern const pxr::PcpDependencyType PcpDependencyTypePartlyDirect;
  extern const pxr::PcpDependencyType PcpDependencyTypeAncestral;
  extern const pxr::PcpDependencyType PcpDependencyTypeVirtual;
  extern const pxr::PcpDependencyType PcpDependencyTypeNonVirtual;
  extern const pxr::PcpDependencyType PcpDependencyTypeDirect;
  extern const pxr::PcpDependencyType PcpDependencyTypeAnyNonVirtual;
  extern const pxr::PcpDependencyType PcpDependencyTypeAnyIncludingVirtual;
}
namespace Overlay {
  extern const pxr::PcpErrorType PcpErrorType_ArcCycle;
  extern const pxr::PcpErrorType PcpErrorType_ArcPermissionDenied;
  extern const pxr::PcpErrorType PcpErrorType_ArcToProhibitedChild;
  extern const pxr::PcpErrorType PcpErrorType_IndexCapacityExceeded;
  extern const pxr::PcpErrorType PcpErrorType_ArcCapacityExceeded;
  extern const pxr::PcpErrorType PcpErrorType_ArcNamespaceDepthCapacityExceeded;
  extern const pxr::PcpErrorType PcpErrorType_InconsistentPropertyType;
  extern const pxr::PcpErrorType PcpErrorType_InconsistentAttributeType;
  extern const pxr::PcpErrorType PcpErrorType_InconsistentAttributeVariability;
  extern const pxr::PcpErrorType PcpErrorType_InternalAssetPath;
  extern const pxr::PcpErrorType PcpErrorType_InvalidPrimPath;
  extern const pxr::PcpErrorType PcpErrorType_InvalidAssetPath;
  extern const pxr::PcpErrorType PcpErrorType_InvalidInstanceTargetPath;
  extern const pxr::PcpErrorType PcpErrorType_InvalidExternalTargetPath;
  extern const pxr::PcpErrorType PcpErrorType_InvalidTargetPath;
  extern const pxr::PcpErrorType PcpErrorType_InvalidReferenceOffset;
  extern const pxr::PcpErrorType PcpErrorType_InvalidSublayerOffset;
  extern const pxr::PcpErrorType PcpErrorType_InvalidSublayerOwnership;
  extern const pxr::PcpErrorType PcpErrorType_InvalidSublayerPath;
  extern const pxr::PcpErrorType PcpErrorType_InvalidVariantSelection;
  extern const pxr::PcpErrorType PcpErrorType_MutedAssetPath;
  extern const pxr::PcpErrorType PcpErrorType_InvalidAuthoredRelocation;
  extern const pxr::PcpErrorType PcpErrorType_InvalidConflictingRelocation;
  extern const pxr::PcpErrorType PcpErrorType_InvalidSameTargetRelocations;
  extern const pxr::PcpErrorType PcpErrorType_OpinionAtRelocationSource;
  extern const pxr::PcpErrorType PcpErrorType_PrimPermissionDenied;
  extern const pxr::PcpErrorType PcpErrorType_PropertyPermissionDenied;
  extern const pxr::PcpErrorType PcpErrorType_SublayerCycle;
  extern const pxr::PcpErrorType PcpErrorType_TargetPermissionDenied;
  extern const pxr::PcpErrorType PcpErrorType_UnresolvedPrimPath;
  extern const pxr::PcpErrorType PcpErrorType_VariableExpressionError;
}
namespace Overlay {
  namespace PcpErrorInvalidConflictingRelocation {
    namespace ConflictReason {
      extern const pxr::PcpErrorInvalidConflictingRelocation::ConflictReason TargetIsConflictSource;
      extern const pxr::PcpErrorInvalidConflictingRelocation::ConflictReason SourceIsConflictTarget;
      extern const pxr::PcpErrorInvalidConflictingRelocation::ConflictReason TargetIsConflictSourceDescendant;
      extern const pxr::PcpErrorInvalidConflictingRelocation::ConflictReason SourceIsConflictSourceDescendant;
    }
  }
}
namespace Overlay {
  namespace PcpPrimIndexOutputs {
    extern const pxr::PcpPrimIndexOutputs::PayloadState NoPayload;
    extern const pxr::PcpPrimIndexOutputs::PayloadState IncludedByIncludeSet;
    extern const pxr::PcpPrimIndexOutputs::PayloadState ExcludedByIncludeSet;
    extern const pxr::PcpPrimIndexOutputs::PayloadState IncludedByPredicate;
    extern const pxr::PcpPrimIndexOutputs::PayloadState ExcludedByPredicate;
  }
}
namespace Overlay {
  namespace PcpCacheChanges {
    extern const pxr::PcpCacheChanges::TargetType TargetTypeConnection;
    extern const pxr::PcpCacheChanges::TargetType TargetTypeRelationshipTarget;
  }
}
namespace Overlay {
  namespace PcpChanges {
    extern const pxr::PcpChanges::ChangeSpecsType ChangeSpecsTypeRemoved;
    extern const pxr::PcpChanges::ChangeSpecsType ChangeSpecsTypeAdded;
  }
}
namespace Overlay {
  namespace PcpNamespaceEdits {
    extern const pxr::PcpNamespaceEdits::EditType EditPath;
    extern const pxr::PcpNamespaceEdits::EditType EditInherit;
    extern const pxr::PcpNamespaceEdits::EditType EditSpecializes;
    extern const pxr::PcpNamespaceEdits::EditType EditReference;
    extern const pxr::PcpNamespaceEdits::EditType EditPayload;
    extern const pxr::PcpNamespaceEdits::EditType EditRelocate;
  }
}
namespace Overlay {
  extern const pxr::UsdListPosition UsdListPositionFrontOfPrependList;
  extern const pxr::UsdListPosition UsdListPositionBackOfPrependList;
  extern const pxr::UsdListPosition UsdListPositionFrontOfAppendList;
  extern const pxr::UsdListPosition UsdListPositionBackOfAppendList;
}
namespace Overlay {
  extern const pxr::UsdLoadPolicy UsdLoadWithDescendants;
  extern const pxr::UsdLoadPolicy UsdLoadWithoutDescendants;
}
namespace Overlay {
  namespace UsdSchemaKind {
    extern const pxr::UsdSchemaKind Invalid;
    extern const pxr::UsdSchemaKind AbstractBase;
    extern const pxr::UsdSchemaKind AbstractTyped;
    extern const pxr::UsdSchemaKind ConcreteTyped;
    extern const pxr::UsdSchemaKind NonAppliedAPI;
    extern const pxr::UsdSchemaKind SingleApplyAPI;
    extern const pxr::UsdSchemaKind MultipleApplyAPI;
  }
}
namespace Overlay {
  extern const pxr::UsdObjType UsdTypeObject;
  extern const pxr::UsdObjType UsdTypePrim;
  extern const pxr::UsdObjType UsdTypeProperty;
  extern const pxr::UsdObjType UsdTypeAttribute;
  extern const pxr::UsdObjType UsdTypeRelationship;
  extern const pxr::UsdObjType Usd_NumObjTypes;
}
namespace Overlay {
  namespace UsdSchemaRegistry {
    namespace VersionPolicy {
      extern const pxr::UsdSchemaRegistry::VersionPolicy All;
      extern const pxr::UsdSchemaRegistry::VersionPolicy GreaterThan;
      extern const pxr::UsdSchemaRegistry::VersionPolicy GreaterThanOrEqual;
      extern const pxr::UsdSchemaRegistry::VersionPolicy LessThan;
      extern const pxr::UsdSchemaRegistry::VersionPolicy LessThanOrEqual;
    }
  }
}
namespace Overlay {
  namespace UsdStage {
    extern const pxr::UsdStage::InitialLoadSet LoadAll;
    extern const pxr::UsdStage::InitialLoadSet LoadNone;
  }
}
namespace Overlay {
  extern const pxr::UsdInterpolationType UsdInterpolationTypeHeld;
  extern const pxr::UsdInterpolationType UsdInterpolationTypeLinear;
}
namespace Overlay {
  namespace UsdStageLoadRules {
    extern const pxr::UsdStageLoadRules::Rule AllRule;
    extern const pxr::UsdStageLoadRules::Rule OnlyRule;
    extern const pxr::UsdStageLoadRules::Rule NoneRule;
  }
}
namespace Overlay {
  extern const pxr::UsdResolveInfoSource UsdResolveInfoSourceNone;
  extern const pxr::UsdResolveInfoSource UsdResolveInfoSourceFallback;
  extern const pxr::UsdResolveInfoSource UsdResolveInfoSourceDefault;
  extern const pxr::UsdResolveInfoSource UsdResolveInfoSourceTimeSamples;
  extern const pxr::UsdResolveInfoSource UsdResolveInfoSourceValueClips;
  extern const pxr::UsdResolveInfoSource UsdResolveInfoSourceSpline;
}
namespace Overlay {
  namespace UsdModelAPI {
    extern const pxr::UsdModelAPI::KindValidation KindValidationNone;
    extern const pxr::UsdModelAPI::KindValidation KindValidationModelHierarchy;
  }
}
namespace Overlay {
  namespace UsdNotice {
    namespace ObjectsChanged {
      namespace PrimResyncType {
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType RenameSource;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType RenameDestination;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType ReparentSource;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType ReparentDestination;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType RenameAndReparentSource;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType RenameAndReparentDestination;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType Delete;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType UnchangedPrimStack;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType Other;
        extern const pxr::UsdNotice::ObjectsChanged::PrimResyncType Invalid;
      }
    }
  }
}
namespace Overlay {
  namespace UsdPrimCompositionQuery {
    namespace ArcTypeFilter {
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter All;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter Reference;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter Payload;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter Inherit;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter Specialize;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter Variant;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter ReferenceOrPayload;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter InheritOrSpecialize;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter NotReferenceOrPayload;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter NotInheritOrSpecialize;
      extern const pxr::UsdPrimCompositionQuery::ArcTypeFilter NotVariant;
    }
  }
}
namespace Overlay {
  namespace UsdPrimCompositionQuery {
    namespace DependencyTypeFilter {
      extern const pxr::UsdPrimCompositionQuery::DependencyTypeFilter All;
      extern const pxr::UsdPrimCompositionQuery::DependencyTypeFilter Direct;
      extern const pxr::UsdPrimCompositionQuery::DependencyTypeFilter Ancestral;
    }
  }
}
namespace Overlay {
  namespace UsdPrimCompositionQuery {
    namespace ArcIntroducedFilter {
      extern const pxr::UsdPrimCompositionQuery::ArcIntroducedFilter All;
      extern const pxr::UsdPrimCompositionQuery::ArcIntroducedFilter IntroducedInRootLayerStack;
      extern const pxr::UsdPrimCompositionQuery::ArcIntroducedFilter IntroducedInRootLayerPrimSpec;
    }
  }
}
namespace Overlay {
  namespace UsdPrimCompositionQuery {
    namespace HasSpecsFilter {
      extern const pxr::UsdPrimCompositionQuery::HasSpecsFilter All;
      extern const pxr::UsdPrimCompositionQuery::HasSpecsFilter HasSpecs;
      extern const pxr::UsdPrimCompositionQuery::HasSpecsFilter HasNoSpecs;
    }
  }
}
namespace Overlay {
  extern const pxr::UsdStageCacheContextBlockType UsdBlockStageCaches;
  extern const pxr::UsdStageCacheContextBlockType UsdBlockStageCachePopulation;
  extern const pxr::UsdStageCacheContextBlockType Usd_NoBlock;
}
namespace Overlay {
  namespace UsdGeomXformOp {
    extern const pxr::UsdGeomXformOp::Type TypeInvalid;
    extern const pxr::UsdGeomXformOp::Type TypeTranslateX;
    extern const pxr::UsdGeomXformOp::Type TypeTranslateY;
    extern const pxr::UsdGeomXformOp::Type TypeTranslateZ;
    extern const pxr::UsdGeomXformOp::Type TypeTranslate;
    extern const pxr::UsdGeomXformOp::Type TypeScaleX;
    extern const pxr::UsdGeomXformOp::Type TypeScaleY;
    extern const pxr::UsdGeomXformOp::Type TypeScaleZ;
    extern const pxr::UsdGeomXformOp::Type TypeScale;
    extern const pxr::UsdGeomXformOp::Type TypeRotateX;
    extern const pxr::UsdGeomXformOp::Type TypeRotateY;
    extern const pxr::UsdGeomXformOp::Type TypeRotateZ;
    extern const pxr::UsdGeomXformOp::Type TypeRotateXYZ;
    extern const pxr::UsdGeomXformOp::Type TypeRotateXZY;
    extern const pxr::UsdGeomXformOp::Type TypeRotateYXZ;
    extern const pxr::UsdGeomXformOp::Type TypeRotateYZX;
    extern const pxr::UsdGeomXformOp::Type TypeRotateZXY;
    extern const pxr::UsdGeomXformOp::Type TypeRotateZYX;
    extern const pxr::UsdGeomXformOp::Type TypeOrient;
    extern const pxr::UsdGeomXformOp::Type TypeTransform;
  }
}
namespace Overlay {
  namespace UsdGeomXformOp {
    extern const pxr::UsdGeomXformOp::Precision PrecisionDouble;
    extern const pxr::UsdGeomXformOp::Precision PrecisionFloat;
    extern const pxr::UsdGeomXformOp::Precision PrecisionHalf;
  }
}
namespace Overlay {
  namespace UsdGeomPointInstancer {
    extern const pxr::UsdGeomPointInstancer::ProtoXformInclusion IncludeProtoXform;
    extern const pxr::UsdGeomPointInstancer::ProtoXformInclusion ExcludeProtoXform;
  }
}
namespace Overlay {
  namespace UsdGeomPointInstancer {
    extern const pxr::UsdGeomPointInstancer::MaskApplication ApplyMask;
    extern const pxr::UsdGeomPointInstancer::MaskApplication IgnoreMask;
  }
}
namespace Overlay {
  namespace UsdGeomXformCommonAPI {
    extern const pxr::UsdGeomXformCommonAPI::RotationOrder RotationOrderXYZ;
    extern const pxr::UsdGeomXformCommonAPI::RotationOrder RotationOrderXZY;
    extern const pxr::UsdGeomXformCommonAPI::RotationOrder RotationOrderYXZ;
    extern const pxr::UsdGeomXformCommonAPI::RotationOrder RotationOrderYZX;
    extern const pxr::UsdGeomXformCommonAPI::RotationOrder RotationOrderZXY;
    extern const pxr::UsdGeomXformCommonAPI::RotationOrder RotationOrderZYX;
  }
}
namespace Overlay {
  namespace UsdGeomXformCommonAPI {
    extern const pxr::UsdGeomXformCommonAPI::OpFlags OpNone;
    extern const pxr::UsdGeomXformCommonAPI::OpFlags OpTranslate;
    extern const pxr::UsdGeomXformCommonAPI::OpFlags OpPivot;
    extern const pxr::UsdGeomXformCommonAPI::OpFlags OpRotate;
    extern const pxr::UsdGeomXformCommonAPI::OpFlags OpScale;
  }
}
namespace Overlay {
  namespace UsdShadeAttributeType {
    extern const pxr::UsdShadeAttributeType Invalid;
    extern const pxr::UsdShadeAttributeType Input;
    extern const pxr::UsdShadeAttributeType Output;
  }
}
namespace Overlay {
  namespace UsdShadeConnectionModification {
    extern const pxr::UsdShadeConnectionModification Replace;
    extern const pxr::UsdShadeConnectionModification Prepend;
    extern const pxr::UsdShadeConnectionModification Append;
  }
}
namespace Overlay {
  namespace UsdShadeConnectableAPIBehavior {
    extern const pxr::UsdShadeConnectableAPIBehavior::ConnectableNodeTypes BasicNodes;
    extern const pxr::UsdShadeConnectableAPIBehavior::ConnectableNodeTypes DerivedContainerNodes;
  }
}
namespace Overlay {
  namespace UsdLuxLightListAPI {
    extern const pxr::UsdLuxLightListAPI::ComputeMode ComputeModeConsultModelHierarchyCache;
    extern const pxr::UsdLuxLightListAPI::ComputeMode ComputeModeIgnoreCache;
  }
}
namespace Overlay {
  namespace UsdLuxListAPI {
    extern const pxr::UsdLuxListAPI::ComputeMode ComputeModeConsultModelHierarchyCache;
    extern const pxr::UsdLuxListAPI::ComputeMode ComputeModeIgnoreCache;
  }
}
namespace Overlay {
  namespace UsdSkelBakeSkinningParms {
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags DeformPointsWithSkinning;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags DeformNormalsWithSkinning;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags DeformXformWithSkinning;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags DeformPointsWithBlendShapes;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags DeformNormalsWithBlendShapes;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags DeformWithSkinning;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags DeformWithBlendShapes;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags DeformAll;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags ModifiesPoints;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags ModifiesNormals;
    extern const pxr::UsdSkelBakeSkinningParms::DeformationFlags ModifiesXform;
  }
}
namespace Overlay {
  namespace UsdUtilsRegisteredVariantSet {
    namespace SelectionExportPolicy {
      extern const pxr::UsdUtilsRegisteredVariantSet::SelectionExportPolicy Never;
      extern const pxr::UsdUtilsRegisteredVariantSet::SelectionExportPolicy IfAuthored;
      extern const pxr::UsdUtilsRegisteredVariantSet::SelectionExportPolicy Always;
    }
  }
}
namespace Overlay {
  namespace UsdUtilsStitchValueStatus {
    extern const pxr::UsdUtilsStitchValueStatus NoStitchedValue;
    extern const pxr::UsdUtilsStitchValueStatus UseDefaultValue;
    extern const pxr::UsdUtilsStitchValueStatus UseSuppliedValue;
  }
}
namespace Overlay {
  namespace UsdPhysicsObjectType {
    extern const pxr::UsdPhysicsObjectType Undefined;
    extern const pxr::UsdPhysicsObjectType Scene;
    extern const pxr::UsdPhysicsObjectType RigidBody;
    extern const pxr::UsdPhysicsObjectType SphereShape;
    extern const pxr::UsdPhysicsObjectType CubeShape;
    extern const pxr::UsdPhysicsObjectType CapsuleShape;
    extern const pxr::UsdPhysicsObjectType Capsule1Shape;
    extern const pxr::UsdPhysicsObjectType CylinderShape;
    extern const pxr::UsdPhysicsObjectType Cylinder1Shape;
    extern const pxr::UsdPhysicsObjectType ConeShape;
    extern const pxr::UsdPhysicsObjectType MeshShape;
    extern const pxr::UsdPhysicsObjectType PlaneShape;
    extern const pxr::UsdPhysicsObjectType CustomShape;
    extern const pxr::UsdPhysicsObjectType SpherePointsShape;
    extern const pxr::UsdPhysicsObjectType FixedJoint;
    extern const pxr::UsdPhysicsObjectType RevoluteJoint;
    extern const pxr::UsdPhysicsObjectType PrismaticJoint;
    extern const pxr::UsdPhysicsObjectType SphericalJoint;
    extern const pxr::UsdPhysicsObjectType DistanceJoint;
    extern const pxr::UsdPhysicsObjectType D6Joint;
    extern const pxr::UsdPhysicsObjectType CustomJoint;
    extern const pxr::UsdPhysicsObjectType RigidBodyMaterial;
    extern const pxr::UsdPhysicsObjectType Articulation;
    extern const pxr::UsdPhysicsObjectType CollisionGroup;
    extern const pxr::UsdPhysicsObjectType Last;
  }
}
namespace Overlay {
  namespace UsdPhysicsAxis {
    extern const pxr::UsdPhysicsAxis X;
    extern const pxr::UsdPhysicsAxis Y;
    extern const pxr::UsdPhysicsAxis Z;
  }
}
namespace Overlay {
  namespace UsdPhysicsJointDOF {
    extern const pxr::UsdPhysicsJointDOF Distance;
    extern const pxr::UsdPhysicsJointDOF TransX;
    extern const pxr::UsdPhysicsJointDOF TransY;
    extern const pxr::UsdPhysicsJointDOF TransZ;
    extern const pxr::UsdPhysicsJointDOF RotX;
    extern const pxr::UsdPhysicsJointDOF RotY;
    extern const pxr::UsdPhysicsJointDOF RotZ;
  }
}
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
namespace Overlay {
  namespace GarchGLDebugWindow {
    extern const pxr::GarchGLDebugWindow::Buttons MyButton1;
    extern const pxr::GarchGLDebugWindow::Buttons MyButton2;
    extern const pxr::GarchGLDebugWindow::Buttons MyButton3;
  }
}
namespace Overlay {
  namespace GarchGLDebugWindow {
    extern const pxr::GarchGLDebugWindow::ModifierKeys NoModifiers;
    extern const pxr::GarchGLDebugWindow::ModifierKeys Shift;
    extern const pxr::GarchGLDebugWindow::ModifierKeys Alt;
    extern const pxr::GarchGLDebugWindow::ModifierKeys Ctrl;
  }
}
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && defined(ARCH_OS_DARWIN)
namespace Overlay {
  namespace GarchNSGLContextState {
    namespace NullState {
      extern const pxr::GarchNSGLContextState::NullState nullstate;
    }
  }
}
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && defined(ARCH_OS_DARWIN)
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
namespace Overlay {
  extern const pxr::HioFormat HioFormatInvalid;
  extern const pxr::HioFormat HioFormatUNorm8;
  extern const pxr::HioFormat HioFormatUNorm8Vec2;
  extern const pxr::HioFormat HioFormatUNorm8Vec3;
  extern const pxr::HioFormat HioFormatUNorm8Vec4;
  extern const pxr::HioFormat HioFormatSNorm8;
  extern const pxr::HioFormat HioFormatSNorm8Vec2;
  extern const pxr::HioFormat HioFormatSNorm8Vec3;
  extern const pxr::HioFormat HioFormatSNorm8Vec4;
  extern const pxr::HioFormat HioFormatFloat16;
  extern const pxr::HioFormat HioFormatFloat16Vec2;
  extern const pxr::HioFormat HioFormatFloat16Vec3;
  extern const pxr::HioFormat HioFormatFloat16Vec4;
  extern const pxr::HioFormat HioFormatFloat32;
  extern const pxr::HioFormat HioFormatFloat32Vec2;
  extern const pxr::HioFormat HioFormatFloat32Vec3;
  extern const pxr::HioFormat HioFormatFloat32Vec4;
  extern const pxr::HioFormat HioFormatDouble64;
  extern const pxr::HioFormat HioFormatDouble64Vec2;
  extern const pxr::HioFormat HioFormatDouble64Vec3;
  extern const pxr::HioFormat HioFormatDouble64Vec4;
  extern const pxr::HioFormat HioFormatUInt16;
  extern const pxr::HioFormat HioFormatUInt16Vec2;
  extern const pxr::HioFormat HioFormatUInt16Vec3;
  extern const pxr::HioFormat HioFormatUInt16Vec4;
  extern const pxr::HioFormat HioFormatInt16;
  extern const pxr::HioFormat HioFormatInt16Vec2;
  extern const pxr::HioFormat HioFormatInt16Vec3;
  extern const pxr::HioFormat HioFormatInt16Vec4;
  extern const pxr::HioFormat HioFormatUInt32;
  extern const pxr::HioFormat HioFormatUInt32Vec2;
  extern const pxr::HioFormat HioFormatUInt32Vec3;
  extern const pxr::HioFormat HioFormatUInt32Vec4;
  extern const pxr::HioFormat HioFormatInt32;
  extern const pxr::HioFormat HioFormatInt32Vec2;
  extern const pxr::HioFormat HioFormatInt32Vec3;
  extern const pxr::HioFormat HioFormatInt32Vec4;
  extern const pxr::HioFormat HioFormatUNorm8srgb;
  extern const pxr::HioFormat HioFormatUNorm8Vec2srgb;
  extern const pxr::HioFormat HioFormatUNorm8Vec3srgb;
  extern const pxr::HioFormat HioFormatUNorm8Vec4srgb;
  extern const pxr::HioFormat HioFormatBC6FloatVec3;
  extern const pxr::HioFormat HioFormatBC6UFloatVec3;
  extern const pxr::HioFormat HioFormatBC7UNorm8Vec4;
  extern const pxr::HioFormat HioFormatBC7UNorm8Vec4srgb;
  extern const pxr::HioFormat HioFormatBC1UNorm8Vec4;
  extern const pxr::HioFormat HioFormatBC3UNorm8Vec4;
  extern const pxr::HioFormat HioFormatCount;
}
namespace Overlay {
  extern const pxr::HioAddressDimension HioAddressDimensionU;
  extern const pxr::HioAddressDimension HioAddressDimensionV;
  extern const pxr::HioAddressDimension HioAddressDimensionW;
}
namespace Overlay {
  extern const pxr::HioAddressMode HioAddressModeClampToEdge;
  extern const pxr::HioAddressMode HioAddressModeMirrorClampToEdge;
  extern const pxr::HioAddressMode HioAddressModeRepeat;
  extern const pxr::HioAddressMode HioAddressModeMirrorRepeat;
  extern const pxr::HioAddressMode HioAddressModeClampToBorderColor;
}
namespace Overlay {
  extern const pxr::HioType HioTypeUnsignedByte;
  extern const pxr::HioType HioTypeUnsignedByteSRGB;
  extern const pxr::HioType HioTypeSignedByte;
  extern const pxr::HioType HioTypeUnsignedShort;
  extern const pxr::HioType HioTypeSignedShort;
  extern const pxr::HioType HioTypeUnsignedInt;
  extern const pxr::HioType HioTypeInt;
  extern const pxr::HioType HioTypeHalfFloat;
  extern const pxr::HioType HioTypeFloat;
  extern const pxr::HioType HioTypeDouble;
  extern const pxr::HioType HioTypeCount;
}
namespace Overlay {
  namespace HioGlslfxConfig {
    extern const pxr::HioGlslfxConfig::Role RoleNone;
    extern const pxr::HioGlslfxConfig::Role RoleColor;
  }
}
namespace Overlay {
  namespace HioGlslfxResourceLayout {
    namespace InOut {
      extern const pxr::HioGlslfxResourceLayout::InOut NONE;
      extern const pxr::HioGlslfxResourceLayout::InOut STAGE_IN;
      extern const pxr::HioGlslfxResourceLayout::InOut STAGE_OUT;
    }
  }
}
namespace Overlay {
  namespace HioGlslfxResourceLayout {
    namespace Kind {
      extern const pxr::HioGlslfxResourceLayout::Kind NONE;
      extern const pxr::HioGlslfxResourceLayout::Kind VALUE;
      extern const pxr::HioGlslfxResourceLayout::Kind BLOCK;
      extern const pxr::HioGlslfxResourceLayout::Kind QUALIFIER;
      extern const pxr::HioGlslfxResourceLayout::Kind UNIFORM_VALUE;
      extern const pxr::HioGlslfxResourceLayout::Kind UNIFORM_BLOCK;
      extern const pxr::HioGlslfxResourceLayout::Kind UNIFORM_BLOCK_CONSTANT_PARAMS;
      extern const pxr::HioGlslfxResourceLayout::Kind BUFFER_READ_ONLY;
      extern const pxr::HioGlslfxResourceLayout::Kind BUFFER_READ_WRITE;
    }
  }
}
namespace Overlay {
  namespace HioGlslfxResourceLayout {
    namespace TextureType {
      extern const pxr::HioGlslfxResourceLayout::TextureType TEXTURE;
      extern const pxr::HioGlslfxResourceLayout::TextureType SHADOW_TEXTURE;
      extern const pxr::HioGlslfxResourceLayout::TextureType ARRAY_TEXTURE;
    }
  }
}
namespace Overlay {
  extern const pxr::CameraUtilConformWindowPolicy CameraUtilMatchVertically;
  extern const pxr::CameraUtilConformWindowPolicy CameraUtilMatchHorizontally;
  extern const pxr::CameraUtilConformWindowPolicy CameraUtilFit;
  extern const pxr::CameraUtilConformWindowPolicy CameraUtilCrop;
  extern const pxr::CameraUtilConformWindowPolicy CameraUtilDontConform;
}
namespace Overlay {
  namespace PxOsdMeshTopologyValidation {
    namespace Code {
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidScheme;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidOrientation;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidTriangleSubdivision;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidVertexInterpolationRule;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidFaceVaryingInterpolationRule;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidCreaseMethod;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidCreaseLengthElement;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidCreaseIndicesSize;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidCreaseIndicesElement;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidCreaseWeightsSize;
      extern const pxr::PxOsdMeshTopologyValidation::Code NegativeCreaseWeights;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidCornerIndicesElement;
      extern const pxr::PxOsdMeshTopologyValidation::Code NegativeCornerWeights;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidCornerWeightsSize;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidHoleIndicesElement;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidFaceVertexCountsElement;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidFaceVertexIndicesElement;
      extern const pxr::PxOsdMeshTopologyValidation::Code InvalidFaceVertexIndicesSize;
    }
  }
}
namespace Overlay {
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsPresentation;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsBindlessBuffers;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsConcurrentDispatch;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsUnifiedMemory;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsBuiltinBarycentrics;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsShaderDrawParameters;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsMultiDrawIndirect;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsBindlessTextures;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsShaderDoublePrecision;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsDepthRangeMinusOnetoOne;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsCppShaderPadding;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsConservativeRaster;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsStencilReadback;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsCustomDepthRange;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsMetalTessellation;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsBasePrimitiveOffset;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsPrimitiveIdEmulation;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsIndirectCommandBuffers;
  extern const pxr::HgiDeviceCapabilitiesBits HgiDeviceCapabilitiesBitsRoundPoints;
}
namespace Overlay {
  extern const pxr::HgiTextureType HgiTextureType1D;
  extern const pxr::HgiTextureType HgiTextureType2D;
  extern const pxr::HgiTextureType HgiTextureType3D;
  extern const pxr::HgiTextureType HgiTextureType1DArray;
  extern const pxr::HgiTextureType HgiTextureType2DArray;
  extern const pxr::HgiTextureType HgiTextureTypeCount;
}
namespace Overlay {
  extern const pxr::HgiTextureUsageBits HgiTextureUsageBitsColorTarget;
  extern const pxr::HgiTextureUsageBits HgiTextureUsageBitsDepthTarget;
  extern const pxr::HgiTextureUsageBits HgiTextureUsageBitsStencilTarget;
  extern const pxr::HgiTextureUsageBits HgiTextureUsageBitsShaderRead;
  extern const pxr::HgiTextureUsageBits HgiTextureUsageBitsShaderWrite;
  extern const pxr::HgiTextureUsageBits HgiTextureUsageCustomBitsBegin;
}
namespace Overlay {
  extern const pxr::HgiSamplerAddressMode HgiSamplerAddressModeClampToEdge;
  extern const pxr::HgiSamplerAddressMode HgiSamplerAddressModeMirrorClampToEdge;
  extern const pxr::HgiSamplerAddressMode HgiSamplerAddressModeRepeat;
  extern const pxr::HgiSamplerAddressMode HgiSamplerAddressModeMirrorRepeat;
  extern const pxr::HgiSamplerAddressMode HgiSamplerAddressModeClampToBorderColor;
  extern const pxr::HgiSamplerAddressMode HgiSamplerAddressModeCount;
}
namespace Overlay {
  extern const pxr::HgiSamplerFilter HgiSamplerFilterNearest;
  extern const pxr::HgiSamplerFilter HgiSamplerFilterLinear;
  extern const pxr::HgiSamplerFilter HgiSamplerFilterCount;
}
namespace Overlay {
  extern const pxr::HgiMipFilter HgiMipFilterNotMipmapped;
  extern const pxr::HgiMipFilter HgiMipFilterNearest;
  extern const pxr::HgiMipFilter HgiMipFilterLinear;
  extern const pxr::HgiMipFilter HgiMipFilterCount;
}
namespace Overlay {
  extern const pxr::HgiBorderColor HgiBorderColorTransparentBlack;
  extern const pxr::HgiBorderColor HgiBorderColorOpaqueBlack;
  extern const pxr::HgiBorderColor HgiBorderColorOpaqueWhite;
  extern const pxr::HgiBorderColor HgiBorderColorCount;
}
namespace Overlay {
  extern const pxr::HgiSampleCount HgiSampleCount1;
  extern const pxr::HgiSampleCount HgiSampleCount2;
  extern const pxr::HgiSampleCount HgiSampleCount4;
  extern const pxr::HgiSampleCount HgiSampleCount8;
  extern const pxr::HgiSampleCount HgiSampleCount16;
  extern const pxr::HgiSampleCount HgiSampleCountEnd;
}
namespace Overlay {
  extern const pxr::HgiAttachmentLoadOp HgiAttachmentLoadOpDontCare;
  extern const pxr::HgiAttachmentLoadOp HgiAttachmentLoadOpClear;
  extern const pxr::HgiAttachmentLoadOp HgiAttachmentLoadOpLoad;
  extern const pxr::HgiAttachmentLoadOp HgiAttachmentLoadOpCount;
}
namespace Overlay {
  extern const pxr::HgiAttachmentStoreOp HgiAttachmentStoreOpDontCare;
  extern const pxr::HgiAttachmentStoreOp HgiAttachmentStoreOpStore;
  extern const pxr::HgiAttachmentStoreOp HgiAttachmentStoreOpCount;
}
namespace Overlay {
  extern const pxr::HgiBufferUsageBits HgiBufferUsageUniform;
  extern const pxr::HgiBufferUsageBits HgiBufferUsageIndex32;
  extern const pxr::HgiBufferUsageBits HgiBufferUsageVertex;
  extern const pxr::HgiBufferUsageBits HgiBufferUsageStorage;
  extern const pxr::HgiBufferUsageBits HgiBufferUsageIndirect;
  extern const pxr::HgiBufferUsageBits HgiBufferUsageCustomBitsBegin;
}
namespace Overlay {
  extern const pxr::HgiShaderStageBits HgiShaderStageVertex;
  extern const pxr::HgiShaderStageBits HgiShaderStageFragment;
  extern const pxr::HgiShaderStageBits HgiShaderStageCompute;
  extern const pxr::HgiShaderStageBits HgiShaderStageTessellationControl;
  extern const pxr::HgiShaderStageBits HgiShaderStageTessellationEval;
  extern const pxr::HgiShaderStageBits HgiShaderStageGeometry;
  extern const pxr::HgiShaderStageBits HgiShaderStagePostTessellationControl;
  extern const pxr::HgiShaderStageBits HgiShaderStagePostTessellationVertex;
  extern const pxr::HgiShaderStageBits HgiShaderStageCustomBitsBegin;
}
namespace Overlay {
  extern const pxr::HgiBindResourceType HgiBindResourceTypeSampler;
  extern const pxr::HgiBindResourceType HgiBindResourceTypeSampledImage;
  extern const pxr::HgiBindResourceType HgiBindResourceTypeCombinedSamplerImage;
  extern const pxr::HgiBindResourceType HgiBindResourceTypeStorageImage;
  extern const pxr::HgiBindResourceType HgiBindResourceTypeUniformBuffer;
  extern const pxr::HgiBindResourceType HgiBindResourceTypeStorageBuffer;
  extern const pxr::HgiBindResourceType HgiBindResourceTypeTessFactors;
  extern const pxr::HgiBindResourceType HgiBindResourceTypeCount;
}
namespace Overlay {
  extern const pxr::HgiPolygonMode HgiPolygonModeFill;
  extern const pxr::HgiPolygonMode HgiPolygonModeLine;
  extern const pxr::HgiPolygonMode HgiPolygonModePoint;
  extern const pxr::HgiPolygonMode HgiPolygonModeCount;
}
namespace Overlay {
  extern const pxr::HgiCullMode HgiCullModeNone;
  extern const pxr::HgiCullMode HgiCullModeFront;
  extern const pxr::HgiCullMode HgiCullModeBack;
  extern const pxr::HgiCullMode HgiCullModeFrontAndBack;
  extern const pxr::HgiCullMode HgiCullModeCount;
}
namespace Overlay {
  extern const pxr::HgiWinding HgiWindingClockwise;
  extern const pxr::HgiWinding HgiWindingCounterClockwise;
  extern const pxr::HgiWinding HgiWindingCount;
}
namespace Overlay {
  extern const pxr::HgiBlendOp HgiBlendOpAdd;
  extern const pxr::HgiBlendOp HgiBlendOpSubtract;
  extern const pxr::HgiBlendOp HgiBlendOpReverseSubtract;
  extern const pxr::HgiBlendOp HgiBlendOpMin;
  extern const pxr::HgiBlendOp HgiBlendOpMax;
  extern const pxr::HgiBlendOp HgiBlendOpCount;
}
namespace Overlay {
  extern const pxr::HgiBlendFactor HgiBlendFactorZero;
  extern const pxr::HgiBlendFactor HgiBlendFactorOne;
  extern const pxr::HgiBlendFactor HgiBlendFactorSrcColor;
  extern const pxr::HgiBlendFactor HgiBlendFactorOneMinusSrcColor;
  extern const pxr::HgiBlendFactor HgiBlendFactorDstColor;
  extern const pxr::HgiBlendFactor HgiBlendFactorOneMinusDstColor;
  extern const pxr::HgiBlendFactor HgiBlendFactorSrcAlpha;
  extern const pxr::HgiBlendFactor HgiBlendFactorOneMinusSrcAlpha;
  extern const pxr::HgiBlendFactor HgiBlendFactorDstAlpha;
  extern const pxr::HgiBlendFactor HgiBlendFactorOneMinusDstAlpha;
  extern const pxr::HgiBlendFactor HgiBlendFactorConstantColor;
  extern const pxr::HgiBlendFactor HgiBlendFactorOneMinusConstantColor;
  extern const pxr::HgiBlendFactor HgiBlendFactorConstantAlpha;
  extern const pxr::HgiBlendFactor HgiBlendFactorOneMinusConstantAlpha;
  extern const pxr::HgiBlendFactor HgiBlendFactorSrcAlphaSaturate;
  extern const pxr::HgiBlendFactor HgiBlendFactorSrc1Color;
  extern const pxr::HgiBlendFactor HgiBlendFactorOneMinusSrc1Color;
  extern const pxr::HgiBlendFactor HgiBlendFactorSrc1Alpha;
  extern const pxr::HgiBlendFactor HgiBlendFactorOneMinusSrc1Alpha;
  extern const pxr::HgiBlendFactor HgiBlendFactorCount;
}
namespace Overlay {
  extern const pxr::HgiColorMaskBits HgiColorMaskRed;
  extern const pxr::HgiColorMaskBits HgiColorMaskGreen;
  extern const pxr::HgiColorMaskBits HgiColorMaskBlue;
  extern const pxr::HgiColorMaskBits HgiColorMaskAlpha;
}
namespace Overlay {
  extern const pxr::HgiCompareFunction HgiCompareFunctionNever;
  extern const pxr::HgiCompareFunction HgiCompareFunctionLess;
  extern const pxr::HgiCompareFunction HgiCompareFunctionEqual;
  extern const pxr::HgiCompareFunction HgiCompareFunctionLEqual;
  extern const pxr::HgiCompareFunction HgiCompareFunctionGreater;
  extern const pxr::HgiCompareFunction HgiCompareFunctionNotEqual;
  extern const pxr::HgiCompareFunction HgiCompareFunctionGEqual;
  extern const pxr::HgiCompareFunction HgiCompareFunctionAlways;
  extern const pxr::HgiCompareFunction HgiCompareFunctionCount;
}
namespace Overlay {
  extern const pxr::HgiStencilOp HgiStencilOpKeep;
  extern const pxr::HgiStencilOp HgiStencilOpZero;
  extern const pxr::HgiStencilOp HgiStencilOpReplace;
  extern const pxr::HgiStencilOp HgiStencilOpIncrementClamp;
  extern const pxr::HgiStencilOp HgiStencilOpDecrementClamp;
  extern const pxr::HgiStencilOp HgiStencilOpInvert;
  extern const pxr::HgiStencilOp HgiStencilOpIncrementWrap;
  extern const pxr::HgiStencilOp HgiStencilOpDecrementWrap;
  extern const pxr::HgiStencilOp HgiStencilOpCount;
}
namespace Overlay {
  extern const pxr::HgiComponentSwizzle HgiComponentSwizzleZero;
  extern const pxr::HgiComponentSwizzle HgiComponentSwizzleOne;
  extern const pxr::HgiComponentSwizzle HgiComponentSwizzleR;
  extern const pxr::HgiComponentSwizzle HgiComponentSwizzleG;
  extern const pxr::HgiComponentSwizzle HgiComponentSwizzleB;
  extern const pxr::HgiComponentSwizzle HgiComponentSwizzleA;
  extern const pxr::HgiComponentSwizzle HgiComponentSwizzleCount;
}
namespace Overlay {
  extern const pxr::HgiPrimitiveType HgiPrimitiveTypePointList;
  extern const pxr::HgiPrimitiveType HgiPrimitiveTypeLineList;
  extern const pxr::HgiPrimitiveType HgiPrimitiveTypeLineStrip;
  extern const pxr::HgiPrimitiveType HgiPrimitiveTypeTriangleList;
  extern const pxr::HgiPrimitiveType HgiPrimitiveTypePatchList;
  extern const pxr::HgiPrimitiveType HgiPrimitiveTypeLineListWithAdjacency;
  extern const pxr::HgiPrimitiveType HgiPrimitiveTypeCount;
}
namespace Overlay {
  extern const pxr::HgiVertexBufferStepFunction HgiVertexBufferStepFunctionConstant;
  extern const pxr::HgiVertexBufferStepFunction HgiVertexBufferStepFunctionPerVertex;
  extern const pxr::HgiVertexBufferStepFunction HgiVertexBufferStepFunctionPerInstance;
  extern const pxr::HgiVertexBufferStepFunction HgiVertexBufferStepFunctionPerPatch;
  extern const pxr::HgiVertexBufferStepFunction HgiVertexBufferStepFunctionPerPatchControlPoint;
  extern const pxr::HgiVertexBufferStepFunction HgiVertexBufferStepFunctionPerDrawCommand;
  extern const pxr::HgiVertexBufferStepFunction HgiVertexBufferStepFunctionCount;
}
namespace Overlay {
  extern const pxr::HgiSubmitWaitType HgiSubmitWaitTypeNoWait;
  extern const pxr::HgiSubmitWaitType HgiSubmitWaitTypeWaitUntilCompleted;
}
namespace Overlay {
  extern const pxr::HgiMemoryBarrierBits HgiMemoryBarrierNone;
  extern const pxr::HgiMemoryBarrierBits HgiMemoryBarrierAll;
}
namespace Overlay {
  extern const pxr::HgiBindingType HgiBindingTypeValue;
  extern const pxr::HgiBindingType HgiBindingTypeUniformValue;
  extern const pxr::HgiBindingType HgiBindingTypeArray;
  extern const pxr::HgiBindingType HgiBindingTypeUniformArray;
  extern const pxr::HgiBindingType HgiBindingTypePointer;
}
namespace Overlay {
  extern const pxr::HgiInterpolationType HgiInterpolationDefault;
  extern const pxr::HgiInterpolationType HgiInterpolationFlat;
  extern const pxr::HgiInterpolationType HgiInterpolationNoPerspective;
}
namespace Overlay {
  extern const pxr::HgiSamplingType HgiSamplingDefault;
  extern const pxr::HgiSamplingType HgiSamplingCentroid;
  extern const pxr::HgiSamplingType HgiSamplingSample;
}
namespace Overlay {
  extern const pxr::HgiStorageType HgiStorageDefault;
  extern const pxr::HgiStorageType HgiStoragePatch;
}
namespace Overlay {
  extern const pxr::HgiShaderTextureType HgiShaderTextureTypeTexture;
  extern const pxr::HgiShaderTextureType HgiShaderTextureTypeShadowTexture;
  extern const pxr::HgiShaderTextureType HgiShaderTextureTypeArrayTexture;
}
namespace Overlay {
  extern const pxr::HgiComputeDispatch HgiComputeDispatchSerial;
  extern const pxr::HgiComputeDispatch HgiComputeDispatchConcurrent;
}
namespace Overlay {
  extern const pxr::HgiFormat HgiFormatInvalid;
  extern const pxr::HgiFormat HgiFormatUNorm8;
  extern const pxr::HgiFormat HgiFormatUNorm8Vec2;
  extern const pxr::HgiFormat HgiFormatUNorm8Vec4;
  extern const pxr::HgiFormat HgiFormatSNorm8;
  extern const pxr::HgiFormat HgiFormatSNorm8Vec2;
  extern const pxr::HgiFormat HgiFormatSNorm8Vec4;
  extern const pxr::HgiFormat HgiFormatFloat16;
  extern const pxr::HgiFormat HgiFormatFloat16Vec2;
  extern const pxr::HgiFormat HgiFormatFloat16Vec3;
  extern const pxr::HgiFormat HgiFormatFloat16Vec4;
  extern const pxr::HgiFormat HgiFormatFloat32;
  extern const pxr::HgiFormat HgiFormatFloat32Vec2;
  extern const pxr::HgiFormat HgiFormatFloat32Vec3;
  extern const pxr::HgiFormat HgiFormatFloat32Vec4;
  extern const pxr::HgiFormat HgiFormatInt16;
  extern const pxr::HgiFormat HgiFormatInt16Vec2;
  extern const pxr::HgiFormat HgiFormatInt16Vec3;
  extern const pxr::HgiFormat HgiFormatInt16Vec4;
  extern const pxr::HgiFormat HgiFormatUInt16;
  extern const pxr::HgiFormat HgiFormatUInt16Vec2;
  extern const pxr::HgiFormat HgiFormatUInt16Vec3;
  extern const pxr::HgiFormat HgiFormatUInt16Vec4;
  extern const pxr::HgiFormat HgiFormatInt32;
  extern const pxr::HgiFormat HgiFormatInt32Vec2;
  extern const pxr::HgiFormat HgiFormatInt32Vec3;
  extern const pxr::HgiFormat HgiFormatInt32Vec4;
  extern const pxr::HgiFormat HgiFormatUNorm8Vec4srgb;
  extern const pxr::HgiFormat HgiFormatBC6FloatVec3;
  extern const pxr::HgiFormat HgiFormatBC6UFloatVec3;
  extern const pxr::HgiFormat HgiFormatBC7UNorm8Vec4;
  extern const pxr::HgiFormat HgiFormatBC7UNorm8Vec4srgb;
  extern const pxr::HgiFormat HgiFormatBC1UNorm8Vec4;
  extern const pxr::HgiFormat HgiFormatBC3UNorm8Vec4;
  extern const pxr::HgiFormat HgiFormatFloat32UInt8;
  extern const pxr::HgiFormat HgiFormatPackedInt1010102;
  extern const pxr::HgiFormat HgiFormatCount;
}
namespace Overlay {
  namespace HgiShaderFunctionTessellationDesc {
    namespace PatchType {
      extern const pxr::HgiShaderFunctionTessellationDesc::PatchType Triangles;
      extern const pxr::HgiShaderFunctionTessellationDesc::PatchType Quads;
      extern const pxr::HgiShaderFunctionTessellationDesc::PatchType Isolines;
    }
  }
}
namespace Overlay {
  namespace HgiShaderFunctionTessellationDesc {
    namespace Spacing {
      extern const pxr::HgiShaderFunctionTessellationDesc::Spacing Equal;
      extern const pxr::HgiShaderFunctionTessellationDesc::Spacing FractionalEven;
      extern const pxr::HgiShaderFunctionTessellationDesc::Spacing FractionalOdd;
    }
  }
}
namespace Overlay {
  namespace HgiShaderFunctionTessellationDesc {
    namespace Ordering {
      extern const pxr::HgiShaderFunctionTessellationDesc::Ordering CW;
      extern const pxr::HgiShaderFunctionTessellationDesc::Ordering CCW;
    }
  }
}
namespace Overlay {
  namespace HgiShaderFunctionGeometryDesc {
    namespace InPrimitiveType {
      extern const pxr::HgiShaderFunctionGeometryDesc::InPrimitiveType Points;
      extern const pxr::HgiShaderFunctionGeometryDesc::InPrimitiveType Lines;
      extern const pxr::HgiShaderFunctionGeometryDesc::InPrimitiveType LinesAdjacency;
      extern const pxr::HgiShaderFunctionGeometryDesc::InPrimitiveType Triangles;
      extern const pxr::HgiShaderFunctionGeometryDesc::InPrimitiveType TrianglesAdjacency;
    }
  }
}
namespace Overlay {
  namespace HgiShaderFunctionGeometryDesc {
    namespace OutPrimitiveType {
      extern const pxr::HgiShaderFunctionGeometryDesc::OutPrimitiveType Points;
      extern const pxr::HgiShaderFunctionGeometryDesc::OutPrimitiveType LineStrip;
      extern const pxr::HgiShaderFunctionGeometryDesc::OutPrimitiveType TriangleStrip;
    }
  }
}
namespace Overlay {
  namespace HgiTessellationState {
    extern const pxr::HgiTessellationState::PatchType Triangle;
    extern const pxr::HgiTessellationState::PatchType Quad;
    extern const pxr::HgiTessellationState::PatchType Isoline;
  }
}
namespace Overlay {
  namespace HgiTessellationState {
    extern const pxr::HgiTessellationState::TessFactorMode Constant;
    extern const pxr::HgiTessellationState::TessFactorMode TessControl;
    extern const pxr::HgiTessellationState::TessFactorMode TessVertex;
  }
}
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && __has_include(<Metal/Metal.h>)
namespace Overlay {
  extern const pxr::HgiMetalArgumentIndex HgiMetalArgumentIndexICB;
  extern const pxr::HgiMetalArgumentIndex HgiMetalArgumentIndexConstants;
  extern const pxr::HgiMetalArgumentIndex HgiMetalArgumentIndexSamplers;
  extern const pxr::HgiMetalArgumentIndex HgiMetalArgumentIndexTextures;
  extern const pxr::HgiMetalArgumentIndex HgiMetalArgumentIndexBuffers;
}
namespace Overlay {
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetBufferVS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetBufferFS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetSamplerVS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetSamplerFS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetTextureVS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetTextureFS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetBufferCS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetSamplerCS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetTextureCS;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetConstants;
  extern const pxr::HgiMetalArgumentOffset HgiMetalArgumentOffsetSize;
}
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT && __has_include(<Metal/Metal.h>)
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
namespace Overlay {
  extern const pxr::HdWrap HdWrapClamp;
  extern const pxr::HdWrap HdWrapRepeat;
  extern const pxr::HdWrap HdWrapBlack;
  extern const pxr::HdWrap HdWrapMirror;
  extern const pxr::HdWrap HdWrapNoOpinion;
  extern const pxr::HdWrap HdWrapLegacyNoOpinionFallbackRepeat;
  extern const pxr::HdWrap HdWrapUseMetadata;
  extern const pxr::HdWrap HdWrapLegacy;
}
namespace Overlay {
  extern const pxr::HdMinFilter HdMinFilterNearest;
  extern const pxr::HdMinFilter HdMinFilterLinear;
  extern const pxr::HdMinFilter HdMinFilterNearestMipmapNearest;
  extern const pxr::HdMinFilter HdMinFilterLinearMipmapNearest;
  extern const pxr::HdMinFilter HdMinFilterNearestMipmapLinear;
  extern const pxr::HdMinFilter HdMinFilterLinearMipmapLinear;
}
namespace Overlay {
  extern const pxr::HdMagFilter HdMagFilterNearest;
  extern const pxr::HdMagFilter HdMagFilterLinear;
}
namespace Overlay {
  extern const pxr::HdBorderColor HdBorderColorTransparentBlack;
  extern const pxr::HdBorderColor HdBorderColorOpaqueBlack;
  extern const pxr::HdBorderColor HdBorderColorOpaqueWhite;
}
namespace Overlay {
  extern const pxr::HdType HdTypeInvalid;
  extern const pxr::HdType HdTypeBool;
  extern const pxr::HdType HdTypeUInt8;
  extern const pxr::HdType HdTypeUInt16;
  extern const pxr::HdType HdTypeInt8;
  extern const pxr::HdType HdTypeInt16;
  extern const pxr::HdType HdTypeInt32;
  extern const pxr::HdType HdTypeInt32Vec2;
  extern const pxr::HdType HdTypeInt32Vec3;
  extern const pxr::HdType HdTypeInt32Vec4;
  extern const pxr::HdType HdTypeUInt32;
  extern const pxr::HdType HdTypeUInt32Vec2;
  extern const pxr::HdType HdTypeUInt32Vec3;
  extern const pxr::HdType HdTypeUInt32Vec4;
  extern const pxr::HdType HdTypeFloat;
  extern const pxr::HdType HdTypeFloatVec2;
  extern const pxr::HdType HdTypeFloatVec3;
  extern const pxr::HdType HdTypeFloatVec4;
  extern const pxr::HdType HdTypeFloatMat3;
  extern const pxr::HdType HdTypeFloatMat4;
  extern const pxr::HdType HdTypeDouble;
  extern const pxr::HdType HdTypeDoubleVec2;
  extern const pxr::HdType HdTypeDoubleVec3;
  extern const pxr::HdType HdTypeDoubleVec4;
  extern const pxr::HdType HdTypeDoubleMat3;
  extern const pxr::HdType HdTypeDoubleMat4;
  extern const pxr::HdType HdTypeHalfFloat;
  extern const pxr::HdType HdTypeHalfFloatVec2;
  extern const pxr::HdType HdTypeHalfFloatVec3;
  extern const pxr::HdType HdTypeHalfFloatVec4;
  extern const pxr::HdType HdTypeInt32_2_10_10_10_REV;
  extern const pxr::HdType HdTypeCount;
}
namespace Overlay {
  extern const pxr::HdFormat HdFormatInvalid;
  extern const pxr::HdFormat HdFormatUNorm8;
  extern const pxr::HdFormat HdFormatUNorm8Vec2;
  extern const pxr::HdFormat HdFormatUNorm8Vec3;
  extern const pxr::HdFormat HdFormatUNorm8Vec4;
  extern const pxr::HdFormat HdFormatSNorm8;
  extern const pxr::HdFormat HdFormatSNorm8Vec2;
  extern const pxr::HdFormat HdFormatSNorm8Vec3;
  extern const pxr::HdFormat HdFormatSNorm8Vec4;
  extern const pxr::HdFormat HdFormatFloat16;
  extern const pxr::HdFormat HdFormatFloat16Vec2;
  extern const pxr::HdFormat HdFormatFloat16Vec3;
  extern const pxr::HdFormat HdFormatFloat16Vec4;
  extern const pxr::HdFormat HdFormatFloat32;
  extern const pxr::HdFormat HdFormatFloat32Vec2;
  extern const pxr::HdFormat HdFormatFloat32Vec3;
  extern const pxr::HdFormat HdFormatFloat32Vec4;
  extern const pxr::HdFormat HdFormatInt16;
  extern const pxr::HdFormat HdFormatInt16Vec2;
  extern const pxr::HdFormat HdFormatInt16Vec3;
  extern const pxr::HdFormat HdFormatInt16Vec4;
  extern const pxr::HdFormat HdFormatUInt16;
  extern const pxr::HdFormat HdFormatUInt16Vec2;
  extern const pxr::HdFormat HdFormatUInt16Vec3;
  extern const pxr::HdFormat HdFormatUInt16Vec4;
  extern const pxr::HdFormat HdFormatInt32;
  extern const pxr::HdFormat HdFormatInt32Vec2;
  extern const pxr::HdFormat HdFormatInt32Vec3;
  extern const pxr::HdFormat HdFormatInt32Vec4;
  extern const pxr::HdFormat HdFormatFloat32UInt8;
  extern const pxr::HdFormat HdFormatCount;
}
namespace Overlay {
  extern const pxr::HdCompareFunction HdCmpFuncNever;
  extern const pxr::HdCompareFunction HdCmpFuncLess;
  extern const pxr::HdCompareFunction HdCmpFuncEqual;
  extern const pxr::HdCompareFunction HdCmpFuncLEqual;
  extern const pxr::HdCompareFunction HdCmpFuncGreater;
  extern const pxr::HdCompareFunction HdCmpFuncNotEqual;
  extern const pxr::HdCompareFunction HdCmpFuncGEqual;
  extern const pxr::HdCompareFunction HdCmpFuncAlways;
  extern const pxr::HdCompareFunction HdCmpFuncLast;
}
namespace Overlay {
  extern const pxr::HdStencilOp HdStencilOpKeep;
  extern const pxr::HdStencilOp HdStencilOpZero;
  extern const pxr::HdStencilOp HdStencilOpReplace;
  extern const pxr::HdStencilOp HdStencilOpIncrement;
  extern const pxr::HdStencilOp HdStencilOpIncrementWrap;
  extern const pxr::HdStencilOp HdStencilOpDecrement;
  extern const pxr::HdStencilOp HdStencilOpDecrementWrap;
  extern const pxr::HdStencilOp HdStencilOpInvert;
  extern const pxr::HdStencilOp HdStencilOpLast;
}
namespace Overlay {
  extern const pxr::HdBlendOp HdBlendOpAdd;
  extern const pxr::HdBlendOp HdBlendOpSubtract;
  extern const pxr::HdBlendOp HdBlendOpReverseSubtract;
  extern const pxr::HdBlendOp HdBlendOpMin;
  extern const pxr::HdBlendOp HdBlendOpMax;
  extern const pxr::HdBlendOp HdBlendOpLast;
}
namespace Overlay {
  extern const pxr::HdBlendFactor HdBlendFactorZero;
  extern const pxr::HdBlendFactor HdBlendFactorOne;
  extern const pxr::HdBlendFactor HdBlendFactorSrcColor;
  extern const pxr::HdBlendFactor HdBlendFactorOneMinusSrcColor;
  extern const pxr::HdBlendFactor HdBlendFactorDstColor;
  extern const pxr::HdBlendFactor HdBlendFactorOneMinusDstColor;
  extern const pxr::HdBlendFactor HdBlendFactorSrcAlpha;
  extern const pxr::HdBlendFactor HdBlendFactorOneMinusSrcAlpha;
  extern const pxr::HdBlendFactor HdBlendFactorDstAlpha;
  extern const pxr::HdBlendFactor HdBlendFactorOneMinusDstAlpha;
  extern const pxr::HdBlendFactor HdBlendFactorConstantColor;
  extern const pxr::HdBlendFactor HdBlendFactorOneMinusConstantColor;
  extern const pxr::HdBlendFactor HdBlendFactorConstantAlpha;
  extern const pxr::HdBlendFactor HdBlendFactorOneMinusConstantAlpha;
  extern const pxr::HdBlendFactor HdBlendFactorSrcAlphaSaturate;
  extern const pxr::HdBlendFactor HdBlendFactorSrc1Color;
  extern const pxr::HdBlendFactor HdBlendFactorOneMinusSrc1Color;
  extern const pxr::HdBlendFactor HdBlendFactorSrc1Alpha;
  extern const pxr::HdBlendFactor HdBlendFactorOneMinusSrc1Alpha;
  extern const pxr::HdBlendFactor HdBlendFactorLast;
}
namespace Overlay {
  extern const pxr::HdCullStyle HdCullStyleDontCare;
  extern const pxr::HdCullStyle HdCullStyleNothing;
  extern const pxr::HdCullStyle HdCullStyleBack;
  extern const pxr::HdCullStyle HdCullStyleFront;
  extern const pxr::HdCullStyle HdCullStyleBackUnlessDoubleSided;
  extern const pxr::HdCullStyle HdCullStyleFrontUnlessDoubleSided;
}
namespace Overlay {
  extern const pxr::HdPolygonMode HdPolygonModeFill;
  extern const pxr::HdPolygonMode HdPolygonModeLine;
}
namespace Overlay {
  extern const pxr::HdMeshGeomStyle HdMeshGeomStyleInvalid;
  extern const pxr::HdMeshGeomStyle HdMeshGeomStyleSurf;
  extern const pxr::HdMeshGeomStyle HdMeshGeomStyleEdgeOnly;
  extern const pxr::HdMeshGeomStyle HdMeshGeomStyleEdgeOnSurf;
  extern const pxr::HdMeshGeomStyle HdMeshGeomStyleHull;
  extern const pxr::HdMeshGeomStyle HdMeshGeomStyleHullEdgeOnly;
  extern const pxr::HdMeshGeomStyle HdMeshGeomStyleHullEdgeOnSurf;
  extern const pxr::HdMeshGeomStyle HdMeshGeomStylePoints;
}
namespace Overlay {
  extern const pxr::HdBasisCurvesGeomStyle HdBasisCurvesGeomStyleInvalid;
  extern const pxr::HdBasisCurvesGeomStyle HdBasisCurvesGeomStyleWire;
  extern const pxr::HdBasisCurvesGeomStyle HdBasisCurvesGeomStylePatch;
  extern const pxr::HdBasisCurvesGeomStyle HdBasisCurvesGeomStylePoints;
}
namespace Overlay {
  extern const pxr::HdPointsGeomStyle HdPointsGeomStyleInvalid;
  extern const pxr::HdPointsGeomStyle HdPointsGeomStylePoints;
}
namespace Overlay {
  extern const pxr::HdInterpolation HdInterpolationConstant;
  extern const pxr::HdInterpolation HdInterpolationUniform;
  extern const pxr::HdInterpolation HdInterpolationVarying;
  extern const pxr::HdInterpolation HdInterpolationVertex;
  extern const pxr::HdInterpolation HdInterpolationFaceVarying;
  extern const pxr::HdInterpolation HdInterpolationInstance;
  extern const pxr::HdInterpolation HdInterpolationCount;
}
namespace Overlay {
  extern const pxr::HdDepthPriority HdDepthPriorityNearest;
  extern const pxr::HdDepthPriority HdDepthPriorityFarthest;
  extern const pxr::HdDepthPriority HdDepthPriorityCount;
}
namespace Overlay {
  extern const pxr::HdBufferArrayUsageHintBits HdBufferArrayUsageHintBitsImmutable;
  extern const pxr::HdBufferArrayUsageHintBits HdBufferArrayUsageHintBitsSizeVarying;
  extern const pxr::HdBufferArrayUsageHintBits HdBufferArrayUsageHintBitsUniform;
  extern const pxr::HdBufferArrayUsageHintBits HdBufferArrayUsageHintBitsStorage;
  extern const pxr::HdBufferArrayUsageHintBits HdBufferArrayUsageHintBitsVertex;
  extern const pxr::HdBufferArrayUsageHintBits HdBufferArrayUsageHintBitsIndex;
}
namespace Overlay {
  namespace HdGeomSubset {
    extern const pxr::HdGeomSubset::Type TypeFaceSet;
  }
}
namespace Overlay {
  namespace HdCamera {
    extern const pxr::HdCamera::DirtyBits Clean;
    extern const pxr::HdCamera::DirtyBits DirtyTransform;
    extern const pxr::HdCamera::DirtyBits DirtyParams;
    extern const pxr::HdCamera::DirtyBits DirtyClipPlanes;
    extern const pxr::HdCamera::DirtyBits DirtyWindowPolicy;
    extern const pxr::HdCamera::DirtyBits AllDirty;
  }
}
namespace Overlay {
  namespace HdCamera {
    extern const pxr::HdCamera::Projection Perspective;
    extern const pxr::HdCamera::Projection Orthographic;
  }
}
namespace Overlay {
  namespace HdCollectionExpressionEvaluator {
    extern const pxr::HdCollectionExpressionEvaluator::MatchKind MatchAll;
    extern const pxr::HdCollectionExpressionEvaluator::MatchKind ShallowestMatches;
    extern const pxr::HdCollectionExpressionEvaluator::MatchKind ShallowestMatchesAndAllDescendants;
  }
}
namespace Overlay {
  namespace HdCoordSys {
    extern const pxr::HdCoordSys::DirtyBits Clean;
    extern const pxr::HdCoordSys::DirtyBits DirtyName;
    extern const pxr::HdCoordSys::DirtyBits DirtyTransform;
    extern const pxr::HdCoordSys::DirtyBits AllDirty;
  }
}
namespace Overlay {
  namespace HdField {
    extern const pxr::HdField::DirtyBits Clean;
    extern const pxr::HdField::DirtyBits DirtyTransform;
    extern const pxr::HdField::DirtyBits DirtyParams;
    extern const pxr::HdField::DirtyBits AllDirty;
  }
}
namespace Overlay {
  namespace HdLight {
    extern const pxr::HdLight::DirtyBits Clean;
    extern const pxr::HdLight::DirtyBits DirtyTransform;
    extern const pxr::HdLight::DirtyBits DirtyParams;
    extern const pxr::HdLight::DirtyBits DirtyShadowParams;
    extern const pxr::HdLight::DirtyBits DirtyCollection;
    extern const pxr::HdLight::DirtyBits DirtyResource;
    extern const pxr::HdLight::DirtyBits DirtyInstancer;
    extern const pxr::HdLight::DirtyBits AllDirty;
  }
}
namespace Overlay {
  namespace HdRenderBuffer {
    extern const pxr::HdRenderBuffer::DirtyBits Clean;
    extern const pxr::HdRenderBuffer::DirtyBits DirtyDescription;
    extern const pxr::HdRenderBuffer::DirtyBits AllDirty;
  }
}
namespace Overlay {
  namespace HdRenderPassState {
    extern const pxr::HdRenderPassState::ColorMask ColorMaskNone;
    extern const pxr::HdRenderPassState::ColorMask ColorMaskRGB;
    extern const pxr::HdRenderPassState::ColorMask ColorMaskRGBA;
  }
}
namespace Overlay {
  namespace HdSceneIndexPluginRegistry {
    extern const pxr::HdSceneIndexPluginRegistry::InsertionOrder InsertionOrderAtStart;
    extern const pxr::HdSceneIndexPluginRegistry::InsertionOrder InsertionOrderAtEnd;
  }
}
namespace Overlay {
  namespace HdSelection {
    extern const pxr::HdSelection::HighlightMode HighlightModeSelect;
    extern const pxr::HdSelection::HighlightMode HighlightModeLocate;
    extern const pxr::HdSelection::HighlightMode HighlightModeCount;
  }
}
namespace Overlay {
  namespace HdGpGenerativeProcedural {
    extern const pxr::HdGpGenerativeProcedural::AsyncState Continuing;
    extern const pxr::HdGpGenerativeProcedural::AsyncState Finished;
    extern const pxr::HdGpGenerativeProcedural::AsyncState ContinuingWithNewChanges;
    extern const pxr::HdGpGenerativeProcedural::AsyncState FinishedWithNewChanges;
  }
}
namespace Overlay {
  namespace HdStBinding {
    extern const pxr::HdStBinding::Type UNKNOWN;
    extern const pxr::HdStBinding::Type DISPATCH;
    extern const pxr::HdStBinding::Type DRAW_INDEX;
    extern const pxr::HdStBinding::Type DRAW_INDEX_INSTANCE;
    extern const pxr::HdStBinding::Type DRAW_INDEX_INSTANCE_ARRAY;
    extern const pxr::HdStBinding::Type VERTEX_ATTR;
    extern const pxr::HdStBinding::Type INDEX_ATTR;
    extern const pxr::HdStBinding::Type SSBO;
    extern const pxr::HdStBinding::Type BINDLESS_SSBO_RANGE;
    extern const pxr::HdStBinding::Type UBO;
    extern const pxr::HdStBinding::Type BINDLESS_UNIFORM;
    extern const pxr::HdStBinding::Type UNIFORM;
    extern const pxr::HdStBinding::Type UNIFORM_ARRAY;
    extern const pxr::HdStBinding::Type FALLBACK;
    extern const pxr::HdStBinding::Type TEXTURE_2D;
    extern const pxr::HdStBinding::Type ARRAY_OF_TEXTURE_2D;
    extern const pxr::HdStBinding::Type TEXTURE_FIELD;
    extern const pxr::HdStBinding::Type TEXTURE_UDIM_ARRAY;
    extern const pxr::HdStBinding::Type TEXTURE_UDIM_LAYOUT;
    extern const pxr::HdStBinding::Type TEXTURE_PTEX_TEXEL;
    extern const pxr::HdStBinding::Type TEXTURE_PTEX_LAYOUT;
    extern const pxr::HdStBinding::Type BINDLESS_TEXTURE_2D;
    extern const pxr::HdStBinding::Type BINDLESS_ARRAY_OF_TEXTURE_2D;
    extern const pxr::HdStBinding::Type BINDLESS_TEXTURE_FIELD;
    extern const pxr::HdStBinding::Type BINDLESS_TEXTURE_UDIM_ARRAY;
    extern const pxr::HdStBinding::Type BINDLESS_TEXTURE_UDIM_LAYOUT;
    extern const pxr::HdStBinding::Type BINDLESS_TEXTURE_PTEX_TEXEL;
    extern const pxr::HdStBinding::Type BINDLESS_TEXTURE_PTEX_LAYOUT;
    extern const pxr::HdStBinding::Type PRIMVAR_REDIRECT;
    extern const pxr::HdStBinding::Type FIELD_REDIRECT;
    extern const pxr::HdStBinding::Type TRANSFORM_2D;
  }
}
namespace Overlay {
  namespace HdStBinding {
    extern const pxr::HdStBinding::Location NOT_EXIST;
  }
}
namespace Overlay {
  namespace HdStTextureType {
    extern const pxr::HdStTextureType Uv;
    extern const pxr::HdStTextureType Field;
    extern const pxr::HdStTextureType Ptex;
    extern const pxr::HdStTextureType Udim;
  }
}
namespace Overlay {
  extern const pxr::HdStComputeQueue HdStComputeQueueZero;
  extern const pxr::HdStComputeQueue HdStComputeQueueOne;
  extern const pxr::HdStComputeQueue HdStComputeQueueTwo;
  extern const pxr::HdStComputeQueue HdStComputeQueueThree;
  extern const pxr::HdStComputeQueue HdStComputeQueueCount;
}
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
namespace Overlay {
  namespace UsdImagingPropertyInvalidationType {
    extern const pxr::UsdImagingPropertyInvalidationType Update;
    extern const pxr::UsdImagingPropertyInvalidationType Resync;
  }
}
namespace Overlay {
  namespace UsdImagingPrimAdapter {
    extern const pxr::UsdImagingPrimAdapter::PopulationMode RepresentsSelf;
    extern const pxr::UsdImagingPrimAdapter::PopulationMode RepresentsSelfAndDescendents;
    extern const pxr::UsdImagingPrimAdapter::PopulationMode RepresentedByAncestor;
  }
}
namespace Overlay {
  namespace UsdImagingGLDrawMode {
    extern const pxr::UsdImagingGLDrawMode DRAW_POINTS;
    extern const pxr::UsdImagingGLDrawMode DRAW_WIREFRAME;
    extern const pxr::UsdImagingGLDrawMode DRAW_WIREFRAME_ON_SURFACE;
    extern const pxr::UsdImagingGLDrawMode DRAW_SHADED_FLAT;
    extern const pxr::UsdImagingGLDrawMode DRAW_SHADED_SMOOTH;
    extern const pxr::UsdImagingGLDrawMode DRAW_GEOM_ONLY;
    extern const pxr::UsdImagingGLDrawMode DRAW_GEOM_FLAT;
    extern const pxr::UsdImagingGLDrawMode DRAW_GEOM_SMOOTH;
  }
}
namespace Overlay {
  namespace UsdImagingGLCullStyle {
    extern const pxr::UsdImagingGLCullStyle CULL_STYLE_NO_OPINION;
    extern const pxr::UsdImagingGLCullStyle CULL_STYLE_NOTHING;
    extern const pxr::UsdImagingGLCullStyle CULL_STYLE_BACK;
    extern const pxr::UsdImagingGLCullStyle CULL_STYLE_FRONT;
    extern const pxr::UsdImagingGLCullStyle CULL_STYLE_BACK_UNLESS_DOUBLE_SIDED;
    extern const pxr::UsdImagingGLCullStyle CULL_STYLE_COUNT;
  }
}
namespace Overlay {
  namespace UsdImagingGLRendererSetting {
    extern const pxr::UsdImagingGLRendererSetting::Type TYPE_FLAG;
    extern const pxr::UsdImagingGLRendererSetting::Type TYPE_INT;
    extern const pxr::UsdImagingGLRendererSetting::Type TYPE_FLOAT;
    extern const pxr::UsdImagingGLRendererSetting::Type TYPE_STRING;
  }
}
#endif // #if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
#endif /* SWIFTUSD_GENERATED_ENUMS_H */
