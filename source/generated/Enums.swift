//===----------------------------------------------------------------------===//
// This source file is part of github.com/apple/SwiftUsd
//
// Copyright Â© 2025 Apple Inc. and the SwiftUsd project authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//===----------------------------------------------------------------------===//

// This file was generated by SwiftUsd-ast-answerer. Do not edit!


extension pxr.ArchMemAdvice {
  @_documentation(visibility: internal) public static var ArchMemAdviceNormal: pxr.ArchMemAdvice { Overlay.ArchMemAdviceNormal }
  @_documentation(visibility: internal) public static var ArchMemAdviceWillNeed: pxr.ArchMemAdvice { Overlay.ArchMemAdviceWillNeed }
  @_documentation(visibility: internal) public static var ArchMemAdviceDontNeed: pxr.ArchMemAdvice { Overlay.ArchMemAdviceDontNeed }
  @_documentation(visibility: internal) public static var ArchMemAdviceRandomAccess: pxr.ArchMemAdvice { Overlay.ArchMemAdviceRandomAccess }
}
extension pxr.ArchFileAdvice {
  @_documentation(visibility: internal) public static var ArchFileAdviceNormal: pxr.ArchFileAdvice { Overlay.ArchFileAdviceNormal }
  @_documentation(visibility: internal) public static var ArchFileAdviceWillNeed: pxr.ArchFileAdvice { Overlay.ArchFileAdviceWillNeed }
  @_documentation(visibility: internal) public static var ArchFileAdviceDontNeed: pxr.ArchFileAdvice { Overlay.ArchFileAdviceDontNeed }
  @_documentation(visibility: internal) public static var ArchFileAdviceRandomAccess: pxr.ArchFileAdvice { Overlay.ArchFileAdviceRandomAccess }
}
extension pxr.ArchMemoryProtection {
  @_documentation(visibility: internal) public static var ArchProtectNoAccess: pxr.ArchMemoryProtection { Overlay.ArchProtectNoAccess }
  @_documentation(visibility: internal) public static var ArchProtectReadOnly: pxr.ArchMemoryProtection { Overlay.ArchProtectReadOnly }
  @_documentation(visibility: internal) public static var ArchProtectReadWrite: pxr.ArchMemoryProtection { Overlay.ArchProtectReadWrite }
  @_documentation(visibility: internal) public static var ArchProtectReadWriteCopy: pxr.ArchMemoryProtection { Overlay.ArchProtectReadWriteCopy }
}
extension pxr.TfType.LegacyFlags {
  @_documentation(visibility: internal) public static var ABSTRACT: pxr.TfType.LegacyFlags { Overlay.TfType.ABSTRACT }
  @_documentation(visibility: internal) public static var CONCRETE: pxr.TfType.LegacyFlags { Overlay.TfType.CONCRETE }
  @_documentation(visibility: internal) public static var MANUFACTURABLE: pxr.TfType.LegacyFlags { Overlay.TfType.MANUFACTURABLE }
}
extension pxr.TfDiagnosticType {
  @_documentation(visibility: internal) public static var TF_DIAGNOSTIC_INVALID_TYPE: pxr.TfDiagnosticType { Overlay.TF_DIAGNOSTIC_INVALID_TYPE }
  @_documentation(visibility: internal) public static var TF_DIAGNOSTIC_CODING_ERROR_TYPE: pxr.TfDiagnosticType { Overlay.TF_DIAGNOSTIC_CODING_ERROR_TYPE }
  @_documentation(visibility: internal) public static var TF_DIAGNOSTIC_FATAL_CODING_ERROR_TYPE: pxr.TfDiagnosticType { Overlay.TF_DIAGNOSTIC_FATAL_CODING_ERROR_TYPE }
  @_documentation(visibility: internal) public static var TF_DIAGNOSTIC_RUNTIME_ERROR_TYPE: pxr.TfDiagnosticType { Overlay.TF_DIAGNOSTIC_RUNTIME_ERROR_TYPE }
  @_documentation(visibility: internal) public static var TF_DIAGNOSTIC_FATAL_ERROR_TYPE: pxr.TfDiagnosticType { Overlay.TF_DIAGNOSTIC_FATAL_ERROR_TYPE }
  @_documentation(visibility: internal) public static var TF_DIAGNOSTIC_NONFATAL_ERROR_TYPE: pxr.TfDiagnosticType { Overlay.TF_DIAGNOSTIC_NONFATAL_ERROR_TYPE }
  @_documentation(visibility: internal) public static var TF_DIAGNOSTIC_WARNING_TYPE: pxr.TfDiagnosticType { Overlay.TF_DIAGNOSTIC_WARNING_TYPE }
  @_documentation(visibility: internal) public static var TF_DIAGNOSTIC_STATUS_TYPE: pxr.TfDiagnosticType { Overlay.TF_DIAGNOSTIC_STATUS_TYPE }
  @_documentation(visibility: internal) public static var TF_APPLICATION_EXIT_TYPE: pxr.TfDiagnosticType { Overlay.TF_APPLICATION_EXIT_TYPE }
}
extension pxr.TfBits.Mode {
  @_documentation(visibility: internal) public static var All: pxr.TfBits.Mode { Overlay.TfBits.All }
  @_documentation(visibility: internal) public static var AllSet: pxr.TfBits.Mode { Overlay.TfBits.AllSet }
  @_documentation(visibility: internal) public static var AllUnset: pxr.TfBits.Mode { Overlay.TfBits.AllUnset }
}
extension pxr.TfCompressedBits.ComplementTagType {
  @_documentation(visibility: internal) public static var ComplementTag: pxr.TfCompressedBits.ComplementTagType { Overlay.TfCompressedBits.ComplementTag }
}
extension pxr.TfMallocTag.CallTree.PrintSetting {
  @_documentation(visibility: internal) public static var TREE: pxr.TfMallocTag.CallTree.PrintSetting { Overlay.TfMallocTag.CallTree.TREE }
  @_documentation(visibility: internal) public static var CALLSITES: pxr.TfMallocTag.CallTree.PrintSetting { Overlay.TfMallocTag.CallTree.CALLSITES }
  @_documentation(visibility: internal) public static var BOTH: pxr.TfMallocTag.CallTree.PrintSetting { Overlay.TfMallocTag.CallTree.BOTH }
}
extension pxr.TfRefPtrTracker.TraceType {
  @_documentation(visibility: internal) public static var Add: pxr.TfRefPtrTracker.TraceType { Overlay.TfRefPtrTracker.Add }
  @_documentation(visibility: internal) public static var Assign: pxr.TfRefPtrTracker.TraceType { Overlay.TfRefPtrTracker.Assign }
}
extension pxr.GfCamera.Projection {
  @_documentation(visibility: internal) public static var Perspective: pxr.GfCamera.Projection { Overlay.GfCamera.Perspective }
  @_documentation(visibility: internal) public static var Orthographic: pxr.GfCamera.Projection { Overlay.GfCamera.Orthographic }
}
extension pxr.GfCamera.FOVDirection {
  @_documentation(visibility: internal) public static var FOVHorizontal: pxr.GfCamera.FOVDirection { Overlay.GfCamera.FOVHorizontal }
  @_documentation(visibility: internal) public static var FOVVertical: pxr.GfCamera.FOVDirection { Overlay.GfCamera.FOVVertical }
}
extension pxr.GfFrustum.ProjectionType {
  @_documentation(visibility: internal) public static var Orthographic: pxr.GfFrustum.ProjectionType { Overlay.GfFrustum.Orthographic }
  @_documentation(visibility: internal) public static var Perspective: pxr.GfFrustum.ProjectionType { Overlay.GfFrustum.Perspective }
}
extension pxr.GfNumericCastFailureType {
  @_documentation(visibility: internal) public static var GfNumericCastPosOverflow: pxr.GfNumericCastFailureType { Overlay.GfNumericCastPosOverflow }
  @_documentation(visibility: internal) public static var GfNumericCastNegOverflow: pxr.GfNumericCastFailureType { Overlay.GfNumericCastNegOverflow }
  @_documentation(visibility: internal) public static var GfNumericCastNaN: pxr.GfNumericCastFailureType { Overlay.GfNumericCastNaN }
}
extension pxr.JsValue.`Type` {
  @_documentation(visibility: internal) public static var ObjectType: pxr.JsValue.`Type` { Overlay.JsValue.ObjectType }
  @_documentation(visibility: internal) public static var ArrayType: pxr.JsValue.`Type` { Overlay.JsValue.ArrayType }
  @_documentation(visibility: internal) public static var StringType: pxr.JsValue.`Type` { Overlay.JsValue.StringType }
  @_documentation(visibility: internal) public static var BoolType: pxr.JsValue.`Type` { Overlay.JsValue.BoolType }
  @_documentation(visibility: internal) public static var IntType: pxr.JsValue.`Type` { Overlay.JsValue.IntType }
  @_documentation(visibility: internal) public static var RealType: pxr.JsValue.`Type` { Overlay.JsValue.RealType }
  @_documentation(visibility: internal) public static var NullType: pxr.JsValue.`Type` { Overlay.JsValue.NullType }
}
extension pxr.TraceEvent.BeginTag {
  @_documentation(visibility: internal) public static var Begin: pxr.TraceEvent.BeginTag { Overlay.TraceEvent.Begin }
}
extension pxr.TraceEvent.EndTag {
  @_documentation(visibility: internal) public static var End: pxr.TraceEvent.EndTag { Overlay.TraceEvent.End }
}
extension pxr.TraceEvent.TimespanTag {
  @_documentation(visibility: internal) public static var Timespan: pxr.TraceEvent.TimespanTag { Overlay.TraceEvent.Timespan }
}
extension pxr.TraceEvent.MarkerTag {
  @_documentation(visibility: internal) public static var Marker: pxr.TraceEvent.MarkerTag { Overlay.TraceEvent.Marker }
}
extension pxr.TraceEvent.CounterDeltaTag {
  @_documentation(visibility: internal) public static var CounterDelta: pxr.TraceEvent.CounterDeltaTag { Overlay.TraceEvent.CounterDelta }
}
extension pxr.TraceEvent.CounterValueTag {
  @_documentation(visibility: internal) public static var CounterValue: pxr.TraceEvent.CounterValueTag { Overlay.TraceEvent.CounterValue }
}
extension pxr.TraceEvent.DataTag {
  @_documentation(visibility: internal) public static var Data: pxr.TraceEvent.DataTag { Overlay.TraceEvent.Data }
}
extension pxr.TsInterpMode {
  @_documentation(visibility: internal) public static var TsInterpValueBlock: pxr.TsInterpMode { Overlay.TsInterpValueBlock }
  @_documentation(visibility: internal) public static var TsInterpHeld: pxr.TsInterpMode { Overlay.TsInterpHeld }
  @_documentation(visibility: internal) public static var TsInterpLinear: pxr.TsInterpMode { Overlay.TsInterpLinear }
  @_documentation(visibility: internal) public static var TsInterpCurve: pxr.TsInterpMode { Overlay.TsInterpCurve }
}
extension pxr.TsCurveType {
  @_documentation(visibility: internal) public static var TsCurveTypeBezier: pxr.TsCurveType { Overlay.TsCurveTypeBezier }
  @_documentation(visibility: internal) public static var TsCurveTypeHermite: pxr.TsCurveType { Overlay.TsCurveTypeHermite }
}
extension pxr.TsExtrapMode {
  @_documentation(visibility: internal) public static var TsExtrapValueBlock: pxr.TsExtrapMode { Overlay.TsExtrapValueBlock }
  @_documentation(visibility: internal) public static var TsExtrapHeld: pxr.TsExtrapMode { Overlay.TsExtrapHeld }
  @_documentation(visibility: internal) public static var TsExtrapLinear: pxr.TsExtrapMode { Overlay.TsExtrapLinear }
  @_documentation(visibility: internal) public static var TsExtrapSloped: pxr.TsExtrapMode { Overlay.TsExtrapSloped }
  @_documentation(visibility: internal) public static var TsExtrapLoopRepeat: pxr.TsExtrapMode { Overlay.TsExtrapLoopRepeat }
  @_documentation(visibility: internal) public static var TsExtrapLoopReset: pxr.TsExtrapMode { Overlay.TsExtrapLoopReset }
  @_documentation(visibility: internal) public static var TsExtrapLoopOscillate: pxr.TsExtrapMode { Overlay.TsExtrapLoopOscillate }
}
extension pxr.TsSplineSampleSource {
  @_documentation(visibility: internal) public static var TsSourcePreExtrap: pxr.TsSplineSampleSource { Overlay.TsSourcePreExtrap }
  @_documentation(visibility: internal) public static var TsSourcePreExtrapLoop: pxr.TsSplineSampleSource { Overlay.TsSourcePreExtrapLoop }
  @_documentation(visibility: internal) public static var TsSourceInnerLoopPreEcho: pxr.TsSplineSampleSource { Overlay.TsSourceInnerLoopPreEcho }
  @_documentation(visibility: internal) public static var TsSourceInnerLoopProto: pxr.TsSplineSampleSource { Overlay.TsSourceInnerLoopProto }
  @_documentation(visibility: internal) public static var TsSourceInnerLoopPostEcho: pxr.TsSplineSampleSource { Overlay.TsSourceInnerLoopPostEcho }
  @_documentation(visibility: internal) public static var TsSourceKnotInterp: pxr.TsSplineSampleSource { Overlay.TsSourceKnotInterp }
  @_documentation(visibility: internal) public static var TsSourcePostExtrap: pxr.TsSplineSampleSource { Overlay.TsSourcePostExtrap }
  @_documentation(visibility: internal) public static var TsSourcePostExtrapLoop: pxr.TsSplineSampleSource { Overlay.TsSourcePostExtrapLoop }
}
extension pxr.TsTangentAlgorithm {
  @_documentation(visibility: internal) public static var TsTangentAlgorithmNone: pxr.TsTangentAlgorithm { Overlay.TsTangentAlgorithmNone }
  @_documentation(visibility: internal) public static var TsTangentAlgorithmCustom: pxr.TsTangentAlgorithm { Overlay.TsTangentAlgorithmCustom }
  @_documentation(visibility: internal) public static var TsTangentAlgorithmAutoEase: pxr.TsTangentAlgorithm { Overlay.TsTangentAlgorithmAutoEase }
}
extension pxr.TsAntiRegressionMode {
  @_documentation(visibility: internal) public static var TsAntiRegressionNone: pxr.TsAntiRegressionMode { Overlay.TsAntiRegressionNone }
  @_documentation(visibility: internal) public static var TsAntiRegressionContain: pxr.TsAntiRegressionMode { Overlay.TsAntiRegressionContain }
  @_documentation(visibility: internal) public static var TsAntiRegressionKeepRatio: pxr.TsAntiRegressionMode { Overlay.TsAntiRegressionKeepRatio }
  @_documentation(visibility: internal) public static var TsAntiRegressionKeepStart: pxr.TsAntiRegressionMode { Overlay.TsAntiRegressionKeepStart }
}
extension pxr.TsRegressionPreventer.InteractiveMode {
  @_documentation(visibility: internal) public static var ModeLimitActive: pxr.TsRegressionPreventer.InteractiveMode { Overlay.TsRegressionPreventer.ModeLimitActive }
  @_documentation(visibility: internal) public static var ModeLimitOpposite: pxr.TsRegressionPreventer.InteractiveMode { Overlay.TsRegressionPreventer.ModeLimitOpposite }
}
extension pxr.SdfSpecType {
  @_documentation(visibility: internal) public static var SdfSpecTypeUnknown: pxr.SdfSpecType { Overlay.SdfSpecTypeUnknown }
  @_documentation(visibility: internal) public static var SdfSpecTypeAttribute: pxr.SdfSpecType { Overlay.SdfSpecTypeAttribute }
  @_documentation(visibility: internal) public static var SdfSpecTypeConnection: pxr.SdfSpecType { Overlay.SdfSpecTypeConnection }
  @_documentation(visibility: internal) public static var SdfSpecTypeExpression: pxr.SdfSpecType { Overlay.SdfSpecTypeExpression }
  @_documentation(visibility: internal) public static var SdfSpecTypeMapper: pxr.SdfSpecType { Overlay.SdfSpecTypeMapper }
  @_documentation(visibility: internal) public static var SdfSpecTypeMapperArg: pxr.SdfSpecType { Overlay.SdfSpecTypeMapperArg }
  @_documentation(visibility: internal) public static var SdfSpecTypePrim: pxr.SdfSpecType { Overlay.SdfSpecTypePrim }
  @_documentation(visibility: internal) public static var SdfSpecTypePseudoRoot: pxr.SdfSpecType { Overlay.SdfSpecTypePseudoRoot }
  @_documentation(visibility: internal) public static var SdfSpecTypeRelationship: pxr.SdfSpecType { Overlay.SdfSpecTypeRelationship }
  @_documentation(visibility: internal) public static var SdfSpecTypeRelationshipTarget: pxr.SdfSpecType { Overlay.SdfSpecTypeRelationshipTarget }
  @_documentation(visibility: internal) public static var SdfSpecTypeVariant: pxr.SdfSpecType { Overlay.SdfSpecTypeVariant }
  @_documentation(visibility: internal) public static var SdfSpecTypeVariantSet: pxr.SdfSpecType { Overlay.SdfSpecTypeVariantSet }
  @_documentation(visibility: internal) public static var SdfNumSpecTypes: pxr.SdfSpecType { Overlay.SdfNumSpecTypes }
}
extension pxr.SdfSpecifier {
  @_documentation(visibility: internal) public static var SdfSpecifierDef: pxr.SdfSpecifier { Overlay.SdfSpecifierDef }
  @_documentation(visibility: internal) public static var SdfSpecifierOver: pxr.SdfSpecifier { Overlay.SdfSpecifierOver }
  @_documentation(visibility: internal) public static var SdfSpecifierClass: pxr.SdfSpecifier { Overlay.SdfSpecifierClass }
  @_documentation(visibility: internal) public static var SdfNumSpecifiers: pxr.SdfSpecifier { Overlay.SdfNumSpecifiers }
}
extension pxr.SdfPermission {
  @_documentation(visibility: internal) public static var SdfPermissionPublic: pxr.SdfPermission { Overlay.SdfPermissionPublic }
  @_documentation(visibility: internal) public static var SdfPermissionPrivate: pxr.SdfPermission { Overlay.SdfPermissionPrivate }
  @_documentation(visibility: internal) public static var SdfNumPermissions: pxr.SdfPermission { Overlay.SdfNumPermissions }
}
extension pxr.SdfVariability {
  @_documentation(visibility: internal) public static var SdfVariabilityVarying: pxr.SdfVariability { Overlay.SdfVariabilityVarying }
  @_documentation(visibility: internal) public static var SdfVariabilityUniform: pxr.SdfVariability { Overlay.SdfVariabilityUniform }
  @_documentation(visibility: internal) public static var SdfNumVariabilities: pxr.SdfVariability { Overlay.SdfNumVariabilities }
}
extension pxr.SdfAuthoringError {
  @_documentation(visibility: internal) public static var SdfAuthoringErrorUnrecognizedFields: pxr.SdfAuthoringError { Overlay.SdfAuthoringErrorUnrecognizedFields }
  @_documentation(visibility: internal) public static var SdfAuthoringErrorUnrecognizedSpecType: pxr.SdfAuthoringError { Overlay.SdfAuthoringErrorUnrecognizedSpecType }
}
extension pxr.SdfAngularUnit {
  @_documentation(visibility: internal) public static var SdfAngularUnitDegrees: pxr.SdfAngularUnit { Overlay.SdfAngularUnitDegrees }
  @_documentation(visibility: internal) public static var SdfAngularUnitRadians: pxr.SdfAngularUnit { Overlay.SdfAngularUnitRadians }
}
extension pxr.SdfDimensionlessUnit {
  @_documentation(visibility: internal) public static var SdfDimensionlessUnitPercent: pxr.SdfDimensionlessUnit { Overlay.SdfDimensionlessUnitPercent }
  @_documentation(visibility: internal) public static var SdfDimensionlessUnitDefault: pxr.SdfDimensionlessUnit { Overlay.SdfDimensionlessUnitDefault }
}
extension pxr.SdfLengthUnit {
  @_documentation(visibility: internal) public static var SdfLengthUnitMillimeter: pxr.SdfLengthUnit { Overlay.SdfLengthUnitMillimeter }
  @_documentation(visibility: internal) public static var SdfLengthUnitCentimeter: pxr.SdfLengthUnit { Overlay.SdfLengthUnitCentimeter }
  @_documentation(visibility: internal) public static var SdfLengthUnitDecimeter: pxr.SdfLengthUnit { Overlay.SdfLengthUnitDecimeter }
  @_documentation(visibility: internal) public static var SdfLengthUnitMeter: pxr.SdfLengthUnit { Overlay.SdfLengthUnitMeter }
  @_documentation(visibility: internal) public static var SdfLengthUnitKilometer: pxr.SdfLengthUnit { Overlay.SdfLengthUnitKilometer }
  @_documentation(visibility: internal) public static var SdfLengthUnitInch: pxr.SdfLengthUnit { Overlay.SdfLengthUnitInch }
  @_documentation(visibility: internal) public static var SdfLengthUnitFoot: pxr.SdfLengthUnit { Overlay.SdfLengthUnitFoot }
  @_documentation(visibility: internal) public static var SdfLengthUnitYard: pxr.SdfLengthUnit { Overlay.SdfLengthUnitYard }
  @_documentation(visibility: internal) public static var SdfLengthUnitMile: pxr.SdfLengthUnit { Overlay.SdfLengthUnitMile }
}
extension pxr.SdfListOpType {
  @_documentation(visibility: internal) public static var SdfListOpTypeExplicit: pxr.SdfListOpType { Overlay.SdfListOpTypeExplicit }
  @_documentation(visibility: internal) public static var SdfListOpTypeAdded: pxr.SdfListOpType { Overlay.SdfListOpTypeAdded }
  @_documentation(visibility: internal) public static var SdfListOpTypeDeleted: pxr.SdfListOpType { Overlay.SdfListOpTypeDeleted }
  @_documentation(visibility: internal) public static var SdfListOpTypeOrdered: pxr.SdfListOpType { Overlay.SdfListOpTypeOrdered }
  @_documentation(visibility: internal) public static var SdfListOpTypePrepended: pxr.SdfListOpType { Overlay.SdfListOpTypePrepended }
  @_documentation(visibility: internal) public static var SdfListOpTypeAppended: pxr.SdfListOpType { Overlay.SdfListOpTypeAppended }
}
extension pxr.SdfPathExpression.Op {
  @_documentation(visibility: internal) public static var Complement: pxr.SdfPathExpression.Op { Overlay.SdfPathExpression.Complement }
  @_documentation(visibility: internal) public static var ImpliedUnion: pxr.SdfPathExpression.Op { Overlay.SdfPathExpression.ImpliedUnion }
  @_documentation(visibility: internal) public static var Union: pxr.SdfPathExpression.Op { Overlay.SdfPathExpression.Union }
  @_documentation(visibility: internal) public static var Intersection: pxr.SdfPathExpression.Op { Overlay.SdfPathExpression.Intersection }
  @_documentation(visibility: internal) public static var Difference: pxr.SdfPathExpression.Op { Overlay.SdfPathExpression.Difference }
  @_documentation(visibility: internal) public static var ExpressionRef: pxr.SdfPathExpression.Op { Overlay.SdfPathExpression.ExpressionRef }
  @_documentation(visibility: internal) public static var Pattern: pxr.SdfPathExpression.Op { Overlay.SdfPathExpression.Pattern }
}
extension pxr.SdfPredicateExpression.FnCall.Kind {
  @_documentation(visibility: internal) public static var BareCall: pxr.SdfPredicateExpression.FnCall.Kind { Overlay.SdfPredicateExpression.FnCall.BareCall }
  @_documentation(visibility: internal) public static var ColonCall: pxr.SdfPredicateExpression.FnCall.Kind { Overlay.SdfPredicateExpression.FnCall.ColonCall }
  @_documentation(visibility: internal) public static var ParenCall: pxr.SdfPredicateExpression.FnCall.Kind { Overlay.SdfPredicateExpression.FnCall.ParenCall }
}
extension pxr.SdfPredicateExpression.Op {
  @_documentation(visibility: internal) public static var Call: pxr.SdfPredicateExpression.Op { Overlay.SdfPredicateExpression.Call }
  @_documentation(visibility: internal) public static var Not: pxr.SdfPredicateExpression.Op { Overlay.SdfPredicateExpression.Not }
  @_documentation(visibility: internal) public static var ImpliedAnd: pxr.SdfPredicateExpression.Op { Overlay.SdfPredicateExpression.ImpliedAnd }
  @_documentation(visibility: internal) public static var And: pxr.SdfPredicateExpression.Op { Overlay.SdfPredicateExpression.And }
  @_documentation(visibility: internal) public static var Or: pxr.SdfPredicateExpression.Op { Overlay.SdfPredicateExpression.Or }
}
extension pxr.SdfChangeList.SubLayerChangeType {
  @_documentation(visibility: internal) public static var SubLayerAdded: pxr.SdfChangeList.SubLayerChangeType { Overlay.SdfChangeList.SubLayerAdded }
  @_documentation(visibility: internal) public static var SubLayerRemoved: pxr.SdfChangeList.SubLayerChangeType { Overlay.SdfChangeList.SubLayerRemoved }
  @_documentation(visibility: internal) public static var SubLayerOffset: pxr.SdfChangeList.SubLayerChangeType { Overlay.SdfChangeList.SubLayerOffset }
}
extension pxr.SdfNamespaceEditDetail.Result {
  @_documentation(visibility: internal) public static var Error: pxr.SdfNamespaceEditDetail.Result { Overlay.SdfNamespaceEditDetail.Error }
  @_documentation(visibility: internal) public static var Unbatched: pxr.SdfNamespaceEditDetail.Result { Overlay.SdfNamespaceEditDetail.Unbatched }
  @_documentation(visibility: internal) public static var Okay: pxr.SdfNamespaceEditDetail.Result { Overlay.SdfNamespaceEditDetail.Okay }
}
extension pxr.SdfPredicateFunctionResult.Constancy {
  @_documentation(visibility: internal) public static var ConstantOverDescendants: pxr.SdfPredicateFunctionResult.Constancy { Overlay.SdfPredicateFunctionResult.ConstantOverDescendants }
  @_documentation(visibility: internal) public static var MayVaryOverDescendants: pxr.SdfPredicateFunctionResult.Constancy { Overlay.SdfPredicateFunctionResult.MayVaryOverDescendants }
}
extension pxr.SdrVersionFilter {
  @_documentation(visibility: internal) public static var SdrVersionFilterDefaultOnly: pxr.SdrVersionFilter { Overlay.SdrVersionFilterDefaultOnly }
  @_documentation(visibility: internal) public static var SdrVersionFilterAllVersions: pxr.SdrVersionFilter { Overlay.SdrVersionFilterAllVersions }
  @_documentation(visibility: internal) public static var SdrNumVersionFilters: pxr.SdrVersionFilter { Overlay.SdrNumVersionFilters }
}
extension pxr.PcpArcType {
  @_documentation(visibility: internal) public static var PcpArcTypeRoot: pxr.PcpArcType { Overlay.PcpArcTypeRoot }
  @_documentation(visibility: internal) public static var PcpArcTypeInherit: pxr.PcpArcType { Overlay.PcpArcTypeInherit }
  @_documentation(visibility: internal) public static var PcpArcTypeVariant: pxr.PcpArcType { Overlay.PcpArcTypeVariant }
  @_documentation(visibility: internal) public static var PcpArcTypeRelocate: pxr.PcpArcType { Overlay.PcpArcTypeRelocate }
  @_documentation(visibility: internal) public static var PcpArcTypeReference: pxr.PcpArcType { Overlay.PcpArcTypeReference }
  @_documentation(visibility: internal) public static var PcpArcTypePayload: pxr.PcpArcType { Overlay.PcpArcTypePayload }
  @_documentation(visibility: internal) public static var PcpArcTypeSpecialize: pxr.PcpArcType { Overlay.PcpArcTypeSpecialize }
  @_documentation(visibility: internal) public static var PcpNumArcTypes: pxr.PcpArcType { Overlay.PcpNumArcTypes }
}
extension pxr.PcpRangeType {
  @_documentation(visibility: internal) public static var PcpRangeTypeRoot: pxr.PcpRangeType { Overlay.PcpRangeTypeRoot }
  @_documentation(visibility: internal) public static var PcpRangeTypeInherit: pxr.PcpRangeType { Overlay.PcpRangeTypeInherit }
  @_documentation(visibility: internal) public static var PcpRangeTypeVariant: pxr.PcpRangeType { Overlay.PcpRangeTypeVariant }
  @_documentation(visibility: internal) public static var PcpRangeTypeReference: pxr.PcpRangeType { Overlay.PcpRangeTypeReference }
  @_documentation(visibility: internal) public static var PcpRangeTypePayload: pxr.PcpRangeType { Overlay.PcpRangeTypePayload }
  @_documentation(visibility: internal) public static var PcpRangeTypeSpecialize: pxr.PcpRangeType { Overlay.PcpRangeTypeSpecialize }
  @_documentation(visibility: internal) public static var PcpRangeTypeAll: pxr.PcpRangeType { Overlay.PcpRangeTypeAll }
  @_documentation(visibility: internal) public static var PcpRangeTypeWeakerThanRoot: pxr.PcpRangeType { Overlay.PcpRangeTypeWeakerThanRoot }
  @_documentation(visibility: internal) public static var PcpRangeTypeStrongerThanPayload: pxr.PcpRangeType { Overlay.PcpRangeTypeStrongerThanPayload }
  @_documentation(visibility: internal) public static var PcpRangeTypeInvalid: pxr.PcpRangeType { Overlay.PcpRangeTypeInvalid }
}
extension pxr.PcpDependencyType {
  @_documentation(visibility: internal) public static var PcpDependencyTypeNone: pxr.PcpDependencyType { Overlay.PcpDependencyTypeNone }
  @_documentation(visibility: internal) public static var PcpDependencyTypeRoot: pxr.PcpDependencyType { Overlay.PcpDependencyTypeRoot }
  @_documentation(visibility: internal) public static var PcpDependencyTypePurelyDirect: pxr.PcpDependencyType { Overlay.PcpDependencyTypePurelyDirect }
  @_documentation(visibility: internal) public static var PcpDependencyTypePartlyDirect: pxr.PcpDependencyType { Overlay.PcpDependencyTypePartlyDirect }
  @_documentation(visibility: internal) public static var PcpDependencyTypeAncestral: pxr.PcpDependencyType { Overlay.PcpDependencyTypeAncestral }
  @_documentation(visibility: internal) public static var PcpDependencyTypeVirtual: pxr.PcpDependencyType { Overlay.PcpDependencyTypeVirtual }
  @_documentation(visibility: internal) public static var PcpDependencyTypeNonVirtual: pxr.PcpDependencyType { Overlay.PcpDependencyTypeNonVirtual }
  @_documentation(visibility: internal) public static var PcpDependencyTypeDirect: pxr.PcpDependencyType { Overlay.PcpDependencyTypeDirect }
  @_documentation(visibility: internal) public static var PcpDependencyTypeAnyNonVirtual: pxr.PcpDependencyType { Overlay.PcpDependencyTypeAnyNonVirtual }
  @_documentation(visibility: internal) public static var PcpDependencyTypeAnyIncludingVirtual: pxr.PcpDependencyType { Overlay.PcpDependencyTypeAnyIncludingVirtual }
}
extension pxr.PcpErrorType {
  @_documentation(visibility: internal) public static var PcpErrorType_ArcCycle: pxr.PcpErrorType { Overlay.PcpErrorType_ArcCycle }
  @_documentation(visibility: internal) public static var PcpErrorType_ArcPermissionDenied: pxr.PcpErrorType { Overlay.PcpErrorType_ArcPermissionDenied }
  @_documentation(visibility: internal) public static var PcpErrorType_ArcToProhibitedChild: pxr.PcpErrorType { Overlay.PcpErrorType_ArcToProhibitedChild }
  @_documentation(visibility: internal) public static var PcpErrorType_IndexCapacityExceeded: pxr.PcpErrorType { Overlay.PcpErrorType_IndexCapacityExceeded }
  @_documentation(visibility: internal) public static var PcpErrorType_ArcCapacityExceeded: pxr.PcpErrorType { Overlay.PcpErrorType_ArcCapacityExceeded }
  @_documentation(visibility: internal) public static var PcpErrorType_ArcNamespaceDepthCapacityExceeded: pxr.PcpErrorType { Overlay.PcpErrorType_ArcNamespaceDepthCapacityExceeded }
  @_documentation(visibility: internal) public static var PcpErrorType_InconsistentPropertyType: pxr.PcpErrorType { Overlay.PcpErrorType_InconsistentPropertyType }
  @_documentation(visibility: internal) public static var PcpErrorType_InconsistentAttributeType: pxr.PcpErrorType { Overlay.PcpErrorType_InconsistentAttributeType }
  @_documentation(visibility: internal) public static var PcpErrorType_InconsistentAttributeVariability: pxr.PcpErrorType { Overlay.PcpErrorType_InconsistentAttributeVariability }
  @_documentation(visibility: internal) public static var PcpErrorType_InternalAssetPath: pxr.PcpErrorType { Overlay.PcpErrorType_InternalAssetPath }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidPrimPath: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidPrimPath }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidAssetPath: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidAssetPath }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidInstanceTargetPath: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidInstanceTargetPath }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidExternalTargetPath: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidExternalTargetPath }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidTargetPath: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidTargetPath }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidReferenceOffset: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidReferenceOffset }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidSublayerOffset: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidSublayerOffset }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidSublayerOwnership: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidSublayerOwnership }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidSublayerPath: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidSublayerPath }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidVariantSelection: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidVariantSelection }
  @_documentation(visibility: internal) public static var PcpErrorType_MutedAssetPath: pxr.PcpErrorType { Overlay.PcpErrorType_MutedAssetPath }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidAuthoredRelocation: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidAuthoredRelocation }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidConflictingRelocation: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidConflictingRelocation }
  @_documentation(visibility: internal) public static var PcpErrorType_InvalidSameTargetRelocations: pxr.PcpErrorType { Overlay.PcpErrorType_InvalidSameTargetRelocations }
  @_documentation(visibility: internal) public static var PcpErrorType_OpinionAtRelocationSource: pxr.PcpErrorType { Overlay.PcpErrorType_OpinionAtRelocationSource }
  @_documentation(visibility: internal) public static var PcpErrorType_PrimPermissionDenied: pxr.PcpErrorType { Overlay.PcpErrorType_PrimPermissionDenied }
  @_documentation(visibility: internal) public static var PcpErrorType_PropertyPermissionDenied: pxr.PcpErrorType { Overlay.PcpErrorType_PropertyPermissionDenied }
  @_documentation(visibility: internal) public static var PcpErrorType_SublayerCycle: pxr.PcpErrorType { Overlay.PcpErrorType_SublayerCycle }
  @_documentation(visibility: internal) public static var PcpErrorType_TargetPermissionDenied: pxr.PcpErrorType { Overlay.PcpErrorType_TargetPermissionDenied }
  @_documentation(visibility: internal) public static var PcpErrorType_UnresolvedPrimPath: pxr.PcpErrorType { Overlay.PcpErrorType_UnresolvedPrimPath }
  @_documentation(visibility: internal) public static var PcpErrorType_VariableExpressionError: pxr.PcpErrorType { Overlay.PcpErrorType_VariableExpressionError }
}
extension pxr.PcpPrimIndexOutputs.PayloadState {
  @_documentation(visibility: internal) public static var NoPayload: pxr.PcpPrimIndexOutputs.PayloadState { Overlay.PcpPrimIndexOutputs.NoPayload }
  @_documentation(visibility: internal) public static var IncludedByIncludeSet: pxr.PcpPrimIndexOutputs.PayloadState { Overlay.PcpPrimIndexOutputs.IncludedByIncludeSet }
  @_documentation(visibility: internal) public static var ExcludedByIncludeSet: pxr.PcpPrimIndexOutputs.PayloadState { Overlay.PcpPrimIndexOutputs.ExcludedByIncludeSet }
  @_documentation(visibility: internal) public static var IncludedByPredicate: pxr.PcpPrimIndexOutputs.PayloadState { Overlay.PcpPrimIndexOutputs.IncludedByPredicate }
  @_documentation(visibility: internal) public static var ExcludedByPredicate: pxr.PcpPrimIndexOutputs.PayloadState { Overlay.PcpPrimIndexOutputs.ExcludedByPredicate }
}
extension pxr.PcpCacheChanges.TargetType {
  @_documentation(visibility: internal) public static var TargetTypeConnection: pxr.PcpCacheChanges.TargetType { Overlay.PcpCacheChanges.TargetTypeConnection }
  @_documentation(visibility: internal) public static var TargetTypeRelationshipTarget: pxr.PcpCacheChanges.TargetType { Overlay.PcpCacheChanges.TargetTypeRelationshipTarget }
}
extension pxr.PcpChanges.ChangeSpecsType {
  @_documentation(visibility: internal) public static var ChangeSpecsTypeRemoved: pxr.PcpChanges.ChangeSpecsType { Overlay.PcpChanges.ChangeSpecsTypeRemoved }
  @_documentation(visibility: internal) public static var ChangeSpecsTypeAdded: pxr.PcpChanges.ChangeSpecsType { Overlay.PcpChanges.ChangeSpecsTypeAdded }
}
extension pxr.PcpNamespaceEdits.EditType {
  @_documentation(visibility: internal) public static var EditPath: pxr.PcpNamespaceEdits.EditType { Overlay.PcpNamespaceEdits.EditPath }
  @_documentation(visibility: internal) public static var EditInherit: pxr.PcpNamespaceEdits.EditType { Overlay.PcpNamespaceEdits.EditInherit }
  @_documentation(visibility: internal) public static var EditSpecializes: pxr.PcpNamespaceEdits.EditType { Overlay.PcpNamespaceEdits.EditSpecializes }
  @_documentation(visibility: internal) public static var EditReference: pxr.PcpNamespaceEdits.EditType { Overlay.PcpNamespaceEdits.EditReference }
  @_documentation(visibility: internal) public static var EditPayload: pxr.PcpNamespaceEdits.EditType { Overlay.PcpNamespaceEdits.EditPayload }
  @_documentation(visibility: internal) public static var EditRelocate: pxr.PcpNamespaceEdits.EditType { Overlay.PcpNamespaceEdits.EditRelocate }
}
extension pxr.UsdListPosition {
  @_documentation(visibility: internal) public static var UsdListPositionFrontOfPrependList: pxr.UsdListPosition { Overlay.UsdListPositionFrontOfPrependList }
  @_documentation(visibility: internal) public static var UsdListPositionBackOfPrependList: pxr.UsdListPosition { Overlay.UsdListPositionBackOfPrependList }
  @_documentation(visibility: internal) public static var UsdListPositionFrontOfAppendList: pxr.UsdListPosition { Overlay.UsdListPositionFrontOfAppendList }
  @_documentation(visibility: internal) public static var UsdListPositionBackOfAppendList: pxr.UsdListPosition { Overlay.UsdListPositionBackOfAppendList }
}
extension pxr.UsdLoadPolicy {
  @_documentation(visibility: internal) public static var UsdLoadWithDescendants: pxr.UsdLoadPolicy { Overlay.UsdLoadWithDescendants }
  @_documentation(visibility: internal) public static var UsdLoadWithoutDescendants: pxr.UsdLoadPolicy { Overlay.UsdLoadWithoutDescendants }
}
extension pxr.UsdObjType {
  @_documentation(visibility: internal) public static var UsdTypeObject: pxr.UsdObjType { Overlay.UsdTypeObject }
  @_documentation(visibility: internal) public static var UsdTypePrim: pxr.UsdObjType { Overlay.UsdTypePrim }
  @_documentation(visibility: internal) public static var UsdTypeProperty: pxr.UsdObjType { Overlay.UsdTypeProperty }
  @_documentation(visibility: internal) public static var UsdTypeAttribute: pxr.UsdObjType { Overlay.UsdTypeAttribute }
  @_documentation(visibility: internal) public static var UsdTypeRelationship: pxr.UsdObjType { Overlay.UsdTypeRelationship }
  @_documentation(visibility: internal) public static var Usd_NumObjTypes: pxr.UsdObjType { Overlay.Usd_NumObjTypes }
}
extension pxr.UsdStage.InitialLoadSet {
  @_documentation(visibility: internal) public static var LoadAll: pxr.UsdStage.InitialLoadSet { Overlay.UsdStage.LoadAll }
  @_documentation(visibility: internal) public static var LoadNone: pxr.UsdStage.InitialLoadSet { Overlay.UsdStage.LoadNone }
}
extension pxr.UsdInterpolationType {
  @_documentation(visibility: internal) public static var UsdInterpolationTypeHeld: pxr.UsdInterpolationType { Overlay.UsdInterpolationTypeHeld }
  @_documentation(visibility: internal) public static var UsdInterpolationTypeLinear: pxr.UsdInterpolationType { Overlay.UsdInterpolationTypeLinear }
}
extension pxr.UsdStageLoadRules.Rule {
  @_documentation(visibility: internal) public static var AllRule: pxr.UsdStageLoadRules.Rule { Overlay.UsdStageLoadRules.AllRule }
  @_documentation(visibility: internal) public static var OnlyRule: pxr.UsdStageLoadRules.Rule { Overlay.UsdStageLoadRules.OnlyRule }
  @_documentation(visibility: internal) public static var NoneRule: pxr.UsdStageLoadRules.Rule { Overlay.UsdStageLoadRules.NoneRule }
}
extension pxr.UsdResolveInfoSource {
  @_documentation(visibility: internal) public static var UsdResolveInfoSourceNone: pxr.UsdResolveInfoSource { Overlay.UsdResolveInfoSourceNone }
  @_documentation(visibility: internal) public static var UsdResolveInfoSourceFallback: pxr.UsdResolveInfoSource { Overlay.UsdResolveInfoSourceFallback }
  @_documentation(visibility: internal) public static var UsdResolveInfoSourceDefault: pxr.UsdResolveInfoSource { Overlay.UsdResolveInfoSourceDefault }
  @_documentation(visibility: internal) public static var UsdResolveInfoSourceTimeSamples: pxr.UsdResolveInfoSource { Overlay.UsdResolveInfoSourceTimeSamples }
  @_documentation(visibility: internal) public static var UsdResolveInfoSourceValueClips: pxr.UsdResolveInfoSource { Overlay.UsdResolveInfoSourceValueClips }
  @_documentation(visibility: internal) public static var UsdResolveInfoSourceSpline: pxr.UsdResolveInfoSource { Overlay.UsdResolveInfoSourceSpline }
}
extension pxr.UsdModelAPI.KindValidation {
  @_documentation(visibility: internal) public static var KindValidationNone: pxr.UsdModelAPI.KindValidation { Overlay.UsdModelAPI.KindValidationNone }
  @_documentation(visibility: internal) public static var KindValidationModelHierarchy: pxr.UsdModelAPI.KindValidation { Overlay.UsdModelAPI.KindValidationModelHierarchy }
}
extension pxr.UsdStageCacheContextBlockType {
  @_documentation(visibility: internal) public static var UsdBlockStageCaches: pxr.UsdStageCacheContextBlockType { Overlay.UsdBlockStageCaches }
  @_documentation(visibility: internal) public static var UsdBlockStageCachePopulation: pxr.UsdStageCacheContextBlockType { Overlay.UsdBlockStageCachePopulation }
  @_documentation(visibility: internal) public static var Usd_NoBlock: pxr.UsdStageCacheContextBlockType { Overlay.Usd_NoBlock }
}
extension pxr.UsdGeomXformOp.`Type` {
  @_documentation(visibility: internal) public static var TypeInvalid: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeInvalid }
  @_documentation(visibility: internal) public static var TypeTranslateX: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeTranslateX }
  @_documentation(visibility: internal) public static var TypeTranslateY: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeTranslateY }
  @_documentation(visibility: internal) public static var TypeTranslateZ: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeTranslateZ }
  @_documentation(visibility: internal) public static var TypeTranslate: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeTranslate }
  @_documentation(visibility: internal) public static var TypeScaleX: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeScaleX }
  @_documentation(visibility: internal) public static var TypeScaleY: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeScaleY }
  @_documentation(visibility: internal) public static var TypeScaleZ: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeScaleZ }
  @_documentation(visibility: internal) public static var TypeScale: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeScale }
  @_documentation(visibility: internal) public static var TypeRotateX: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateX }
  @_documentation(visibility: internal) public static var TypeRotateY: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateY }
  @_documentation(visibility: internal) public static var TypeRotateZ: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateZ }
  @_documentation(visibility: internal) public static var TypeRotateXYZ: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateXYZ }
  @_documentation(visibility: internal) public static var TypeRotateXZY: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateXZY }
  @_documentation(visibility: internal) public static var TypeRotateYXZ: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateYXZ }
  @_documentation(visibility: internal) public static var TypeRotateYZX: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateYZX }
  @_documentation(visibility: internal) public static var TypeRotateZXY: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateZXY }
  @_documentation(visibility: internal) public static var TypeRotateZYX: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeRotateZYX }
  @_documentation(visibility: internal) public static var TypeOrient: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeOrient }
  @_documentation(visibility: internal) public static var TypeTransform: pxr.UsdGeomXformOp.`Type` { Overlay.UsdGeomXformOp.TypeTransform }
}
extension pxr.UsdGeomXformOp.Precision {
  @_documentation(visibility: internal) public static var PrecisionDouble: pxr.UsdGeomXformOp.Precision { Overlay.UsdGeomXformOp.PrecisionDouble }
  @_documentation(visibility: internal) public static var PrecisionFloat: pxr.UsdGeomXformOp.Precision { Overlay.UsdGeomXformOp.PrecisionFloat }
  @_documentation(visibility: internal) public static var PrecisionHalf: pxr.UsdGeomXformOp.Precision { Overlay.UsdGeomXformOp.PrecisionHalf }
}
extension pxr.UsdGeomPointInstancer.ProtoXformInclusion {
  @_documentation(visibility: internal) public static var IncludeProtoXform: pxr.UsdGeomPointInstancer.ProtoXformInclusion { Overlay.UsdGeomPointInstancer.IncludeProtoXform }
  @_documentation(visibility: internal) public static var ExcludeProtoXform: pxr.UsdGeomPointInstancer.ProtoXformInclusion { Overlay.UsdGeomPointInstancer.ExcludeProtoXform }
}
extension pxr.UsdGeomPointInstancer.MaskApplication {
  @_documentation(visibility: internal) public static var ApplyMask: pxr.UsdGeomPointInstancer.MaskApplication { Overlay.UsdGeomPointInstancer.ApplyMask }
  @_documentation(visibility: internal) public static var IgnoreMask: pxr.UsdGeomPointInstancer.MaskApplication { Overlay.UsdGeomPointInstancer.IgnoreMask }
}
extension pxr.UsdGeomXformCommonAPI.RotationOrder {
  @_documentation(visibility: internal) public static var RotationOrderXYZ: pxr.UsdGeomXformCommonAPI.RotationOrder { Overlay.UsdGeomXformCommonAPI.RotationOrderXYZ }
  @_documentation(visibility: internal) public static var RotationOrderXZY: pxr.UsdGeomXformCommonAPI.RotationOrder { Overlay.UsdGeomXformCommonAPI.RotationOrderXZY }
  @_documentation(visibility: internal) public static var RotationOrderYXZ: pxr.UsdGeomXformCommonAPI.RotationOrder { Overlay.UsdGeomXformCommonAPI.RotationOrderYXZ }
  @_documentation(visibility: internal) public static var RotationOrderYZX: pxr.UsdGeomXformCommonAPI.RotationOrder { Overlay.UsdGeomXformCommonAPI.RotationOrderYZX }
  @_documentation(visibility: internal) public static var RotationOrderZXY: pxr.UsdGeomXformCommonAPI.RotationOrder { Overlay.UsdGeomXformCommonAPI.RotationOrderZXY }
  @_documentation(visibility: internal) public static var RotationOrderZYX: pxr.UsdGeomXformCommonAPI.RotationOrder { Overlay.UsdGeomXformCommonAPI.RotationOrderZYX }
}
extension pxr.UsdGeomXformCommonAPI.OpFlags {
  @_documentation(visibility: internal) public static var OpNone: pxr.UsdGeomXformCommonAPI.OpFlags { Overlay.UsdGeomXformCommonAPI.OpNone }
  @_documentation(visibility: internal) public static var OpTranslate: pxr.UsdGeomXformCommonAPI.OpFlags { Overlay.UsdGeomXformCommonAPI.OpTranslate }
  @_documentation(visibility: internal) public static var OpPivot: pxr.UsdGeomXformCommonAPI.OpFlags { Overlay.UsdGeomXformCommonAPI.OpPivot }
  @_documentation(visibility: internal) public static var OpRotate: pxr.UsdGeomXformCommonAPI.OpFlags { Overlay.UsdGeomXformCommonAPI.OpRotate }
  @_documentation(visibility: internal) public static var OpScale: pxr.UsdGeomXformCommonAPI.OpFlags { Overlay.UsdGeomXformCommonAPI.OpScale }
}
extension pxr.UsdShadeConnectableAPIBehavior.ConnectableNodeTypes {
  @_documentation(visibility: internal) public static var BasicNodes: pxr.UsdShadeConnectableAPIBehavior.ConnectableNodeTypes { Overlay.UsdShadeConnectableAPIBehavior.BasicNodes }
  @_documentation(visibility: internal) public static var DerivedContainerNodes: pxr.UsdShadeConnectableAPIBehavior.ConnectableNodeTypes { Overlay.UsdShadeConnectableAPIBehavior.DerivedContainerNodes }
}
extension pxr.UsdLuxLightListAPI.ComputeMode {
  @_documentation(visibility: internal) public static var ComputeModeConsultModelHierarchyCache: pxr.UsdLuxLightListAPI.ComputeMode { Overlay.UsdLuxLightListAPI.ComputeModeConsultModelHierarchyCache }
  @_documentation(visibility: internal) public static var ComputeModeIgnoreCache: pxr.UsdLuxLightListAPI.ComputeMode { Overlay.UsdLuxLightListAPI.ComputeModeIgnoreCache }
}
extension pxr.UsdLuxListAPI.ComputeMode {
  @_documentation(visibility: internal) public static var ComputeModeConsultModelHierarchyCache: pxr.UsdLuxListAPI.ComputeMode { Overlay.UsdLuxListAPI.ComputeModeConsultModelHierarchyCache }
  @_documentation(visibility: internal) public static var ComputeModeIgnoreCache: pxr.UsdLuxListAPI.ComputeMode { Overlay.UsdLuxListAPI.ComputeModeIgnoreCache }
}
extension pxr.UsdSkelBakeSkinningParms.DeformationFlags {
  @_documentation(visibility: internal) public static var DeformPointsWithSkinning: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.DeformPointsWithSkinning }
  @_documentation(visibility: internal) public static var DeformNormalsWithSkinning: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.DeformNormalsWithSkinning }
  @_documentation(visibility: internal) public static var DeformXformWithSkinning: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.DeformXformWithSkinning }
  @_documentation(visibility: internal) public static var DeformPointsWithBlendShapes: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.DeformPointsWithBlendShapes }
  @_documentation(visibility: internal) public static var DeformNormalsWithBlendShapes: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.DeformNormalsWithBlendShapes }
  @_documentation(visibility: internal) public static var DeformWithSkinning: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.DeformWithSkinning }
  @_documentation(visibility: internal) public static var DeformWithBlendShapes: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.DeformWithBlendShapes }
  @_documentation(visibility: internal) public static var DeformAll: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.DeformAll }
  @_documentation(visibility: internal) public static var ModifiesPoints: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.ModifiesPoints }
  @_documentation(visibility: internal) public static var ModifiesNormals: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.ModifiesNormals }
  @_documentation(visibility: internal) public static var ModifiesXform: pxr.UsdSkelBakeSkinningParms.DeformationFlags { Overlay.UsdSkelBakeSkinningParms.ModifiesXform }
}
extension pxr.VdfInputSpec.Access {
  @_documentation(visibility: internal) public static var READ: pxr.VdfInputSpec.Access { Overlay.VdfInputSpec.READ }
  @_documentation(visibility: internal) public static var READWRITE: pxr.VdfInputSpec.Access { Overlay.VdfInputSpec.READWRITE }
}
extension pxr.VdfVector.ConstructBoxedCopyTag {
  @_documentation(visibility: internal) public static var ConstructBoxedCopy: pxr.VdfVector.ConstructBoxedCopyTag { Overlay.VdfVector.ConstructBoxedCopy }
}
extension pxr.VdfExecutionStats.EventType {
  @_documentation(visibility: internal) public static var NodeEvaluateEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.NodeEvaluateEvent }
  @_documentation(visibility: internal) public static var NodePrepareEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.NodePrepareEvent }
  @_documentation(visibility: internal) public static var NodeRequiredInputsEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.NodeRequiredInputsEvent }
  @_documentation(visibility: internal) public static var NodeInputsTaskEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.NodeInputsTaskEvent }
  @_documentation(visibility: internal) public static var NodeDidComputeEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.NodeDidComputeEvent }
  @_documentation(visibility: internal) public static var ElementsCopiedEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.ElementsCopiedEvent }
  @_documentation(visibility: internal) public static var ElementsProcessedEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.ElementsProcessedEvent }
  @_documentation(visibility: internal) public static var RequestedOutputInSpeculationsEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.RequestedOutputInSpeculationsEvent }
  @_documentation(visibility: internal) public static var MaxEvent: pxr.VdfExecutionStats.EventType { Overlay.VdfExecutionStats.MaxEvent }
}
extension pxr.VdfGrapherOptions.DisplayStyle {
  @_documentation(visibility: internal) public static var DisplayStyleFull: pxr.VdfGrapherOptions.DisplayStyle { Overlay.VdfGrapherOptions.DisplayStyleFull }
  @_documentation(visibility: internal) public static var DisplayStyleNoLabels: pxr.VdfGrapherOptions.DisplayStyle { Overlay.VdfGrapherOptions.DisplayStyleNoLabels }
  @_documentation(visibility: internal) public static var DisplayStyleSummary: pxr.VdfGrapherOptions.DisplayStyle { Overlay.VdfGrapherOptions.DisplayStyleSummary }
}
extension pxr.VdfObjectPtr.`Type` {
  @_documentation(visibility: internal) public static var Undefined: pxr.VdfObjectPtr.`Type` { Overlay.VdfObjectPtr.Undefined }
  @_documentation(visibility: internal) public static var Node: pxr.VdfObjectPtr.`Type` { Overlay.VdfObjectPtr.Node }
  @_documentation(visibility: internal) public static var Connection: pxr.VdfObjectPtr.`Type` { Overlay.VdfObjectPtr.Connection }
  @_documentation(visibility: internal) public static var Input: pxr.VdfObjectPtr.`Type` { Overlay.VdfObjectPtr.Input }
  @_documentation(visibility: internal) public static var Output: pxr.VdfObjectPtr.`Type` { Overlay.VdfObjectPtr.Output }
}
extension pxr.VdfIndexedWeightsOperand.SetOperation {
  @_documentation(visibility: internal) public static var Union: pxr.VdfIndexedWeightsOperand.SetOperation { Overlay.VdfIndexedWeightsOperand.Union }
  @_documentation(visibility: internal) public static var Intersection: pxr.VdfIndexedWeightsOperand.SetOperation { Overlay.VdfIndexedWeightsOperand.Intersection }
}
extension pxr.VdfSparseInputTraverser.CallbackMode {
  @_documentation(visibility: internal) public static var CallbackModeAllNodes: pxr.VdfSparseInputTraverser.CallbackMode { Overlay.VdfSparseInputTraverser.CallbackModeAllNodes }
  @_documentation(visibility: internal) public static var CallbackModeTerminalNodes: pxr.VdfSparseInputTraverser.CallbackMode { Overlay.VdfSparseInputTraverser.CallbackModeTerminalNodes }
}
extension pxr.VdfSparseVectorizedInputTraverser.CallbackMode {
  @_documentation(visibility: internal) public static var CallbackModeAllNodes: pxr.VdfSparseVectorizedInputTraverser.CallbackMode { Overlay.VdfSparseVectorizedInputTraverser.CallbackModeAllNodes }
  @_documentation(visibility: internal) public static var CallbackModeTerminalNodes: pxr.VdfSparseVectorizedInputTraverser.CallbackMode { Overlay.VdfSparseVectorizedInputTraverser.CallbackModeTerminalNodes }
}
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.GarchGLDebugWindow.Buttons {
  @_documentation(visibility: internal) public static var MyButton1: pxr.GarchGLDebugWindow.Buttons { Overlay.GarchGLDebugWindow.MyButton1 }
  @_documentation(visibility: internal) public static var MyButton2: pxr.GarchGLDebugWindow.Buttons { Overlay.GarchGLDebugWindow.MyButton2 }
  @_documentation(visibility: internal) public static var MyButton3: pxr.GarchGLDebugWindow.Buttons { Overlay.GarchGLDebugWindow.MyButton3 }
}
extension pxr.GarchGLDebugWindow.ModifierKeys {
  @_documentation(visibility: internal) public static var NoModifiers: pxr.GarchGLDebugWindow.ModifierKeys { Overlay.GarchGLDebugWindow.NoModifiers }
  @_documentation(visibility: internal) public static var Shift: pxr.GarchGLDebugWindow.ModifierKeys { Overlay.GarchGLDebugWindow.Shift }
  @_documentation(visibility: internal) public static var Alt: pxr.GarchGLDebugWindow.ModifierKeys { Overlay.GarchGLDebugWindow.Alt }
  @_documentation(visibility: internal) public static var Ctrl: pxr.GarchGLDebugWindow.ModifierKeys { Overlay.GarchGLDebugWindow.Ctrl }
}
extension pxr.HioFormat {
  @_documentation(visibility: internal) public static var HioFormatInvalid: pxr.HioFormat { Overlay.HioFormatInvalid }
  @_documentation(visibility: internal) public static var HioFormatUNorm8: pxr.HioFormat { Overlay.HioFormatUNorm8 }
  @_documentation(visibility: internal) public static var HioFormatUNorm8Vec2: pxr.HioFormat { Overlay.HioFormatUNorm8Vec2 }
  @_documentation(visibility: internal) public static var HioFormatUNorm8Vec3: pxr.HioFormat { Overlay.HioFormatUNorm8Vec3 }
  @_documentation(visibility: internal) public static var HioFormatUNorm8Vec4: pxr.HioFormat { Overlay.HioFormatUNorm8Vec4 }
  @_documentation(visibility: internal) public static var HioFormatSNorm8: pxr.HioFormat { Overlay.HioFormatSNorm8 }
  @_documentation(visibility: internal) public static var HioFormatSNorm8Vec2: pxr.HioFormat { Overlay.HioFormatSNorm8Vec2 }
  @_documentation(visibility: internal) public static var HioFormatSNorm8Vec3: pxr.HioFormat { Overlay.HioFormatSNorm8Vec3 }
  @_documentation(visibility: internal) public static var HioFormatSNorm8Vec4: pxr.HioFormat { Overlay.HioFormatSNorm8Vec4 }
  @_documentation(visibility: internal) public static var HioFormatFloat16: pxr.HioFormat { Overlay.HioFormatFloat16 }
  @_documentation(visibility: internal) public static var HioFormatFloat16Vec2: pxr.HioFormat { Overlay.HioFormatFloat16Vec2 }
  @_documentation(visibility: internal) public static var HioFormatFloat16Vec3: pxr.HioFormat { Overlay.HioFormatFloat16Vec3 }
  @_documentation(visibility: internal) public static var HioFormatFloat16Vec4: pxr.HioFormat { Overlay.HioFormatFloat16Vec4 }
  @_documentation(visibility: internal) public static var HioFormatFloat32: pxr.HioFormat { Overlay.HioFormatFloat32 }
  @_documentation(visibility: internal) public static var HioFormatFloat32Vec2: pxr.HioFormat { Overlay.HioFormatFloat32Vec2 }
  @_documentation(visibility: internal) public static var HioFormatFloat32Vec3: pxr.HioFormat { Overlay.HioFormatFloat32Vec3 }
  @_documentation(visibility: internal) public static var HioFormatFloat32Vec4: pxr.HioFormat { Overlay.HioFormatFloat32Vec4 }
  @_documentation(visibility: internal) public static var HioFormatDouble64: pxr.HioFormat { Overlay.HioFormatDouble64 }
  @_documentation(visibility: internal) public static var HioFormatDouble64Vec2: pxr.HioFormat { Overlay.HioFormatDouble64Vec2 }
  @_documentation(visibility: internal) public static var HioFormatDouble64Vec3: pxr.HioFormat { Overlay.HioFormatDouble64Vec3 }
  @_documentation(visibility: internal) public static var HioFormatDouble64Vec4: pxr.HioFormat { Overlay.HioFormatDouble64Vec4 }
  @_documentation(visibility: internal) public static var HioFormatUInt16: pxr.HioFormat { Overlay.HioFormatUInt16 }
  @_documentation(visibility: internal) public static var HioFormatUInt16Vec2: pxr.HioFormat { Overlay.HioFormatUInt16Vec2 }
  @_documentation(visibility: internal) public static var HioFormatUInt16Vec3: pxr.HioFormat { Overlay.HioFormatUInt16Vec3 }
  @_documentation(visibility: internal) public static var HioFormatUInt16Vec4: pxr.HioFormat { Overlay.HioFormatUInt16Vec4 }
  @_documentation(visibility: internal) public static var HioFormatInt16: pxr.HioFormat { Overlay.HioFormatInt16 }
  @_documentation(visibility: internal) public static var HioFormatInt16Vec2: pxr.HioFormat { Overlay.HioFormatInt16Vec2 }
  @_documentation(visibility: internal) public static var HioFormatInt16Vec3: pxr.HioFormat { Overlay.HioFormatInt16Vec3 }
  @_documentation(visibility: internal) public static var HioFormatInt16Vec4: pxr.HioFormat { Overlay.HioFormatInt16Vec4 }
  @_documentation(visibility: internal) public static var HioFormatUInt32: pxr.HioFormat { Overlay.HioFormatUInt32 }
  @_documentation(visibility: internal) public static var HioFormatUInt32Vec2: pxr.HioFormat { Overlay.HioFormatUInt32Vec2 }
  @_documentation(visibility: internal) public static var HioFormatUInt32Vec3: pxr.HioFormat { Overlay.HioFormatUInt32Vec3 }
  @_documentation(visibility: internal) public static var HioFormatUInt32Vec4: pxr.HioFormat { Overlay.HioFormatUInt32Vec4 }
  @_documentation(visibility: internal) public static var HioFormatInt32: pxr.HioFormat { Overlay.HioFormatInt32 }
  @_documentation(visibility: internal) public static var HioFormatInt32Vec2: pxr.HioFormat { Overlay.HioFormatInt32Vec2 }
  @_documentation(visibility: internal) public static var HioFormatInt32Vec3: pxr.HioFormat { Overlay.HioFormatInt32Vec3 }
  @_documentation(visibility: internal) public static var HioFormatInt32Vec4: pxr.HioFormat { Overlay.HioFormatInt32Vec4 }
  @_documentation(visibility: internal) public static var HioFormatUNorm8srgb: pxr.HioFormat { Overlay.HioFormatUNorm8srgb }
  @_documentation(visibility: internal) public static var HioFormatUNorm8Vec2srgb: pxr.HioFormat { Overlay.HioFormatUNorm8Vec2srgb }
  @_documentation(visibility: internal) public static var HioFormatUNorm8Vec3srgb: pxr.HioFormat { Overlay.HioFormatUNorm8Vec3srgb }
  @_documentation(visibility: internal) public static var HioFormatUNorm8Vec4srgb: pxr.HioFormat { Overlay.HioFormatUNorm8Vec4srgb }
  @_documentation(visibility: internal) public static var HioFormatBC6FloatVec3: pxr.HioFormat { Overlay.HioFormatBC6FloatVec3 }
  @_documentation(visibility: internal) public static var HioFormatBC6UFloatVec3: pxr.HioFormat { Overlay.HioFormatBC6UFloatVec3 }
  @_documentation(visibility: internal) public static var HioFormatBC7UNorm8Vec4: pxr.HioFormat { Overlay.HioFormatBC7UNorm8Vec4 }
  @_documentation(visibility: internal) public static var HioFormatBC7UNorm8Vec4srgb: pxr.HioFormat { Overlay.HioFormatBC7UNorm8Vec4srgb }
  @_documentation(visibility: internal) public static var HioFormatBC1UNorm8Vec4: pxr.HioFormat { Overlay.HioFormatBC1UNorm8Vec4 }
  @_documentation(visibility: internal) public static var HioFormatBC3UNorm8Vec4: pxr.HioFormat { Overlay.HioFormatBC3UNorm8Vec4 }
  @_documentation(visibility: internal) public static var HioFormatCount: pxr.HioFormat { Overlay.HioFormatCount }
}
extension pxr.HioAddressDimension {
  @_documentation(visibility: internal) public static var HioAddressDimensionU: pxr.HioAddressDimension { Overlay.HioAddressDimensionU }
  @_documentation(visibility: internal) public static var HioAddressDimensionV: pxr.HioAddressDimension { Overlay.HioAddressDimensionV }
  @_documentation(visibility: internal) public static var HioAddressDimensionW: pxr.HioAddressDimension { Overlay.HioAddressDimensionW }
}
extension pxr.HioAddressMode {
  @_documentation(visibility: internal) public static var HioAddressModeClampToEdge: pxr.HioAddressMode { Overlay.HioAddressModeClampToEdge }
  @_documentation(visibility: internal) public static var HioAddressModeMirrorClampToEdge: pxr.HioAddressMode { Overlay.HioAddressModeMirrorClampToEdge }
  @_documentation(visibility: internal) public static var HioAddressModeRepeat: pxr.HioAddressMode { Overlay.HioAddressModeRepeat }
  @_documentation(visibility: internal) public static var HioAddressModeMirrorRepeat: pxr.HioAddressMode { Overlay.HioAddressModeMirrorRepeat }
  @_documentation(visibility: internal) public static var HioAddressModeClampToBorderColor: pxr.HioAddressMode { Overlay.HioAddressModeClampToBorderColor }
}
extension pxr.HioType {
  @_documentation(visibility: internal) public static var HioTypeUnsignedByte: pxr.HioType { Overlay.HioTypeUnsignedByte }
  @_documentation(visibility: internal) public static var HioTypeUnsignedByteSRGB: pxr.HioType { Overlay.HioTypeUnsignedByteSRGB }
  @_documentation(visibility: internal) public static var HioTypeSignedByte: pxr.HioType { Overlay.HioTypeSignedByte }
  @_documentation(visibility: internal) public static var HioTypeUnsignedShort: pxr.HioType { Overlay.HioTypeUnsignedShort }
  @_documentation(visibility: internal) public static var HioTypeSignedShort: pxr.HioType { Overlay.HioTypeSignedShort }
  @_documentation(visibility: internal) public static var HioTypeUnsignedInt: pxr.HioType { Overlay.HioTypeUnsignedInt }
  @_documentation(visibility: internal) public static var HioTypeInt: pxr.HioType { Overlay.HioTypeInt }
  @_documentation(visibility: internal) public static var HioTypeHalfFloat: pxr.HioType { Overlay.HioTypeHalfFloat }
  @_documentation(visibility: internal) public static var HioTypeFloat: pxr.HioType { Overlay.HioTypeFloat }
  @_documentation(visibility: internal) public static var HioTypeDouble: pxr.HioType { Overlay.HioTypeDouble }
  @_documentation(visibility: internal) public static var HioTypeCount: pxr.HioType { Overlay.HioTypeCount }
}
extension pxr.HioGlslfxConfig.Role {
  @_documentation(visibility: internal) public static var RoleNone: pxr.HioGlslfxConfig.Role { Overlay.HioGlslfxConfig.RoleNone }
  @_documentation(visibility: internal) public static var RoleColor: pxr.HioGlslfxConfig.Role { Overlay.HioGlslfxConfig.RoleColor }
}
extension pxr.CameraUtilConformWindowPolicy {
  @_documentation(visibility: internal) public static var CameraUtilMatchVertically: pxr.CameraUtilConformWindowPolicy { Overlay.CameraUtilMatchVertically }
  @_documentation(visibility: internal) public static var CameraUtilMatchHorizontally: pxr.CameraUtilConformWindowPolicy { Overlay.CameraUtilMatchHorizontally }
  @_documentation(visibility: internal) public static var CameraUtilFit: pxr.CameraUtilConformWindowPolicy { Overlay.CameraUtilFit }
  @_documentation(visibility: internal) public static var CameraUtilCrop: pxr.CameraUtilConformWindowPolicy { Overlay.CameraUtilCrop }
  @_documentation(visibility: internal) public static var CameraUtilDontConform: pxr.CameraUtilConformWindowPolicy { Overlay.CameraUtilDontConform }
}
extension pxr.HgiDeviceCapabilitiesBits {
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsPresentation: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsPresentation }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsBindlessBuffers: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsBindlessBuffers }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsConcurrentDispatch: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsConcurrentDispatch }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsUnifiedMemory: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsUnifiedMemory }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsBuiltinBarycentrics: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsBuiltinBarycentrics }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsShaderDrawParameters: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsShaderDrawParameters }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsMultiDrawIndirect: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsMultiDrawIndirect }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsBindlessTextures: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsBindlessTextures }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsShaderDoublePrecision: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsShaderDoublePrecision }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsDepthRangeMinusOnetoOne: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsDepthRangeMinusOnetoOne }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsCppShaderPadding: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsCppShaderPadding }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsConservativeRaster: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsConservativeRaster }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsStencilReadback: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsStencilReadback }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsCustomDepthRange: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsCustomDepthRange }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsMetalTessellation: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsMetalTessellation }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsBasePrimitiveOffset: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsBasePrimitiveOffset }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsPrimitiveIdEmulation: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsPrimitiveIdEmulation }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsIndirectCommandBuffers: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsIndirectCommandBuffers }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsRoundPoints: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsRoundPoints }
  @_documentation(visibility: internal) public static var HgiDeviceCapabilitiesBitsSingleSlotResourceArrays: pxr.HgiDeviceCapabilitiesBits { Overlay.HgiDeviceCapabilitiesBitsSingleSlotResourceArrays }
}
extension pxr.HgiTextureType {
  @_documentation(visibility: internal) public static var HgiTextureType1D: pxr.HgiTextureType { Overlay.HgiTextureType1D }
  @_documentation(visibility: internal) public static var HgiTextureType2D: pxr.HgiTextureType { Overlay.HgiTextureType2D }
  @_documentation(visibility: internal) public static var HgiTextureType3D: pxr.HgiTextureType { Overlay.HgiTextureType3D }
  @_documentation(visibility: internal) public static var HgiTextureType1DArray: pxr.HgiTextureType { Overlay.HgiTextureType1DArray }
  @_documentation(visibility: internal) public static var HgiTextureType2DArray: pxr.HgiTextureType { Overlay.HgiTextureType2DArray }
  @_documentation(visibility: internal) public static var HgiTextureTypeCount: pxr.HgiTextureType { Overlay.HgiTextureTypeCount }
}
extension pxr.HgiTextureUsageBits {
  @_documentation(visibility: internal) public static var HgiTextureUsageBitsColorTarget: pxr.HgiTextureUsageBits { Overlay.HgiTextureUsageBitsColorTarget }
  @_documentation(visibility: internal) public static var HgiTextureUsageBitsDepthTarget: pxr.HgiTextureUsageBits { Overlay.HgiTextureUsageBitsDepthTarget }
  @_documentation(visibility: internal) public static var HgiTextureUsageBitsStencilTarget: pxr.HgiTextureUsageBits { Overlay.HgiTextureUsageBitsStencilTarget }
  @_documentation(visibility: internal) public static var HgiTextureUsageBitsShaderRead: pxr.HgiTextureUsageBits { Overlay.HgiTextureUsageBitsShaderRead }
  @_documentation(visibility: internal) public static var HgiTextureUsageBitsShaderWrite: pxr.HgiTextureUsageBits { Overlay.HgiTextureUsageBitsShaderWrite }
  @_documentation(visibility: internal) public static var HgiTextureUsageCustomBitsBegin: pxr.HgiTextureUsageBits { Overlay.HgiTextureUsageCustomBitsBegin }
}
extension pxr.HgiSamplerAddressMode {
  @_documentation(visibility: internal) public static var HgiSamplerAddressModeClampToEdge: pxr.HgiSamplerAddressMode { Overlay.HgiSamplerAddressModeClampToEdge }
  @_documentation(visibility: internal) public static var HgiSamplerAddressModeMirrorClampToEdge: pxr.HgiSamplerAddressMode { Overlay.HgiSamplerAddressModeMirrorClampToEdge }
  @_documentation(visibility: internal) public static var HgiSamplerAddressModeRepeat: pxr.HgiSamplerAddressMode { Overlay.HgiSamplerAddressModeRepeat }
  @_documentation(visibility: internal) public static var HgiSamplerAddressModeMirrorRepeat: pxr.HgiSamplerAddressMode { Overlay.HgiSamplerAddressModeMirrorRepeat }
  @_documentation(visibility: internal) public static var HgiSamplerAddressModeClampToBorderColor: pxr.HgiSamplerAddressMode { Overlay.HgiSamplerAddressModeClampToBorderColor }
  @_documentation(visibility: internal) public static var HgiSamplerAddressModeCount: pxr.HgiSamplerAddressMode { Overlay.HgiSamplerAddressModeCount }
}
extension pxr.HgiSamplerFilter {
  @_documentation(visibility: internal) public static var HgiSamplerFilterNearest: pxr.HgiSamplerFilter { Overlay.HgiSamplerFilterNearest }
  @_documentation(visibility: internal) public static var HgiSamplerFilterLinear: pxr.HgiSamplerFilter { Overlay.HgiSamplerFilterLinear }
  @_documentation(visibility: internal) public static var HgiSamplerFilterCount: pxr.HgiSamplerFilter { Overlay.HgiSamplerFilterCount }
}
extension pxr.HgiMipFilter {
  @_documentation(visibility: internal) public static var HgiMipFilterNotMipmapped: pxr.HgiMipFilter { Overlay.HgiMipFilterNotMipmapped }
  @_documentation(visibility: internal) public static var HgiMipFilterNearest: pxr.HgiMipFilter { Overlay.HgiMipFilterNearest }
  @_documentation(visibility: internal) public static var HgiMipFilterLinear: pxr.HgiMipFilter { Overlay.HgiMipFilterLinear }
  @_documentation(visibility: internal) public static var HgiMipFilterCount: pxr.HgiMipFilter { Overlay.HgiMipFilterCount }
}
extension pxr.HgiBorderColor {
  @_documentation(visibility: internal) public static var HgiBorderColorTransparentBlack: pxr.HgiBorderColor { Overlay.HgiBorderColorTransparentBlack }
  @_documentation(visibility: internal) public static var HgiBorderColorOpaqueBlack: pxr.HgiBorderColor { Overlay.HgiBorderColorOpaqueBlack }
  @_documentation(visibility: internal) public static var HgiBorderColorOpaqueWhite: pxr.HgiBorderColor { Overlay.HgiBorderColorOpaqueWhite }
  @_documentation(visibility: internal) public static var HgiBorderColorCount: pxr.HgiBorderColor { Overlay.HgiBorderColorCount }
}
extension pxr.HgiSampleCount {
  @_documentation(visibility: internal) public static var HgiSampleCount1: pxr.HgiSampleCount { Overlay.HgiSampleCount1 }
  @_documentation(visibility: internal) public static var HgiSampleCount2: pxr.HgiSampleCount { Overlay.HgiSampleCount2 }
  @_documentation(visibility: internal) public static var HgiSampleCount4: pxr.HgiSampleCount { Overlay.HgiSampleCount4 }
  @_documentation(visibility: internal) public static var HgiSampleCount8: pxr.HgiSampleCount { Overlay.HgiSampleCount8 }
  @_documentation(visibility: internal) public static var HgiSampleCount16: pxr.HgiSampleCount { Overlay.HgiSampleCount16 }
  @_documentation(visibility: internal) public static var HgiSampleCountEnd: pxr.HgiSampleCount { Overlay.HgiSampleCountEnd }
}
extension pxr.HgiAttachmentLoadOp {
  @_documentation(visibility: internal) public static var HgiAttachmentLoadOpDontCare: pxr.HgiAttachmentLoadOp { Overlay.HgiAttachmentLoadOpDontCare }
  @_documentation(visibility: internal) public static var HgiAttachmentLoadOpClear: pxr.HgiAttachmentLoadOp { Overlay.HgiAttachmentLoadOpClear }
  @_documentation(visibility: internal) public static var HgiAttachmentLoadOpLoad: pxr.HgiAttachmentLoadOp { Overlay.HgiAttachmentLoadOpLoad }
  @_documentation(visibility: internal) public static var HgiAttachmentLoadOpCount: pxr.HgiAttachmentLoadOp { Overlay.HgiAttachmentLoadOpCount }
}
extension pxr.HgiAttachmentStoreOp {
  @_documentation(visibility: internal) public static var HgiAttachmentStoreOpDontCare: pxr.HgiAttachmentStoreOp { Overlay.HgiAttachmentStoreOpDontCare }
  @_documentation(visibility: internal) public static var HgiAttachmentStoreOpStore: pxr.HgiAttachmentStoreOp { Overlay.HgiAttachmentStoreOpStore }
  @_documentation(visibility: internal) public static var HgiAttachmentStoreOpCount: pxr.HgiAttachmentStoreOp { Overlay.HgiAttachmentStoreOpCount }
}
extension pxr.HgiBufferUsageBits {
  @_documentation(visibility: internal) public static var HgiBufferUsageUniform: pxr.HgiBufferUsageBits { Overlay.HgiBufferUsageUniform }
  @_documentation(visibility: internal) public static var HgiBufferUsageIndex32: pxr.HgiBufferUsageBits { Overlay.HgiBufferUsageIndex32 }
  @_documentation(visibility: internal) public static var HgiBufferUsageVertex: pxr.HgiBufferUsageBits { Overlay.HgiBufferUsageVertex }
  @_documentation(visibility: internal) public static var HgiBufferUsageStorage: pxr.HgiBufferUsageBits { Overlay.HgiBufferUsageStorage }
  @_documentation(visibility: internal) public static var HgiBufferUsageIndirect: pxr.HgiBufferUsageBits { Overlay.HgiBufferUsageIndirect }
  @_documentation(visibility: internal) public static var HgiBufferUsageCustomBitsBegin: pxr.HgiBufferUsageBits { Overlay.HgiBufferUsageCustomBitsBegin }
}
extension pxr.HgiShaderStageBits {
  @_documentation(visibility: internal) public static var HgiShaderStageVertex: pxr.HgiShaderStageBits { Overlay.HgiShaderStageVertex }
  @_documentation(visibility: internal) public static var HgiShaderStageFragment: pxr.HgiShaderStageBits { Overlay.HgiShaderStageFragment }
  @_documentation(visibility: internal) public static var HgiShaderStageCompute: pxr.HgiShaderStageBits { Overlay.HgiShaderStageCompute }
  @_documentation(visibility: internal) public static var HgiShaderStageTessellationControl: pxr.HgiShaderStageBits { Overlay.HgiShaderStageTessellationControl }
  @_documentation(visibility: internal) public static var HgiShaderStageTessellationEval: pxr.HgiShaderStageBits { Overlay.HgiShaderStageTessellationEval }
  @_documentation(visibility: internal) public static var HgiShaderStageGeometry: pxr.HgiShaderStageBits { Overlay.HgiShaderStageGeometry }
  @_documentation(visibility: internal) public static var HgiShaderStagePostTessellationControl: pxr.HgiShaderStageBits { Overlay.HgiShaderStagePostTessellationControl }
  @_documentation(visibility: internal) public static var HgiShaderStagePostTessellationVertex: pxr.HgiShaderStageBits { Overlay.HgiShaderStagePostTessellationVertex }
  @_documentation(visibility: internal) public static var HgiShaderStageCustomBitsBegin: pxr.HgiShaderStageBits { Overlay.HgiShaderStageCustomBitsBegin }
}
extension pxr.HgiBindResourceType {
  @_documentation(visibility: internal) public static var HgiBindResourceTypeSampler: pxr.HgiBindResourceType { Overlay.HgiBindResourceTypeSampler }
  @_documentation(visibility: internal) public static var HgiBindResourceTypeSampledImage: pxr.HgiBindResourceType { Overlay.HgiBindResourceTypeSampledImage }
  @_documentation(visibility: internal) public static var HgiBindResourceTypeCombinedSamplerImage: pxr.HgiBindResourceType { Overlay.HgiBindResourceTypeCombinedSamplerImage }
  @_documentation(visibility: internal) public static var HgiBindResourceTypeStorageImage: pxr.HgiBindResourceType { Overlay.HgiBindResourceTypeStorageImage }
  @_documentation(visibility: internal) public static var HgiBindResourceTypeUniformBuffer: pxr.HgiBindResourceType { Overlay.HgiBindResourceTypeUniformBuffer }
  @_documentation(visibility: internal) public static var HgiBindResourceTypeStorageBuffer: pxr.HgiBindResourceType { Overlay.HgiBindResourceTypeStorageBuffer }
  @_documentation(visibility: internal) public static var HgiBindResourceTypeTessFactors: pxr.HgiBindResourceType { Overlay.HgiBindResourceTypeTessFactors }
  @_documentation(visibility: internal) public static var HgiBindResourceTypeCount: pxr.HgiBindResourceType { Overlay.HgiBindResourceTypeCount }
}
extension pxr.HgiPolygonMode {
  @_documentation(visibility: internal) public static var HgiPolygonModeFill: pxr.HgiPolygonMode { Overlay.HgiPolygonModeFill }
  @_documentation(visibility: internal) public static var HgiPolygonModeLine: pxr.HgiPolygonMode { Overlay.HgiPolygonModeLine }
  @_documentation(visibility: internal) public static var HgiPolygonModePoint: pxr.HgiPolygonMode { Overlay.HgiPolygonModePoint }
  @_documentation(visibility: internal) public static var HgiPolygonModeCount: pxr.HgiPolygonMode { Overlay.HgiPolygonModeCount }
}
extension pxr.HgiCullMode {
  @_documentation(visibility: internal) public static var HgiCullModeNone: pxr.HgiCullMode { Overlay.HgiCullModeNone }
  @_documentation(visibility: internal) public static var HgiCullModeFront: pxr.HgiCullMode { Overlay.HgiCullModeFront }
  @_documentation(visibility: internal) public static var HgiCullModeBack: pxr.HgiCullMode { Overlay.HgiCullModeBack }
  @_documentation(visibility: internal) public static var HgiCullModeFrontAndBack: pxr.HgiCullMode { Overlay.HgiCullModeFrontAndBack }
  @_documentation(visibility: internal) public static var HgiCullModeCount: pxr.HgiCullMode { Overlay.HgiCullModeCount }
}
extension pxr.HgiWinding {
  @_documentation(visibility: internal) public static var HgiWindingClockwise: pxr.HgiWinding { Overlay.HgiWindingClockwise }
  @_documentation(visibility: internal) public static var HgiWindingCounterClockwise: pxr.HgiWinding { Overlay.HgiWindingCounterClockwise }
  @_documentation(visibility: internal) public static var HgiWindingCount: pxr.HgiWinding { Overlay.HgiWindingCount }
}
extension pxr.HgiBlendOp {
  @_documentation(visibility: internal) public static var HgiBlendOpAdd: pxr.HgiBlendOp { Overlay.HgiBlendOpAdd }
  @_documentation(visibility: internal) public static var HgiBlendOpSubtract: pxr.HgiBlendOp { Overlay.HgiBlendOpSubtract }
  @_documentation(visibility: internal) public static var HgiBlendOpReverseSubtract: pxr.HgiBlendOp { Overlay.HgiBlendOpReverseSubtract }
  @_documentation(visibility: internal) public static var HgiBlendOpMin: pxr.HgiBlendOp { Overlay.HgiBlendOpMin }
  @_documentation(visibility: internal) public static var HgiBlendOpMax: pxr.HgiBlendOp { Overlay.HgiBlendOpMax }
  @_documentation(visibility: internal) public static var HgiBlendOpCount: pxr.HgiBlendOp { Overlay.HgiBlendOpCount }
}
extension pxr.HgiBlendFactor {
  @_documentation(visibility: internal) public static var HgiBlendFactorZero: pxr.HgiBlendFactor { Overlay.HgiBlendFactorZero }
  @_documentation(visibility: internal) public static var HgiBlendFactorOne: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOne }
  @_documentation(visibility: internal) public static var HgiBlendFactorSrcColor: pxr.HgiBlendFactor { Overlay.HgiBlendFactorSrcColor }
  @_documentation(visibility: internal) public static var HgiBlendFactorOneMinusSrcColor: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOneMinusSrcColor }
  @_documentation(visibility: internal) public static var HgiBlendFactorDstColor: pxr.HgiBlendFactor { Overlay.HgiBlendFactorDstColor }
  @_documentation(visibility: internal) public static var HgiBlendFactorOneMinusDstColor: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOneMinusDstColor }
  @_documentation(visibility: internal) public static var HgiBlendFactorSrcAlpha: pxr.HgiBlendFactor { Overlay.HgiBlendFactorSrcAlpha }
  @_documentation(visibility: internal) public static var HgiBlendFactorOneMinusSrcAlpha: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOneMinusSrcAlpha }
  @_documentation(visibility: internal) public static var HgiBlendFactorDstAlpha: pxr.HgiBlendFactor { Overlay.HgiBlendFactorDstAlpha }
  @_documentation(visibility: internal) public static var HgiBlendFactorOneMinusDstAlpha: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOneMinusDstAlpha }
  @_documentation(visibility: internal) public static var HgiBlendFactorConstantColor: pxr.HgiBlendFactor { Overlay.HgiBlendFactorConstantColor }
  @_documentation(visibility: internal) public static var HgiBlendFactorOneMinusConstantColor: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOneMinusConstantColor }
  @_documentation(visibility: internal) public static var HgiBlendFactorConstantAlpha: pxr.HgiBlendFactor { Overlay.HgiBlendFactorConstantAlpha }
  @_documentation(visibility: internal) public static var HgiBlendFactorOneMinusConstantAlpha: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOneMinusConstantAlpha }
  @_documentation(visibility: internal) public static var HgiBlendFactorSrcAlphaSaturate: pxr.HgiBlendFactor { Overlay.HgiBlendFactorSrcAlphaSaturate }
  @_documentation(visibility: internal) public static var HgiBlendFactorSrc1Color: pxr.HgiBlendFactor { Overlay.HgiBlendFactorSrc1Color }
  @_documentation(visibility: internal) public static var HgiBlendFactorOneMinusSrc1Color: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOneMinusSrc1Color }
  @_documentation(visibility: internal) public static var HgiBlendFactorSrc1Alpha: pxr.HgiBlendFactor { Overlay.HgiBlendFactorSrc1Alpha }
  @_documentation(visibility: internal) public static var HgiBlendFactorOneMinusSrc1Alpha: pxr.HgiBlendFactor { Overlay.HgiBlendFactorOneMinusSrc1Alpha }
  @_documentation(visibility: internal) public static var HgiBlendFactorCount: pxr.HgiBlendFactor { Overlay.HgiBlendFactorCount }
}
extension pxr.HgiColorMaskBits {
  @_documentation(visibility: internal) public static var HgiColorMaskRed: pxr.HgiColorMaskBits { Overlay.HgiColorMaskRed }
  @_documentation(visibility: internal) public static var HgiColorMaskGreen: pxr.HgiColorMaskBits { Overlay.HgiColorMaskGreen }
  @_documentation(visibility: internal) public static var HgiColorMaskBlue: pxr.HgiColorMaskBits { Overlay.HgiColorMaskBlue }
  @_documentation(visibility: internal) public static var HgiColorMaskAlpha: pxr.HgiColorMaskBits { Overlay.HgiColorMaskAlpha }
}
extension pxr.HgiCompareFunction {
  @_documentation(visibility: internal) public static var HgiCompareFunctionNever: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionNever }
  @_documentation(visibility: internal) public static var HgiCompareFunctionLess: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionLess }
  @_documentation(visibility: internal) public static var HgiCompareFunctionEqual: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionEqual }
  @_documentation(visibility: internal) public static var HgiCompareFunctionLEqual: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionLEqual }
  @_documentation(visibility: internal) public static var HgiCompareFunctionGreater: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionGreater }
  @_documentation(visibility: internal) public static var HgiCompareFunctionNotEqual: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionNotEqual }
  @_documentation(visibility: internal) public static var HgiCompareFunctionGEqual: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionGEqual }
  @_documentation(visibility: internal) public static var HgiCompareFunctionAlways: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionAlways }
  @_documentation(visibility: internal) public static var HgiCompareFunctionCount: pxr.HgiCompareFunction { Overlay.HgiCompareFunctionCount }
}
extension pxr.HgiStencilOp {
  @_documentation(visibility: internal) public static var HgiStencilOpKeep: pxr.HgiStencilOp { Overlay.HgiStencilOpKeep }
  @_documentation(visibility: internal) public static var HgiStencilOpZero: pxr.HgiStencilOp { Overlay.HgiStencilOpZero }
  @_documentation(visibility: internal) public static var HgiStencilOpReplace: pxr.HgiStencilOp { Overlay.HgiStencilOpReplace }
  @_documentation(visibility: internal) public static var HgiStencilOpIncrementClamp: pxr.HgiStencilOp { Overlay.HgiStencilOpIncrementClamp }
  @_documentation(visibility: internal) public static var HgiStencilOpDecrementClamp: pxr.HgiStencilOp { Overlay.HgiStencilOpDecrementClamp }
  @_documentation(visibility: internal) public static var HgiStencilOpInvert: pxr.HgiStencilOp { Overlay.HgiStencilOpInvert }
  @_documentation(visibility: internal) public static var HgiStencilOpIncrementWrap: pxr.HgiStencilOp { Overlay.HgiStencilOpIncrementWrap }
  @_documentation(visibility: internal) public static var HgiStencilOpDecrementWrap: pxr.HgiStencilOp { Overlay.HgiStencilOpDecrementWrap }
  @_documentation(visibility: internal) public static var HgiStencilOpCount: pxr.HgiStencilOp { Overlay.HgiStencilOpCount }
}
extension pxr.HgiComponentSwizzle {
  @_documentation(visibility: internal) public static var HgiComponentSwizzleZero: pxr.HgiComponentSwizzle { Overlay.HgiComponentSwizzleZero }
  @_documentation(visibility: internal) public static var HgiComponentSwizzleOne: pxr.HgiComponentSwizzle { Overlay.HgiComponentSwizzleOne }
  @_documentation(visibility: internal) public static var HgiComponentSwizzleR: pxr.HgiComponentSwizzle { Overlay.HgiComponentSwizzleR }
  @_documentation(visibility: internal) public static var HgiComponentSwizzleG: pxr.HgiComponentSwizzle { Overlay.HgiComponentSwizzleG }
  @_documentation(visibility: internal) public static var HgiComponentSwizzleB: pxr.HgiComponentSwizzle { Overlay.HgiComponentSwizzleB }
  @_documentation(visibility: internal) public static var HgiComponentSwizzleA: pxr.HgiComponentSwizzle { Overlay.HgiComponentSwizzleA }
  @_documentation(visibility: internal) public static var HgiComponentSwizzleCount: pxr.HgiComponentSwizzle { Overlay.HgiComponentSwizzleCount }
}
extension pxr.HgiPrimitiveType {
  @_documentation(visibility: internal) public static var HgiPrimitiveTypePointList: pxr.HgiPrimitiveType { Overlay.HgiPrimitiveTypePointList }
  @_documentation(visibility: internal) public static var HgiPrimitiveTypeLineList: pxr.HgiPrimitiveType { Overlay.HgiPrimitiveTypeLineList }
  @_documentation(visibility: internal) public static var HgiPrimitiveTypeLineStrip: pxr.HgiPrimitiveType { Overlay.HgiPrimitiveTypeLineStrip }
  @_documentation(visibility: internal) public static var HgiPrimitiveTypeTriangleList: pxr.HgiPrimitiveType { Overlay.HgiPrimitiveTypeTriangleList }
  @_documentation(visibility: internal) public static var HgiPrimitiveTypePatchList: pxr.HgiPrimitiveType { Overlay.HgiPrimitiveTypePatchList }
  @_documentation(visibility: internal) public static var HgiPrimitiveTypeLineListWithAdjacency: pxr.HgiPrimitiveType { Overlay.HgiPrimitiveTypeLineListWithAdjacency }
  @_documentation(visibility: internal) public static var HgiPrimitiveTypeCount: pxr.HgiPrimitiveType { Overlay.HgiPrimitiveTypeCount }
}
extension pxr.HgiVertexBufferStepFunction {
  @_documentation(visibility: internal) public static var HgiVertexBufferStepFunctionConstant: pxr.HgiVertexBufferStepFunction { Overlay.HgiVertexBufferStepFunctionConstant }
  @_documentation(visibility: internal) public static var HgiVertexBufferStepFunctionPerVertex: pxr.HgiVertexBufferStepFunction { Overlay.HgiVertexBufferStepFunctionPerVertex }
  @_documentation(visibility: internal) public static var HgiVertexBufferStepFunctionPerInstance: pxr.HgiVertexBufferStepFunction { Overlay.HgiVertexBufferStepFunctionPerInstance }
  @_documentation(visibility: internal) public static var HgiVertexBufferStepFunctionPerPatch: pxr.HgiVertexBufferStepFunction { Overlay.HgiVertexBufferStepFunctionPerPatch }
  @_documentation(visibility: internal) public static var HgiVertexBufferStepFunctionPerPatchControlPoint: pxr.HgiVertexBufferStepFunction { Overlay.HgiVertexBufferStepFunctionPerPatchControlPoint }
  @_documentation(visibility: internal) public static var HgiVertexBufferStepFunctionPerDrawCommand: pxr.HgiVertexBufferStepFunction { Overlay.HgiVertexBufferStepFunctionPerDrawCommand }
  @_documentation(visibility: internal) public static var HgiVertexBufferStepFunctionCount: pxr.HgiVertexBufferStepFunction { Overlay.HgiVertexBufferStepFunctionCount }
}
extension pxr.HgiSubmitWaitType {
  @_documentation(visibility: internal) public static var HgiSubmitWaitTypeNoWait: pxr.HgiSubmitWaitType { Overlay.HgiSubmitWaitTypeNoWait }
  @_documentation(visibility: internal) public static var HgiSubmitWaitTypeWaitUntilCompleted: pxr.HgiSubmitWaitType { Overlay.HgiSubmitWaitTypeWaitUntilCompleted }
}
extension pxr.HgiMemoryBarrierBits {
  @_documentation(visibility: internal) public static var HgiMemoryBarrierNone: pxr.HgiMemoryBarrierBits { Overlay.HgiMemoryBarrierNone }
  @_documentation(visibility: internal) public static var HgiMemoryBarrierAll: pxr.HgiMemoryBarrierBits { Overlay.HgiMemoryBarrierAll }
}
extension pxr.HgiBindingType {
  @_documentation(visibility: internal) public static var HgiBindingTypeValue: pxr.HgiBindingType { Overlay.HgiBindingTypeValue }
  @_documentation(visibility: internal) public static var HgiBindingTypeUniformValue: pxr.HgiBindingType { Overlay.HgiBindingTypeUniformValue }
  @_documentation(visibility: internal) public static var HgiBindingTypeArray: pxr.HgiBindingType { Overlay.HgiBindingTypeArray }
  @_documentation(visibility: internal) public static var HgiBindingTypeUniformArray: pxr.HgiBindingType { Overlay.HgiBindingTypeUniformArray }
  @_documentation(visibility: internal) public static var HgiBindingTypePointer: pxr.HgiBindingType { Overlay.HgiBindingTypePointer }
}
extension pxr.HgiInterpolationType {
  @_documentation(visibility: internal) public static var HgiInterpolationDefault: pxr.HgiInterpolationType { Overlay.HgiInterpolationDefault }
  @_documentation(visibility: internal) public static var HgiInterpolationFlat: pxr.HgiInterpolationType { Overlay.HgiInterpolationFlat }
  @_documentation(visibility: internal) public static var HgiInterpolationNoPerspective: pxr.HgiInterpolationType { Overlay.HgiInterpolationNoPerspective }
}
extension pxr.HgiSamplingType {
  @_documentation(visibility: internal) public static var HgiSamplingDefault: pxr.HgiSamplingType { Overlay.HgiSamplingDefault }
  @_documentation(visibility: internal) public static var HgiSamplingCentroid: pxr.HgiSamplingType { Overlay.HgiSamplingCentroid }
  @_documentation(visibility: internal) public static var HgiSamplingSample: pxr.HgiSamplingType { Overlay.HgiSamplingSample }
}
extension pxr.HgiStorageType {
  @_documentation(visibility: internal) public static var HgiStorageDefault: pxr.HgiStorageType { Overlay.HgiStorageDefault }
  @_documentation(visibility: internal) public static var HgiStoragePatch: pxr.HgiStorageType { Overlay.HgiStoragePatch }
}
extension pxr.HgiShaderTextureType {
  @_documentation(visibility: internal) public static var HgiShaderTextureTypeTexture: pxr.HgiShaderTextureType { Overlay.HgiShaderTextureTypeTexture }
  @_documentation(visibility: internal) public static var HgiShaderTextureTypeShadowTexture: pxr.HgiShaderTextureType { Overlay.HgiShaderTextureTypeShadowTexture }
  @_documentation(visibility: internal) public static var HgiShaderTextureTypeArrayTexture: pxr.HgiShaderTextureType { Overlay.HgiShaderTextureTypeArrayTexture }
}
extension pxr.HgiComputeDispatch {
  @_documentation(visibility: internal) public static var HgiComputeDispatchSerial: pxr.HgiComputeDispatch { Overlay.HgiComputeDispatchSerial }
  @_documentation(visibility: internal) public static var HgiComputeDispatchConcurrent: pxr.HgiComputeDispatch { Overlay.HgiComputeDispatchConcurrent }
}
extension pxr.HgiFormat {
  @_documentation(visibility: internal) public static var HgiFormatInvalid: pxr.HgiFormat { Overlay.HgiFormatInvalid }
  @_documentation(visibility: internal) public static var HgiFormatUNorm8: pxr.HgiFormat { Overlay.HgiFormatUNorm8 }
  @_documentation(visibility: internal) public static var HgiFormatUNorm8Vec2: pxr.HgiFormat { Overlay.HgiFormatUNorm8Vec2 }
  @_documentation(visibility: internal) public static var HgiFormatUNorm8Vec4: pxr.HgiFormat { Overlay.HgiFormatUNorm8Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatSNorm8: pxr.HgiFormat { Overlay.HgiFormatSNorm8 }
  @_documentation(visibility: internal) public static var HgiFormatSNorm8Vec2: pxr.HgiFormat { Overlay.HgiFormatSNorm8Vec2 }
  @_documentation(visibility: internal) public static var HgiFormatSNorm8Vec4: pxr.HgiFormat { Overlay.HgiFormatSNorm8Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatFloat16: pxr.HgiFormat { Overlay.HgiFormatFloat16 }
  @_documentation(visibility: internal) public static var HgiFormatFloat16Vec2: pxr.HgiFormat { Overlay.HgiFormatFloat16Vec2 }
  @_documentation(visibility: internal) public static var HgiFormatFloat16Vec3: pxr.HgiFormat { Overlay.HgiFormatFloat16Vec3 }
  @_documentation(visibility: internal) public static var HgiFormatFloat16Vec4: pxr.HgiFormat { Overlay.HgiFormatFloat16Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatFloat32: pxr.HgiFormat { Overlay.HgiFormatFloat32 }
  @_documentation(visibility: internal) public static var HgiFormatFloat32Vec2: pxr.HgiFormat { Overlay.HgiFormatFloat32Vec2 }
  @_documentation(visibility: internal) public static var HgiFormatFloat32Vec3: pxr.HgiFormat { Overlay.HgiFormatFloat32Vec3 }
  @_documentation(visibility: internal) public static var HgiFormatFloat32Vec4: pxr.HgiFormat { Overlay.HgiFormatFloat32Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatInt16: pxr.HgiFormat { Overlay.HgiFormatInt16 }
  @_documentation(visibility: internal) public static var HgiFormatInt16Vec2: pxr.HgiFormat { Overlay.HgiFormatInt16Vec2 }
  @_documentation(visibility: internal) public static var HgiFormatInt16Vec3: pxr.HgiFormat { Overlay.HgiFormatInt16Vec3 }
  @_documentation(visibility: internal) public static var HgiFormatInt16Vec4: pxr.HgiFormat { Overlay.HgiFormatInt16Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatUInt16: pxr.HgiFormat { Overlay.HgiFormatUInt16 }
  @_documentation(visibility: internal) public static var HgiFormatUInt16Vec2: pxr.HgiFormat { Overlay.HgiFormatUInt16Vec2 }
  @_documentation(visibility: internal) public static var HgiFormatUInt16Vec3: pxr.HgiFormat { Overlay.HgiFormatUInt16Vec3 }
  @_documentation(visibility: internal) public static var HgiFormatUInt16Vec4: pxr.HgiFormat { Overlay.HgiFormatUInt16Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatInt32: pxr.HgiFormat { Overlay.HgiFormatInt32 }
  @_documentation(visibility: internal) public static var HgiFormatInt32Vec2: pxr.HgiFormat { Overlay.HgiFormatInt32Vec2 }
  @_documentation(visibility: internal) public static var HgiFormatInt32Vec3: pxr.HgiFormat { Overlay.HgiFormatInt32Vec3 }
  @_documentation(visibility: internal) public static var HgiFormatInt32Vec4: pxr.HgiFormat { Overlay.HgiFormatInt32Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatUNorm8Vec4srgb: pxr.HgiFormat { Overlay.HgiFormatUNorm8Vec4srgb }
  @_documentation(visibility: internal) public static var HgiFormatBC6FloatVec3: pxr.HgiFormat { Overlay.HgiFormatBC6FloatVec3 }
  @_documentation(visibility: internal) public static var HgiFormatBC6UFloatVec3: pxr.HgiFormat { Overlay.HgiFormatBC6UFloatVec3 }
  @_documentation(visibility: internal) public static var HgiFormatBC7UNorm8Vec4: pxr.HgiFormat { Overlay.HgiFormatBC7UNorm8Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatBC7UNorm8Vec4srgb: pxr.HgiFormat { Overlay.HgiFormatBC7UNorm8Vec4srgb }
  @_documentation(visibility: internal) public static var HgiFormatBC1UNorm8Vec4: pxr.HgiFormat { Overlay.HgiFormatBC1UNorm8Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatBC3UNorm8Vec4: pxr.HgiFormat { Overlay.HgiFormatBC3UNorm8Vec4 }
  @_documentation(visibility: internal) public static var HgiFormatFloat32UInt8: pxr.HgiFormat { Overlay.HgiFormatFloat32UInt8 }
  @_documentation(visibility: internal) public static var HgiFormatPackedInt1010102: pxr.HgiFormat { Overlay.HgiFormatPackedInt1010102 }
  @_documentation(visibility: internal) public static var HgiFormatCount: pxr.HgiFormat { Overlay.HgiFormatCount }
}
extension pxr.HgiTessellationState.PatchType {
  @_documentation(visibility: internal) public static var Triangle: pxr.HgiTessellationState.PatchType { Overlay.HgiTessellationState.Triangle }
  @_documentation(visibility: internal) public static var Quad: pxr.HgiTessellationState.PatchType { Overlay.HgiTessellationState.Quad }
  @_documentation(visibility: internal) public static var Isoline: pxr.HgiTessellationState.PatchType { Overlay.HgiTessellationState.Isoline }
}
extension pxr.HgiTessellationState.TessFactorMode {
  @_documentation(visibility: internal) public static var Constant: pxr.HgiTessellationState.TessFactorMode { Overlay.HgiTessellationState.Constant }
  @_documentation(visibility: internal) public static var TessControl: pxr.HgiTessellationState.TessFactorMode { Overlay.HgiTessellationState.TessControl }
  @_documentation(visibility: internal) public static var TessVertex: pxr.HgiTessellationState.TessFactorMode { Overlay.HgiTessellationState.TessVertex }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT) && canImport(Metal)
extension pxr.HgiMetalArgumentIndex {
  @_documentation(visibility: internal) public static var HgiMetalArgumentIndexICB: pxr.HgiMetalArgumentIndex { Overlay.HgiMetalArgumentIndexICB }
  @_documentation(visibility: internal) public static var HgiMetalArgumentIndexConstants: pxr.HgiMetalArgumentIndex { Overlay.HgiMetalArgumentIndexConstants }
  @_documentation(visibility: internal) public static var HgiMetalArgumentIndexSamplers: pxr.HgiMetalArgumentIndex { Overlay.HgiMetalArgumentIndexSamplers }
  @_documentation(visibility: internal) public static var HgiMetalArgumentIndexTextures: pxr.HgiMetalArgumentIndex { Overlay.HgiMetalArgumentIndexTextures }
  @_documentation(visibility: internal) public static var HgiMetalArgumentIndexBuffers: pxr.HgiMetalArgumentIndex { Overlay.HgiMetalArgumentIndexBuffers }
}
extension pxr.HgiMetalArgumentOffset {
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetBufferVS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetBufferVS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetBufferFS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetBufferFS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetSamplerVS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetSamplerVS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetSamplerFS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetSamplerFS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetTextureVS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetTextureVS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetTextureFS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetTextureFS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetBufferCS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetBufferCS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetSamplerCS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetSamplerCS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetTextureCS: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetTextureCS }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetConstants: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetConstants }
  @_documentation(visibility: internal) public static var HgiMetalArgumentOffsetSize: pxr.HgiMetalArgumentOffset { Overlay.HgiMetalArgumentOffsetSize }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT) && canImport(Metal)
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.HdWrap {
  @_documentation(visibility: internal) public static var HdWrapClamp: pxr.HdWrap { Overlay.HdWrapClamp }
  @_documentation(visibility: internal) public static var HdWrapRepeat: pxr.HdWrap { Overlay.HdWrapRepeat }
  @_documentation(visibility: internal) public static var HdWrapBlack: pxr.HdWrap { Overlay.HdWrapBlack }
  @_documentation(visibility: internal) public static var HdWrapMirror: pxr.HdWrap { Overlay.HdWrapMirror }
  @_documentation(visibility: internal) public static var HdWrapNoOpinion: pxr.HdWrap { Overlay.HdWrapNoOpinion }
  @_documentation(visibility: internal) public static var HdWrapLegacyNoOpinionFallbackRepeat: pxr.HdWrap { Overlay.HdWrapLegacyNoOpinionFallbackRepeat }
  @_documentation(visibility: internal) public static var HdWrapUseMetadata: pxr.HdWrap { Overlay.HdWrapUseMetadata }
  @_documentation(visibility: internal) public static var HdWrapLegacy: pxr.HdWrap { Overlay.HdWrapLegacy }
}
extension pxr.HdMinFilter {
  @_documentation(visibility: internal) public static var HdMinFilterNearest: pxr.HdMinFilter { Overlay.HdMinFilterNearest }
  @_documentation(visibility: internal) public static var HdMinFilterLinear: pxr.HdMinFilter { Overlay.HdMinFilterLinear }
  @_documentation(visibility: internal) public static var HdMinFilterNearestMipmapNearest: pxr.HdMinFilter { Overlay.HdMinFilterNearestMipmapNearest }
  @_documentation(visibility: internal) public static var HdMinFilterLinearMipmapNearest: pxr.HdMinFilter { Overlay.HdMinFilterLinearMipmapNearest }
  @_documentation(visibility: internal) public static var HdMinFilterNearestMipmapLinear: pxr.HdMinFilter { Overlay.HdMinFilterNearestMipmapLinear }
  @_documentation(visibility: internal) public static var HdMinFilterLinearMipmapLinear: pxr.HdMinFilter { Overlay.HdMinFilterLinearMipmapLinear }
}
extension pxr.HdMagFilter {
  @_documentation(visibility: internal) public static var HdMagFilterNearest: pxr.HdMagFilter { Overlay.HdMagFilterNearest }
  @_documentation(visibility: internal) public static var HdMagFilterLinear: pxr.HdMagFilter { Overlay.HdMagFilterLinear }
}
extension pxr.HdBorderColor {
  @_documentation(visibility: internal) public static var HdBorderColorTransparentBlack: pxr.HdBorderColor { Overlay.HdBorderColorTransparentBlack }
  @_documentation(visibility: internal) public static var HdBorderColorOpaqueBlack: pxr.HdBorderColor { Overlay.HdBorderColorOpaqueBlack }
  @_documentation(visibility: internal) public static var HdBorderColorOpaqueWhite: pxr.HdBorderColor { Overlay.HdBorderColorOpaqueWhite }
}
extension pxr.HdType {
  @_documentation(visibility: internal) public static var HdTypeInvalid: pxr.HdType { Overlay.HdTypeInvalid }
  @_documentation(visibility: internal) public static var HdTypeBool: pxr.HdType { Overlay.HdTypeBool }
  @_documentation(visibility: internal) public static var HdTypeUInt8: pxr.HdType { Overlay.HdTypeUInt8 }
  @_documentation(visibility: internal) public static var HdTypeUInt16: pxr.HdType { Overlay.HdTypeUInt16 }
  @_documentation(visibility: internal) public static var HdTypeInt8: pxr.HdType { Overlay.HdTypeInt8 }
  @_documentation(visibility: internal) public static var HdTypeInt16: pxr.HdType { Overlay.HdTypeInt16 }
  @_documentation(visibility: internal) public static var HdTypeInt32: pxr.HdType { Overlay.HdTypeInt32 }
  @_documentation(visibility: internal) public static var HdTypeInt32Vec2: pxr.HdType { Overlay.HdTypeInt32Vec2 }
  @_documentation(visibility: internal) public static var HdTypeInt32Vec3: pxr.HdType { Overlay.HdTypeInt32Vec3 }
  @_documentation(visibility: internal) public static var HdTypeInt32Vec4: pxr.HdType { Overlay.HdTypeInt32Vec4 }
  @_documentation(visibility: internal) public static var HdTypeUInt32: pxr.HdType { Overlay.HdTypeUInt32 }
  @_documentation(visibility: internal) public static var HdTypeUInt32Vec2: pxr.HdType { Overlay.HdTypeUInt32Vec2 }
  @_documentation(visibility: internal) public static var HdTypeUInt32Vec3: pxr.HdType { Overlay.HdTypeUInt32Vec3 }
  @_documentation(visibility: internal) public static var HdTypeUInt32Vec4: pxr.HdType { Overlay.HdTypeUInt32Vec4 }
  @_documentation(visibility: internal) public static var HdTypeFloat: pxr.HdType { Overlay.HdTypeFloat }
  @_documentation(visibility: internal) public static var HdTypeFloatVec2: pxr.HdType { Overlay.HdTypeFloatVec2 }
  @_documentation(visibility: internal) public static var HdTypeFloatVec3: pxr.HdType { Overlay.HdTypeFloatVec3 }
  @_documentation(visibility: internal) public static var HdTypeFloatVec4: pxr.HdType { Overlay.HdTypeFloatVec4 }
  @_documentation(visibility: internal) public static var HdTypeFloatMat3: pxr.HdType { Overlay.HdTypeFloatMat3 }
  @_documentation(visibility: internal) public static var HdTypeFloatMat4: pxr.HdType { Overlay.HdTypeFloatMat4 }
  @_documentation(visibility: internal) public static var HdTypeDouble: pxr.HdType { Overlay.HdTypeDouble }
  @_documentation(visibility: internal) public static var HdTypeDoubleVec2: pxr.HdType { Overlay.HdTypeDoubleVec2 }
  @_documentation(visibility: internal) public static var HdTypeDoubleVec3: pxr.HdType { Overlay.HdTypeDoubleVec3 }
  @_documentation(visibility: internal) public static var HdTypeDoubleVec4: pxr.HdType { Overlay.HdTypeDoubleVec4 }
  @_documentation(visibility: internal) public static var HdTypeDoubleMat3: pxr.HdType { Overlay.HdTypeDoubleMat3 }
  @_documentation(visibility: internal) public static var HdTypeDoubleMat4: pxr.HdType { Overlay.HdTypeDoubleMat4 }
  @_documentation(visibility: internal) public static var HdTypeHalfFloat: pxr.HdType { Overlay.HdTypeHalfFloat }
  @_documentation(visibility: internal) public static var HdTypeHalfFloatVec2: pxr.HdType { Overlay.HdTypeHalfFloatVec2 }
  @_documentation(visibility: internal) public static var HdTypeHalfFloatVec3: pxr.HdType { Overlay.HdTypeHalfFloatVec3 }
  @_documentation(visibility: internal) public static var HdTypeHalfFloatVec4: pxr.HdType { Overlay.HdTypeHalfFloatVec4 }
  @_documentation(visibility: internal) public static var HdTypeInt32_2_10_10_10_REV: pxr.HdType { Overlay.HdTypeInt32_2_10_10_10_REV }
  @_documentation(visibility: internal) public static var HdTypeCount: pxr.HdType { Overlay.HdTypeCount }
}
extension pxr.HdFormat {
  @_documentation(visibility: internal) public static var HdFormatInvalid: pxr.HdFormat { Overlay.HdFormatInvalid }
  @_documentation(visibility: internal) public static var HdFormatUNorm8: pxr.HdFormat { Overlay.HdFormatUNorm8 }
  @_documentation(visibility: internal) public static var HdFormatUNorm8Vec2: pxr.HdFormat { Overlay.HdFormatUNorm8Vec2 }
  @_documentation(visibility: internal) public static var HdFormatUNorm8Vec3: pxr.HdFormat { Overlay.HdFormatUNorm8Vec3 }
  @_documentation(visibility: internal) public static var HdFormatUNorm8Vec4: pxr.HdFormat { Overlay.HdFormatUNorm8Vec4 }
  @_documentation(visibility: internal) public static var HdFormatSNorm8: pxr.HdFormat { Overlay.HdFormatSNorm8 }
  @_documentation(visibility: internal) public static var HdFormatSNorm8Vec2: pxr.HdFormat { Overlay.HdFormatSNorm8Vec2 }
  @_documentation(visibility: internal) public static var HdFormatSNorm8Vec3: pxr.HdFormat { Overlay.HdFormatSNorm8Vec3 }
  @_documentation(visibility: internal) public static var HdFormatSNorm8Vec4: pxr.HdFormat { Overlay.HdFormatSNorm8Vec4 }
  @_documentation(visibility: internal) public static var HdFormatFloat16: pxr.HdFormat { Overlay.HdFormatFloat16 }
  @_documentation(visibility: internal) public static var HdFormatFloat16Vec2: pxr.HdFormat { Overlay.HdFormatFloat16Vec2 }
  @_documentation(visibility: internal) public static var HdFormatFloat16Vec3: pxr.HdFormat { Overlay.HdFormatFloat16Vec3 }
  @_documentation(visibility: internal) public static var HdFormatFloat16Vec4: pxr.HdFormat { Overlay.HdFormatFloat16Vec4 }
  @_documentation(visibility: internal) public static var HdFormatFloat32: pxr.HdFormat { Overlay.HdFormatFloat32 }
  @_documentation(visibility: internal) public static var HdFormatFloat32Vec2: pxr.HdFormat { Overlay.HdFormatFloat32Vec2 }
  @_documentation(visibility: internal) public static var HdFormatFloat32Vec3: pxr.HdFormat { Overlay.HdFormatFloat32Vec3 }
  @_documentation(visibility: internal) public static var HdFormatFloat32Vec4: pxr.HdFormat { Overlay.HdFormatFloat32Vec4 }
  @_documentation(visibility: internal) public static var HdFormatInt16: pxr.HdFormat { Overlay.HdFormatInt16 }
  @_documentation(visibility: internal) public static var HdFormatInt16Vec2: pxr.HdFormat { Overlay.HdFormatInt16Vec2 }
  @_documentation(visibility: internal) public static var HdFormatInt16Vec3: pxr.HdFormat { Overlay.HdFormatInt16Vec3 }
  @_documentation(visibility: internal) public static var HdFormatInt16Vec4: pxr.HdFormat { Overlay.HdFormatInt16Vec4 }
  @_documentation(visibility: internal) public static var HdFormatUInt16: pxr.HdFormat { Overlay.HdFormatUInt16 }
  @_documentation(visibility: internal) public static var HdFormatUInt16Vec2: pxr.HdFormat { Overlay.HdFormatUInt16Vec2 }
  @_documentation(visibility: internal) public static var HdFormatUInt16Vec3: pxr.HdFormat { Overlay.HdFormatUInt16Vec3 }
  @_documentation(visibility: internal) public static var HdFormatUInt16Vec4: pxr.HdFormat { Overlay.HdFormatUInt16Vec4 }
  @_documentation(visibility: internal) public static var HdFormatInt32: pxr.HdFormat { Overlay.HdFormatInt32 }
  @_documentation(visibility: internal) public static var HdFormatInt32Vec2: pxr.HdFormat { Overlay.HdFormatInt32Vec2 }
  @_documentation(visibility: internal) public static var HdFormatInt32Vec3: pxr.HdFormat { Overlay.HdFormatInt32Vec3 }
  @_documentation(visibility: internal) public static var HdFormatInt32Vec4: pxr.HdFormat { Overlay.HdFormatInt32Vec4 }
  @_documentation(visibility: internal) public static var HdFormatFloat32UInt8: pxr.HdFormat { Overlay.HdFormatFloat32UInt8 }
  @_documentation(visibility: internal) public static var HdFormatCount: pxr.HdFormat { Overlay.HdFormatCount }
}
extension pxr.HdCompareFunction {
  @_documentation(visibility: internal) public static var HdCmpFuncNever: pxr.HdCompareFunction { Overlay.HdCmpFuncNever }
  @_documentation(visibility: internal) public static var HdCmpFuncLess: pxr.HdCompareFunction { Overlay.HdCmpFuncLess }
  @_documentation(visibility: internal) public static var HdCmpFuncEqual: pxr.HdCompareFunction { Overlay.HdCmpFuncEqual }
  @_documentation(visibility: internal) public static var HdCmpFuncLEqual: pxr.HdCompareFunction { Overlay.HdCmpFuncLEqual }
  @_documentation(visibility: internal) public static var HdCmpFuncGreater: pxr.HdCompareFunction { Overlay.HdCmpFuncGreater }
  @_documentation(visibility: internal) public static var HdCmpFuncNotEqual: pxr.HdCompareFunction { Overlay.HdCmpFuncNotEqual }
  @_documentation(visibility: internal) public static var HdCmpFuncGEqual: pxr.HdCompareFunction { Overlay.HdCmpFuncGEqual }
  @_documentation(visibility: internal) public static var HdCmpFuncAlways: pxr.HdCompareFunction { Overlay.HdCmpFuncAlways }
  @_documentation(visibility: internal) public static var HdCmpFuncLast: pxr.HdCompareFunction { Overlay.HdCmpFuncLast }
}
extension pxr.HdStencilOp {
  @_documentation(visibility: internal) public static var HdStencilOpKeep: pxr.HdStencilOp { Overlay.HdStencilOpKeep }
  @_documentation(visibility: internal) public static var HdStencilOpZero: pxr.HdStencilOp { Overlay.HdStencilOpZero }
  @_documentation(visibility: internal) public static var HdStencilOpReplace: pxr.HdStencilOp { Overlay.HdStencilOpReplace }
  @_documentation(visibility: internal) public static var HdStencilOpIncrement: pxr.HdStencilOp { Overlay.HdStencilOpIncrement }
  @_documentation(visibility: internal) public static var HdStencilOpIncrementWrap: pxr.HdStencilOp { Overlay.HdStencilOpIncrementWrap }
  @_documentation(visibility: internal) public static var HdStencilOpDecrement: pxr.HdStencilOp { Overlay.HdStencilOpDecrement }
  @_documentation(visibility: internal) public static var HdStencilOpDecrementWrap: pxr.HdStencilOp { Overlay.HdStencilOpDecrementWrap }
  @_documentation(visibility: internal) public static var HdStencilOpInvert: pxr.HdStencilOp { Overlay.HdStencilOpInvert }
  @_documentation(visibility: internal) public static var HdStencilOpLast: pxr.HdStencilOp { Overlay.HdStencilOpLast }
}
extension pxr.HdBlendOp {
  @_documentation(visibility: internal) public static var HdBlendOpAdd: pxr.HdBlendOp { Overlay.HdBlendOpAdd }
  @_documentation(visibility: internal) public static var HdBlendOpSubtract: pxr.HdBlendOp { Overlay.HdBlendOpSubtract }
  @_documentation(visibility: internal) public static var HdBlendOpReverseSubtract: pxr.HdBlendOp { Overlay.HdBlendOpReverseSubtract }
  @_documentation(visibility: internal) public static var HdBlendOpMin: pxr.HdBlendOp { Overlay.HdBlendOpMin }
  @_documentation(visibility: internal) public static var HdBlendOpMax: pxr.HdBlendOp { Overlay.HdBlendOpMax }
  @_documentation(visibility: internal) public static var HdBlendOpLast: pxr.HdBlendOp { Overlay.HdBlendOpLast }
}
extension pxr.HdBlendFactor {
  @_documentation(visibility: internal) public static var HdBlendFactorZero: pxr.HdBlendFactor { Overlay.HdBlendFactorZero }
  @_documentation(visibility: internal) public static var HdBlendFactorOne: pxr.HdBlendFactor { Overlay.HdBlendFactorOne }
  @_documentation(visibility: internal) public static var HdBlendFactorSrcColor: pxr.HdBlendFactor { Overlay.HdBlendFactorSrcColor }
  @_documentation(visibility: internal) public static var HdBlendFactorOneMinusSrcColor: pxr.HdBlendFactor { Overlay.HdBlendFactorOneMinusSrcColor }
  @_documentation(visibility: internal) public static var HdBlendFactorDstColor: pxr.HdBlendFactor { Overlay.HdBlendFactorDstColor }
  @_documentation(visibility: internal) public static var HdBlendFactorOneMinusDstColor: pxr.HdBlendFactor { Overlay.HdBlendFactorOneMinusDstColor }
  @_documentation(visibility: internal) public static var HdBlendFactorSrcAlpha: pxr.HdBlendFactor { Overlay.HdBlendFactorSrcAlpha }
  @_documentation(visibility: internal) public static var HdBlendFactorOneMinusSrcAlpha: pxr.HdBlendFactor { Overlay.HdBlendFactorOneMinusSrcAlpha }
  @_documentation(visibility: internal) public static var HdBlendFactorDstAlpha: pxr.HdBlendFactor { Overlay.HdBlendFactorDstAlpha }
  @_documentation(visibility: internal) public static var HdBlendFactorOneMinusDstAlpha: pxr.HdBlendFactor { Overlay.HdBlendFactorOneMinusDstAlpha }
  @_documentation(visibility: internal) public static var HdBlendFactorConstantColor: pxr.HdBlendFactor { Overlay.HdBlendFactorConstantColor }
  @_documentation(visibility: internal) public static var HdBlendFactorOneMinusConstantColor: pxr.HdBlendFactor { Overlay.HdBlendFactorOneMinusConstantColor }
  @_documentation(visibility: internal) public static var HdBlendFactorConstantAlpha: pxr.HdBlendFactor { Overlay.HdBlendFactorConstantAlpha }
  @_documentation(visibility: internal) public static var HdBlendFactorOneMinusConstantAlpha: pxr.HdBlendFactor { Overlay.HdBlendFactorOneMinusConstantAlpha }
  @_documentation(visibility: internal) public static var HdBlendFactorSrcAlphaSaturate: pxr.HdBlendFactor { Overlay.HdBlendFactorSrcAlphaSaturate }
  @_documentation(visibility: internal) public static var HdBlendFactorSrc1Color: pxr.HdBlendFactor { Overlay.HdBlendFactorSrc1Color }
  @_documentation(visibility: internal) public static var HdBlendFactorOneMinusSrc1Color: pxr.HdBlendFactor { Overlay.HdBlendFactorOneMinusSrc1Color }
  @_documentation(visibility: internal) public static var HdBlendFactorSrc1Alpha: pxr.HdBlendFactor { Overlay.HdBlendFactorSrc1Alpha }
  @_documentation(visibility: internal) public static var HdBlendFactorOneMinusSrc1Alpha: pxr.HdBlendFactor { Overlay.HdBlendFactorOneMinusSrc1Alpha }
  @_documentation(visibility: internal) public static var HdBlendFactorLast: pxr.HdBlendFactor { Overlay.HdBlendFactorLast }
}
extension pxr.HdCullStyle {
  @_documentation(visibility: internal) public static var HdCullStyleDontCare: pxr.HdCullStyle { Overlay.HdCullStyleDontCare }
  @_documentation(visibility: internal) public static var HdCullStyleNothing: pxr.HdCullStyle { Overlay.HdCullStyleNothing }
  @_documentation(visibility: internal) public static var HdCullStyleBack: pxr.HdCullStyle { Overlay.HdCullStyleBack }
  @_documentation(visibility: internal) public static var HdCullStyleFront: pxr.HdCullStyle { Overlay.HdCullStyleFront }
  @_documentation(visibility: internal) public static var HdCullStyleBackUnlessDoubleSided: pxr.HdCullStyle { Overlay.HdCullStyleBackUnlessDoubleSided }
  @_documentation(visibility: internal) public static var HdCullStyleFrontUnlessDoubleSided: pxr.HdCullStyle { Overlay.HdCullStyleFrontUnlessDoubleSided }
}
extension pxr.HdPolygonMode {
  @_documentation(visibility: internal) public static var HdPolygonModeFill: pxr.HdPolygonMode { Overlay.HdPolygonModeFill }
  @_documentation(visibility: internal) public static var HdPolygonModeLine: pxr.HdPolygonMode { Overlay.HdPolygonModeLine }
}
extension pxr.HdMeshGeomStyle {
  @_documentation(visibility: internal) public static var HdMeshGeomStyleInvalid: pxr.HdMeshGeomStyle { Overlay.HdMeshGeomStyleInvalid }
  @_documentation(visibility: internal) public static var HdMeshGeomStyleSurf: pxr.HdMeshGeomStyle { Overlay.HdMeshGeomStyleSurf }
  @_documentation(visibility: internal) public static var HdMeshGeomStyleEdgeOnly: pxr.HdMeshGeomStyle { Overlay.HdMeshGeomStyleEdgeOnly }
  @_documentation(visibility: internal) public static var HdMeshGeomStyleEdgeOnSurf: pxr.HdMeshGeomStyle { Overlay.HdMeshGeomStyleEdgeOnSurf }
  @_documentation(visibility: internal) public static var HdMeshGeomStyleHull: pxr.HdMeshGeomStyle { Overlay.HdMeshGeomStyleHull }
  @_documentation(visibility: internal) public static var HdMeshGeomStyleHullEdgeOnly: pxr.HdMeshGeomStyle { Overlay.HdMeshGeomStyleHullEdgeOnly }
  @_documentation(visibility: internal) public static var HdMeshGeomStyleHullEdgeOnSurf: pxr.HdMeshGeomStyle { Overlay.HdMeshGeomStyleHullEdgeOnSurf }
  @_documentation(visibility: internal) public static var HdMeshGeomStylePoints: pxr.HdMeshGeomStyle { Overlay.HdMeshGeomStylePoints }
}
extension pxr.HdBasisCurvesGeomStyle {
  @_documentation(visibility: internal) public static var HdBasisCurvesGeomStyleInvalid: pxr.HdBasisCurvesGeomStyle { Overlay.HdBasisCurvesGeomStyleInvalid }
  @_documentation(visibility: internal) public static var HdBasisCurvesGeomStyleWire: pxr.HdBasisCurvesGeomStyle { Overlay.HdBasisCurvesGeomStyleWire }
  @_documentation(visibility: internal) public static var HdBasisCurvesGeomStylePatch: pxr.HdBasisCurvesGeomStyle { Overlay.HdBasisCurvesGeomStylePatch }
  @_documentation(visibility: internal) public static var HdBasisCurvesGeomStylePoints: pxr.HdBasisCurvesGeomStyle { Overlay.HdBasisCurvesGeomStylePoints }
}
extension pxr.HdPointsGeomStyle {
  @_documentation(visibility: internal) public static var HdPointsGeomStyleInvalid: pxr.HdPointsGeomStyle { Overlay.HdPointsGeomStyleInvalid }
  @_documentation(visibility: internal) public static var HdPointsGeomStylePoints: pxr.HdPointsGeomStyle { Overlay.HdPointsGeomStylePoints }
}
extension pxr.HdInterpolation {
  @_documentation(visibility: internal) public static var HdInterpolationConstant: pxr.HdInterpolation { Overlay.HdInterpolationConstant }
  @_documentation(visibility: internal) public static var HdInterpolationUniform: pxr.HdInterpolation { Overlay.HdInterpolationUniform }
  @_documentation(visibility: internal) public static var HdInterpolationVarying: pxr.HdInterpolation { Overlay.HdInterpolationVarying }
  @_documentation(visibility: internal) public static var HdInterpolationVertex: pxr.HdInterpolation { Overlay.HdInterpolationVertex }
  @_documentation(visibility: internal) public static var HdInterpolationFaceVarying: pxr.HdInterpolation { Overlay.HdInterpolationFaceVarying }
  @_documentation(visibility: internal) public static var HdInterpolationInstance: pxr.HdInterpolation { Overlay.HdInterpolationInstance }
  @_documentation(visibility: internal) public static var HdInterpolationCount: pxr.HdInterpolation { Overlay.HdInterpolationCount }
}
extension pxr.HdDepthPriority {
  @_documentation(visibility: internal) public static var HdDepthPriorityNearest: pxr.HdDepthPriority { Overlay.HdDepthPriorityNearest }
  @_documentation(visibility: internal) public static var HdDepthPriorityFarthest: pxr.HdDepthPriority { Overlay.HdDepthPriorityFarthest }
  @_documentation(visibility: internal) public static var HdDepthPriorityCount: pxr.HdDepthPriority { Overlay.HdDepthPriorityCount }
}
extension pxr.HdBufferArrayUsageHintBits {
  @_documentation(visibility: internal) public static var HdBufferArrayUsageHintBitsImmutable: pxr.HdBufferArrayUsageHintBits { Overlay.HdBufferArrayUsageHintBitsImmutable }
  @_documentation(visibility: internal) public static var HdBufferArrayUsageHintBitsSizeVarying: pxr.HdBufferArrayUsageHintBits { Overlay.HdBufferArrayUsageHintBitsSizeVarying }
  @_documentation(visibility: internal) public static var HdBufferArrayUsageHintBitsUniform: pxr.HdBufferArrayUsageHintBits { Overlay.HdBufferArrayUsageHintBitsUniform }
  @_documentation(visibility: internal) public static var HdBufferArrayUsageHintBitsStorage: pxr.HdBufferArrayUsageHintBits { Overlay.HdBufferArrayUsageHintBitsStorage }
  @_documentation(visibility: internal) public static var HdBufferArrayUsageHintBitsVertex: pxr.HdBufferArrayUsageHintBits { Overlay.HdBufferArrayUsageHintBitsVertex }
  @_documentation(visibility: internal) public static var HdBufferArrayUsageHintBitsIndex: pxr.HdBufferArrayUsageHintBits { Overlay.HdBufferArrayUsageHintBitsIndex }
}
extension pxr.HdGeomSubset.`Type` {
  @_documentation(visibility: internal) public static var TypeFaceSet: pxr.HdGeomSubset.`Type` { Overlay.HdGeomSubset.TypeFaceSet }
}
extension pxr.HdCamera.DirtyBits {
  @_documentation(visibility: internal) public static var Clean: pxr.HdCamera.DirtyBits { Overlay.HdCamera.Clean }
  @_documentation(visibility: internal) public static var DirtyTransform: pxr.HdCamera.DirtyBits { Overlay.HdCamera.DirtyTransform }
  @_documentation(visibility: internal) public static var DirtyParams: pxr.HdCamera.DirtyBits { Overlay.HdCamera.DirtyParams }
  @_documentation(visibility: internal) public static var DirtyClipPlanes: pxr.HdCamera.DirtyBits { Overlay.HdCamera.DirtyClipPlanes }
  @_documentation(visibility: internal) public static var DirtyWindowPolicy: pxr.HdCamera.DirtyBits { Overlay.HdCamera.DirtyWindowPolicy }
  @_documentation(visibility: internal) public static var AllDirty: pxr.HdCamera.DirtyBits { Overlay.HdCamera.AllDirty }
}
extension pxr.HdCamera.Projection {
  @_documentation(visibility: internal) public static var Perspective: pxr.HdCamera.Projection { Overlay.HdCamera.Perspective }
  @_documentation(visibility: internal) public static var Orthographic: pxr.HdCamera.Projection { Overlay.HdCamera.Orthographic }
}
extension pxr.HdCollectionExpressionEvaluator.MatchKind {
  @_documentation(visibility: internal) public static var MatchAll: pxr.HdCollectionExpressionEvaluator.MatchKind { Overlay.HdCollectionExpressionEvaluator.MatchAll }
  @_documentation(visibility: internal) public static var ShallowestMatches: pxr.HdCollectionExpressionEvaluator.MatchKind { Overlay.HdCollectionExpressionEvaluator.ShallowestMatches }
  @_documentation(visibility: internal) public static var ShallowestMatchesAndAllDescendants: pxr.HdCollectionExpressionEvaluator.MatchKind { Overlay.HdCollectionExpressionEvaluator.ShallowestMatchesAndAllDescendants }
}
extension pxr.HdCoordSys.DirtyBits {
  @_documentation(visibility: internal) public static var Clean: pxr.HdCoordSys.DirtyBits { Overlay.HdCoordSys.Clean }
  @_documentation(visibility: internal) public static var DirtyName: pxr.HdCoordSys.DirtyBits { Overlay.HdCoordSys.DirtyName }
  @_documentation(visibility: internal) public static var DirtyTransform: pxr.HdCoordSys.DirtyBits { Overlay.HdCoordSys.DirtyTransform }
  @_documentation(visibility: internal) public static var AllDirty: pxr.HdCoordSys.DirtyBits { Overlay.HdCoordSys.AllDirty }
}
extension pxr.HdField.DirtyBits {
  @_documentation(visibility: internal) public static var Clean: pxr.HdField.DirtyBits { Overlay.HdField.Clean }
  @_documentation(visibility: internal) public static var DirtyTransform: pxr.HdField.DirtyBits { Overlay.HdField.DirtyTransform }
  @_documentation(visibility: internal) public static var DirtyParams: pxr.HdField.DirtyBits { Overlay.HdField.DirtyParams }
  @_documentation(visibility: internal) public static var AllDirty: pxr.HdField.DirtyBits { Overlay.HdField.AllDirty }
}
extension pxr.HdLight.DirtyBits {
  @_documentation(visibility: internal) public static var Clean: pxr.HdLight.DirtyBits { Overlay.HdLight.Clean }
  @_documentation(visibility: internal) public static var DirtyTransform: pxr.HdLight.DirtyBits { Overlay.HdLight.DirtyTransform }
  @_documentation(visibility: internal) public static var DirtyParams: pxr.HdLight.DirtyBits { Overlay.HdLight.DirtyParams }
  @_documentation(visibility: internal) public static var DirtyShadowParams: pxr.HdLight.DirtyBits { Overlay.HdLight.DirtyShadowParams }
  @_documentation(visibility: internal) public static var DirtyCollection: pxr.HdLight.DirtyBits { Overlay.HdLight.DirtyCollection }
  @_documentation(visibility: internal) public static var DirtyResource: pxr.HdLight.DirtyBits { Overlay.HdLight.DirtyResource }
  @_documentation(visibility: internal) public static var DirtyInstancer: pxr.HdLight.DirtyBits { Overlay.HdLight.DirtyInstancer }
  @_documentation(visibility: internal) public static var AllDirty: pxr.HdLight.DirtyBits { Overlay.HdLight.AllDirty }
}
extension pxr.HdRenderBuffer.DirtyBits {
  @_documentation(visibility: internal) public static var Clean: pxr.HdRenderBuffer.DirtyBits { Overlay.HdRenderBuffer.Clean }
  @_documentation(visibility: internal) public static var DirtyDescription: pxr.HdRenderBuffer.DirtyBits { Overlay.HdRenderBuffer.DirtyDescription }
  @_documentation(visibility: internal) public static var AllDirty: pxr.HdRenderBuffer.DirtyBits { Overlay.HdRenderBuffer.AllDirty }
}
extension pxr.HdRenderPassState.ColorMask {
  @_documentation(visibility: internal) public static var ColorMaskNone: pxr.HdRenderPassState.ColorMask { Overlay.HdRenderPassState.ColorMaskNone }
  @_documentation(visibility: internal) public static var ColorMaskRGB: pxr.HdRenderPassState.ColorMask { Overlay.HdRenderPassState.ColorMaskRGB }
  @_documentation(visibility: internal) public static var ColorMaskRGBA: pxr.HdRenderPassState.ColorMask { Overlay.HdRenderPassState.ColorMaskRGBA }
}
extension pxr.HdSceneIndexPluginRegistry.InsertionOrder {
  @_documentation(visibility: internal) public static var InsertionOrderAtStart: pxr.HdSceneIndexPluginRegistry.InsertionOrder { Overlay.HdSceneIndexPluginRegistry.InsertionOrderAtStart }
  @_documentation(visibility: internal) public static var InsertionOrderAtEnd: pxr.HdSceneIndexPluginRegistry.InsertionOrder { Overlay.HdSceneIndexPluginRegistry.InsertionOrderAtEnd }
}
extension pxr.HdSelection.HighlightMode {
  @_documentation(visibility: internal) public static var HighlightModeSelect: pxr.HdSelection.HighlightMode { Overlay.HdSelection.HighlightModeSelect }
  @_documentation(visibility: internal) public static var HighlightModeLocate: pxr.HdSelection.HighlightMode { Overlay.HdSelection.HighlightModeLocate }
  @_documentation(visibility: internal) public static var HighlightModeCount: pxr.HdSelection.HighlightMode { Overlay.HdSelection.HighlightModeCount }
}
extension pxr.HdGpGenerativeProcedural.AsyncState {
  @_documentation(visibility: internal) public static var Continuing: pxr.HdGpGenerativeProcedural.AsyncState { Overlay.HdGpGenerativeProcedural.Continuing }
  @_documentation(visibility: internal) public static var Finished: pxr.HdGpGenerativeProcedural.AsyncState { Overlay.HdGpGenerativeProcedural.Finished }
  @_documentation(visibility: internal) public static var ContinuingWithNewChanges: pxr.HdGpGenerativeProcedural.AsyncState { Overlay.HdGpGenerativeProcedural.ContinuingWithNewChanges }
  @_documentation(visibility: internal) public static var FinishedWithNewChanges: pxr.HdGpGenerativeProcedural.AsyncState { Overlay.HdGpGenerativeProcedural.FinishedWithNewChanges }
}
extension pxr.HdStBinding.`Type` {
  @_documentation(visibility: internal) public static var UNKNOWN: pxr.HdStBinding.`Type` { Overlay.HdStBinding.UNKNOWN }
  @_documentation(visibility: internal) public static var DISPATCH: pxr.HdStBinding.`Type` { Overlay.HdStBinding.DISPATCH }
  @_documentation(visibility: internal) public static var DRAW_INDEX: pxr.HdStBinding.`Type` { Overlay.HdStBinding.DRAW_INDEX }
  @_documentation(visibility: internal) public static var DRAW_INDEX_INSTANCE: pxr.HdStBinding.`Type` { Overlay.HdStBinding.DRAW_INDEX_INSTANCE }
  @_documentation(visibility: internal) public static var DRAW_INDEX_INSTANCE_ARRAY: pxr.HdStBinding.`Type` { Overlay.HdStBinding.DRAW_INDEX_INSTANCE_ARRAY }
  @_documentation(visibility: internal) public static var VERTEX_ATTR: pxr.HdStBinding.`Type` { Overlay.HdStBinding.VERTEX_ATTR }
  @_documentation(visibility: internal) public static var INDEX_ATTR: pxr.HdStBinding.`Type` { Overlay.HdStBinding.INDEX_ATTR }
  @_documentation(visibility: internal) public static var SSBO: pxr.HdStBinding.`Type` { Overlay.HdStBinding.SSBO }
  @_documentation(visibility: internal) public static var BINDLESS_SSBO_RANGE: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_SSBO_RANGE }
  @_documentation(visibility: internal) public static var UBO: pxr.HdStBinding.`Type` { Overlay.HdStBinding.UBO }
  @_documentation(visibility: internal) public static var BINDLESS_UNIFORM: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_UNIFORM }
  @_documentation(visibility: internal) public static var UNIFORM: pxr.HdStBinding.`Type` { Overlay.HdStBinding.UNIFORM }
  @_documentation(visibility: internal) public static var UNIFORM_ARRAY: pxr.HdStBinding.`Type` { Overlay.HdStBinding.UNIFORM_ARRAY }
  @_documentation(visibility: internal) public static var FALLBACK: pxr.HdStBinding.`Type` { Overlay.HdStBinding.FALLBACK }
  @_documentation(visibility: internal) public static var TEXTURE_2D: pxr.HdStBinding.`Type` { Overlay.HdStBinding.TEXTURE_2D }
  @_documentation(visibility: internal) public static var ARRAY_OF_TEXTURE_2D: pxr.HdStBinding.`Type` { Overlay.HdStBinding.ARRAY_OF_TEXTURE_2D }
  @_documentation(visibility: internal) public static var TEXTURE_FIELD: pxr.HdStBinding.`Type` { Overlay.HdStBinding.TEXTURE_FIELD }
  @_documentation(visibility: internal) public static var TEXTURE_UDIM_ARRAY: pxr.HdStBinding.`Type` { Overlay.HdStBinding.TEXTURE_UDIM_ARRAY }
  @_documentation(visibility: internal) public static var TEXTURE_UDIM_LAYOUT: pxr.HdStBinding.`Type` { Overlay.HdStBinding.TEXTURE_UDIM_LAYOUT }
  @_documentation(visibility: internal) public static var TEXTURE_PTEX_TEXEL: pxr.HdStBinding.`Type` { Overlay.HdStBinding.TEXTURE_PTEX_TEXEL }
  @_documentation(visibility: internal) public static var TEXTURE_PTEX_LAYOUT: pxr.HdStBinding.`Type` { Overlay.HdStBinding.TEXTURE_PTEX_LAYOUT }
  @_documentation(visibility: internal) public static var BINDLESS_TEXTURE_2D: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_TEXTURE_2D }
  @_documentation(visibility: internal) public static var BINDLESS_ARRAY_OF_TEXTURE_2D: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_ARRAY_OF_TEXTURE_2D }
  @_documentation(visibility: internal) public static var BINDLESS_TEXTURE_FIELD: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_TEXTURE_FIELD }
  @_documentation(visibility: internal) public static var BINDLESS_TEXTURE_UDIM_ARRAY: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_TEXTURE_UDIM_ARRAY }
  @_documentation(visibility: internal) public static var BINDLESS_TEXTURE_UDIM_LAYOUT: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_TEXTURE_UDIM_LAYOUT }
  @_documentation(visibility: internal) public static var BINDLESS_TEXTURE_PTEX_TEXEL: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_TEXTURE_PTEX_TEXEL }
  @_documentation(visibility: internal) public static var BINDLESS_TEXTURE_PTEX_LAYOUT: pxr.HdStBinding.`Type` { Overlay.HdStBinding.BINDLESS_TEXTURE_PTEX_LAYOUT }
  @_documentation(visibility: internal) public static var PRIMVAR_REDIRECT: pxr.HdStBinding.`Type` { Overlay.HdStBinding.PRIMVAR_REDIRECT }
  @_documentation(visibility: internal) public static var FIELD_REDIRECT: pxr.HdStBinding.`Type` { Overlay.HdStBinding.FIELD_REDIRECT }
  @_documentation(visibility: internal) public static var TRANSFORM_2D: pxr.HdStBinding.`Type` { Overlay.HdStBinding.TRANSFORM_2D }
}
extension pxr.HdStBinding.Location {
  @_documentation(visibility: internal) public static var NOT_EXIST: pxr.HdStBinding.Location { Overlay.HdStBinding.NOT_EXIST }
}
extension pxr.HdStComputeQueue {
  @_documentation(visibility: internal) public static var HdStComputeQueueZero: pxr.HdStComputeQueue { Overlay.HdStComputeQueueZero }
  @_documentation(visibility: internal) public static var HdStComputeQueueOne: pxr.HdStComputeQueue { Overlay.HdStComputeQueueOne }
  @_documentation(visibility: internal) public static var HdStComputeQueueTwo: pxr.HdStComputeQueue { Overlay.HdStComputeQueueTwo }
  @_documentation(visibility: internal) public static var HdStComputeQueueThree: pxr.HdStComputeQueue { Overlay.HdStComputeQueueThree }
  @_documentation(visibility: internal) public static var HdStComputeQueueCount: pxr.HdStComputeQueue { Overlay.HdStComputeQueueCount }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
#if canImport(SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT)
extension pxr.UsdImagingPrimAdapter.PopulationMode {
  @_documentation(visibility: internal) public static var RepresentsSelf: pxr.UsdImagingPrimAdapter.PopulationMode { Overlay.UsdImagingPrimAdapter.RepresentsSelf }
  @_documentation(visibility: internal) public static var RepresentsSelfAndDescendents: pxr.UsdImagingPrimAdapter.PopulationMode { Overlay.UsdImagingPrimAdapter.RepresentsSelfAndDescendents }
  @_documentation(visibility: internal) public static var RepresentedByAncestor: pxr.UsdImagingPrimAdapter.PopulationMode { Overlay.UsdImagingPrimAdapter.RepresentedByAncestor }
}
extension pxr.UsdImagingGLRendererSetting.`Type` {
  @_documentation(visibility: internal) public static var TYPE_FLAG: pxr.UsdImagingGLRendererSetting.`Type` { Overlay.UsdImagingGLRendererSetting.TYPE_FLAG }
  @_documentation(visibility: internal) public static var TYPE_INT: pxr.UsdImagingGLRendererSetting.`Type` { Overlay.UsdImagingGLRendererSetting.TYPE_INT }
  @_documentation(visibility: internal) public static var TYPE_FLOAT: pxr.UsdImagingGLRendererSetting.`Type` { Overlay.UsdImagingGLRendererSetting.TYPE_FLOAT }
  @_documentation(visibility: internal) public static var TYPE_STRING: pxr.UsdImagingGLRendererSetting.`Type` { Overlay.UsdImagingGLRendererSetting.TYPE_STRING }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT)
