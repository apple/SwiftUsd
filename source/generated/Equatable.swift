//
//  Equatable.swift
//  swiftUsd
//
//  Created by Maddy Adams on 4/17/24.
//

// This file was generated by ast-answerer. Do not edit!


// Conformance blocked by no Swift type name:

// pxr::TfWeakPtr<void>
// pxr::TfRefPtr<pxr::TfRefBase>
// pxr::TfHashMap<pxr::TfEnum, std::string, pxr::TfHash, std::equal_to<pxr::TfEnum>, std::allocator<std::pair<pxr::TfEnum const, std::string>>>
// pxr::TfHashMap<pxr::TfType, std::vector<pxr::TfType, std::allocator<pxr::TfType>>, pxr::TfHash, std::equal_to<pxr::TfType>, std::allocator<std::pair<pxr::TfType const, std::vector<pxr::TfType, std::allocator<pxr::TfType>>>>>
// pxr::TfHashMap<pxr::TfType, unsigned long, pxr::TfHash, std::equal_to<pxr::TfType>, std::allocator<std::pair<pxr::TfType const, unsigned long>>>
// pxr::TfHashMap<std::type_index, std::string, std::hash<std::type_index>, std::equal_to<std::type_index>, std::allocator<std::pair<std::type_index const, std::string>>>
// pxr::TfHashMap<pxr::TfErrorMark const *, std::vector<unsigned long, std::allocator<unsigned long>>, pxr::TfHash, std::equal_to<pxr::TfErrorMark const *>, std::allocator<std::pair<pxr::TfErrorMark const *, std::vector<unsigned long, std::allocator<unsigned long>>>>>
// pxr::TfHashMap<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int>>>
// pxr::TfHashMap<int, unsigned long, pxr::TfHash, std::equal_to<int>, std::allocator<std::pair<int const, unsigned long>>>
// pxr::TfHashMap<long long, unsigned long, pxr::TfHash, std::equal_to<long long>, std::allocator<std::pair<long long const, unsigned long>>>
// pxr::TfHashMap<std::string, _Bool (int, char **) *, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, _Bool (int, char **) *>>>
// pxr::TfHashMap<std::string, _Bool (void) *, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, _Bool (void) *>>>
// pxr::TfHashMap<std::string, pxr::TfEnum, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, pxr::TfEnum>>>
// pxr::TfHashMap<std::string, pxr::TfType, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, pxr::TfType>>>
// pxr::TfHashMap<std::string, std::variant<<int, _Bool, std::string>>, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::variant<<int, _Bool, std::string>>>>>
// pxr::TfHashMap<std::string, std::vector<std::string, std::allocator<std::string>>, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string>>>>>
// pxr::TfHashMap<std::string, std::type_info const *, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::type_info const *>>>
// pxr::TfHashMap<std::string, unsigned long, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, unsigned long>>>
// pxr::TfHashMap<unsigned int, unsigned long, pxr::TfHash, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned long>>>
// pxr::TfHashMap<unsigned long long, unsigned long, pxr::TfHash, std::equal_to<unsigned long long>, std::allocator<std::pair<unsigned long long const, unsigned long>>>
// pxr::TfHashMap<unsigned long, std::list<std::function<void, <>>, std::allocator<std::function<void, <>>>>, pxr::TfHash, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::list<std::function<void, <>>, std::allocator<std::function<void, <>>>>>>>
// pxr::TfHashSet<pxr::TfWeakPtr<pxr::TfNotice::Probe>, pxr::TfHash, std::equal_to<pxr::TfWeakPtr<pxr::TfNotice::Probe>>, std::allocator<pxr::TfWeakPtr<pxr::TfNotice::Probe>>>
// pxr::TfHashSet<int, std::hash<int>, std::equal_to<int>, std::allocator<int>>
// pxr::TfHashSet<std::string, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::string>>
// pxr::TfHashMap<pxr::TfToken, pxr::TfToken, pxr::TfHash, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, pxr::TfToken>>>
// pxr::TfHashMap<pxr::TfToken, unsigned long, pxr::TfHash, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, unsigned long>>>
// pxr::TfHashMap<pxr::TfType, std::vector<pxr::TfToken, std::allocator<pxr::TfToken>>, pxr::TfHash, std::equal_to<pxr::TfType>, std::allocator<std::pair<pxr::TfType const, std::vector<pxr::TfToken, std::allocator<pxr::TfToken>>>>>
// pxr::TfHashMap<pxr::TfToken, pxr::TfToken, pxr::TfToken::HashFunctor, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, pxr::TfToken>>>
// pxr::TfHashMap<pxr::TfToken, unsigned int, pxr::TfToken::HashFunctor, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, unsigned int>>>
// pxr::TfHashMap<pxr::TfToken, unsigned long, pxr::TfToken::HashFunctor, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, unsigned long>>>
// pxr::TfHashMap<pxr::TfToken, std::set<pxr::TfToken, pxr::TfTokenFastArbitraryLessThan, std::allocator<pxr::TfToken>>, pxr::TfHash, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, std::set<pxr::TfToken, pxr::TfTokenFastArbitraryLessThan, std::allocator<pxr::TfToken>>>>>
// pxr::TfHashMap<pxr::TfType, pxr::TfWeakPtr<pxr::PlugPlugin>, pxr::TfHash, std::equal_to<pxr::TfType>, std::allocator<std::pair<pxr::TfType const, pxr::TfWeakPtr<pxr::PlugPlugin>>>>
// pxr::TfHashMap<std::string, pxr::TfWeakPtr<pxr::PlugPlugin>, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, pxr::TfWeakPtr<pxr::PlugPlugin>>>>
// pxr::TfWeakPtr<pxr::PlugRegistry>
// pxr::VtArray<pxr::GfFrustum>
// pxr::VtArray<pxr::GfMultiInterval>
// pxr::VtArray<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string>>>>
// pxr::VtArray<std::vector<pxr::TfToken, std::allocator<pxr::TfToken>>>
// pxr::VtArray<std::vector<double, std::allocator<double>>>
// pxr::VtArray<std::vector<std::string, std::allocator<std::string>>>
// pxr::VtArray<pxr::VtArray<int>>
// pxr::VtArray<pxr::VtDictionary>
// pxr::VtArray<pxr::VtValue>
// pxr::VtArray<pxr::TsSpline>
// pxr::TfHashMap<pxr::SdfPath, unsigned long, pxr::TfHash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, unsigned long>>>
// pxr::VtArray<pxr::SdfPath>
// pxr::VtArray<std::vector<pxr::SdfPath, std::allocator<pxr::SdfPath>>>
// pxr::VtArray<std::vector<std::pair<pxr::SdfPath, pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath, pxr::SdfPath>>>>
// pxr::TfHashMap<pxr::SdfPath, pxr::GfMatrix4d, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, pxr::GfMatrix4d>>>
// pxr::TfHashMap<pxr::SdfPath, pxr::HdInstancer *, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, pxr::HdInstancer *>>>
// pxr::TfHashMap<pxr::SdfPath, pxr::SdfPath, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, pxr::SdfPath>>>
// pxr::TfHashMap<pxr::SdfPath, pxr::TfHashMap<pxr::TfToken, pxr::VtValue, pxr::TfToken::HashFunctor, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, pxr::VtValue>>>, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, pxr::TfHashMap<pxr::TfToken, pxr::VtValue, pxr::TfToken::HashFunctor, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, pxr::VtValue>>>>>>
// pxr::TfHashMap<pxr::SdfPath, pxr::TfHashSet<pxr::SdfPath, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<pxr::SdfPath>>, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, pxr::TfHashSet<pxr::SdfPath, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<pxr::SdfPath>>>>>
// pxr::TfHashMap<pxr::SdfPath, pxr::TfToken, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, pxr::TfToken>>>
// pxr::TfHashMap<pxr::SdfPath, std::vector<pxr::SdfPath, std::allocator<pxr::SdfPath>>, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, std::vector<pxr::SdfPath, std::allocator<pxr::SdfPath>>>>>
// pxr::TfHashMap<pxr::SdfPath, std::vector<pxr::UsdPhysicsJointDesc const *, std::allocator<pxr::UsdPhysicsJointDesc const *>>, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, std::vector<pxr::UsdPhysicsJointDesc const *, std::allocator<pxr::UsdPhysicsJointDesc const *>>>>>
// pxr::TfHashMap<pxr::SdfPath, int, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, int>>>
// pxr::TfHashMap<pxr::SdfPath, unsigned int, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, unsigned int>>>
// pxr::TfHashMap<pxr::SdfPath, unsigned long, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, unsigned long>>>
// pxr::TfHashMultiMap<pxr::SdfPath, pxr::SdfPath, pxr::SdfPath::Hash, std::equal_to<pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath const, pxr::SdfPath>>>
// pxr::VtArray<pxr::SdfSpecifier>
// pxr::VtArray<pxr::SdfPermission>
// pxr::VtArray<pxr::SdfVariability>
// pxr::TfHashMap<pxr::SdfUnregisteredValue, unsigned long, pxr::TfHash, std::equal_to<pxr::SdfUnregisteredValue>, std::allocator<std::pair<pxr::SdfUnregisteredValue const, unsigned long>>>
// pxr::VtArray<pxr::SdfUnregisteredValue>
// pxr::VtArray<pxr::SdfValueBlock>
// pxr::VtArray<pxr::SdfAssetPath>
// pxr::VtArray<pxr::SdfOpaqueValue>
// pxr::VtArray<pxr::SdfPathExpression>
// pxr::VtArray<pxr::SdfTimeCode>
// pxr::TfWeakPtr<pxr::SdfSchemaBase>
// pxr::TfHashMap<pxr::TfToken, pxr::SdfSchemaBase::FieldDefinition, pxr::TfToken::HashFunctor, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, pxr::SdfSchemaBase::FieldDefinition>>>
// pxr::SdfListProxy<pxr::SdfNameKeyPolicy>
// pxr::SdfListProxy<pxr::SdfPathKeyPolicy>
// pxr::SdfListProxy<pxr::SdfReferenceTypePolicy>
// pxr::TfHashMap<std::string, pxr::TfRefPtr<pxr::SdfLayer>, pxr::TfHash, std::equal_to<std::string>, std::allocator<std::pair<std::string const, pxr::TfRefPtr<pxr::SdfLayer>>>>
// pxr::VtArray<std::vector<pxr::SdfLayerOffset, std::allocator<pxr::SdfLayerOffset>>>
// pxr::TfHashMap<pxr::SdfPayload, unsigned long, pxr::TfHash, std::equal_to<pxr::SdfPayload>, std::allocator<std::pair<pxr::SdfPayload const, unsigned long>>>
// pxr::VtArray<pxr::SdfPayload>
// pxr::TfHashMap<pxr::SdfReference, unsigned long, pxr::TfHash, std::equal_to<pxr::SdfReference>, std::allocator<std::pair<pxr::SdfReference const, unsigned long>>>
// pxr::TfHashMap<pxr::UsdPrim, pxr::GfMatrix4d, pxr::TfHash, std::equal_to<pxr::UsdPrim>, std::allocator<std::pair<pxr::UsdPrim const, pxr::GfMatrix4d>>>
// pxr::TfHashMap<pxr::UsdPrim, pxr::SdfPath, pxr::TfHash, std::equal_to<pxr::UsdPrim>, std::allocator<std::pair<pxr::UsdPrim const, pxr::SdfPath>>>
// pxr::TfHashMap<pxr::UsdPrim, pxr::TfToken, pxr::TfHash, std::equal_to<pxr::UsdPrim>, std::allocator<std::pair<pxr::UsdPrim const, pxr::TfToken>>>
// pxr::TfHashMap<pxr::UsdPrim, pxr::VtArray<pxr::VtArray<int>>, pxr::TfHash, std::equal_to<pxr::UsdPrim>, std::allocator<std::pair<pxr::UsdPrim const, pxr::VtArray<pxr::VtArray<int>>>>>
// pxr::TfHashMap<pxr::UsdPrim, int, pxr::TfHash, std::equal_to<pxr::UsdPrim>, std::allocator<std::pair<pxr::UsdPrim const, int>>>
// pxr::TfHashMap<pxr::UsdPrim, pxr::UsdGeomImageable::PurposeInfo, pxr::TfHash, std::equal_to<pxr::UsdPrim>, std::allocator<std::pair<pxr::UsdPrim const, pxr::UsdGeomImageable::PurposeInfo>>>
// pxr::TfRefPtr<pxr::UsdHydraDiscoveryPlugin>
// pxr::VtArray<pxr::UsdSkelSkinningQuery>
// pxr::TfRefPtr<pxr::GlfDrawTarget::AttachmentsContainer>
// pxr::VtArray<pxr::HdVec4f_2_10_10_10_REV>
// pxr::TfHashMap<pxr::TfToken, std::shared_ptr<pxr::UsdImagingPrimAdapter>, pxr::TfToken::HashFunctor, std::equal_to<pxr::TfToken>, std::allocator<std::pair<pxr::TfToken const, std::shared_ptr<pxr::UsdImagingPrimAdapter>>>>
// pxr::TfWeakPtr<pxr::UsdImagingStageSceneIndex>


// Conformance available:

extension pxr.TfAnyWeakPtr: Equatable {} // foundBySwift
extension pxr.TfType: Equatable {} // foundBySwift
extension pxr.TfRefBase: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TfRefBase, rhs: pxr.TfRefBase) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TfSimpleRefBase: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TfSimpleRefBase, rhs: pxr.TfSimpleRefBase) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TfBits: Equatable {} // foundBySwift
extension pxr.TfCompressedBits: Equatable {} // foundBySwift
extension pxr.TfEnum: Equatable {} // foundBySwift
extension pxr.TfNotice.WeakProbePtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TfRefPtrTracker.WatchedCounts: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TfDiagnosticMgr: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TfDiagnosticMgr, rhs: pxr.TfDiagnosticMgr) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TfRefPtrTracker: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TfRefPtrTracker, rhs: pxr.TfRefPtrTracker) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TfToken: Equatable {} // foundBySwift
extension pxr.TraceAggregateTree.CounterMap: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.GlfBindingMap.BindingMap: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.TfToken.HashSet: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TfUtf8CodePointIterator: Equatable {} // foundBySwift
extension pxr.GfBBox3d: Equatable {} // foundBySwift
extension pxr.GfMatrix4d: Equatable {} // foundBySwift
extension pxr.GfVec4d: Equatable {} // foundBySwift
extension pxr.GfVec4f: Equatable {} // foundBySwift
extension pxr.GfVec4h: Equatable {} // foundBySwift
extension pxr.pxr_half.half: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GfVec4i: Equatable {} // foundBySwift
extension pxr.GfVec3d: Equatable {} // foundBySwift
extension pxr.GfVec3f: Equatable {} // foundBySwift
extension pxr.GfVec3h: Equatable {} // foundBySwift
extension pxr.GfVec3i: Equatable {} // foundBySwift
extension pxr.GfRange3d: Equatable {} // foundBySwift
extension pxr.GfRange3f: Equatable {} // foundBySwift
extension pxr.GfCamera: Equatable {} // foundBySwift
extension pxr.GfRange1f: Equatable {} // foundBySwift
extension pxr.GfRange1d: Equatable {} // foundBySwift
extension pxr.GfColor: Equatable {} // foundBySwift
extension pxr.GfColorSpace: Equatable {} // foundBySwift
extension pxr.GfVec2f: Equatable {} // foundBySwift
extension pxr.GfVec2d: Equatable {} // foundBySwift
extension pxr.GfVec2h: Equatable {} // foundBySwift
extension pxr.GfVec2i: Equatable {} // foundBySwift
extension pxr.GfMatrix3f: Equatable {} // foundBySwift
extension pxr.GfDualQuatd: Equatable {} // foundBySwift
extension pxr.GfQuatd: Equatable {} // foundBySwift
extension pxr.GfDualQuatf: Equatable {} // foundBySwift
extension pxr.GfQuatf: Equatable {} // foundBySwift
extension pxr.GfDualQuath: Equatable {} // foundBySwift
extension pxr.GfQuath: Equatable {} // foundBySwift
extension pxr.GfFrustum: Equatable {} // foundBySwift
extension pxr.GfPlane: Equatable {} // foundBySwift
extension pxr.GfRay: Equatable {} // foundBySwift
extension pxr.GfRange2d: Equatable {} // foundBySwift
extension pxr.GfRange2f: Equatable {} // foundBySwift
extension pxr.GfRotation: Equatable {} // foundBySwift
extension pxr.GfQuaternion: Equatable {} // foundBySwift
extension pxr.GfInterval: Equatable {} // foundBySwift
extension pxr.GfLine: Equatable {} // foundBySwift
extension pxr.GfLine2d: Equatable {} // foundBySwift
extension pxr.GfLineSeg: Equatable {} // foundBySwift
extension pxr.GfLineSeg2d: Equatable {} // foundBySwift
extension pxr.GfMatrix2d: Equatable {} // foundBySwift
extension pxr.GfMatrix2f: Equatable {} // foundBySwift
extension pxr.GfMatrix3d: Equatable {} // foundBySwift
extension pxr.GfMatrix4f: Equatable {} // foundBySwift
extension pxr.GfMultiInterval: Equatable {} // foundBySwift
extension pxr.GfRect2i: Equatable {} // friendFunction
extension pxr.GfSize2: Equatable {} // foundBySwift
extension pxr.GfSize3: Equatable {} // foundBySwift
extension pxr.GfTransform: Equatable {} // foundBySwift
extension pxr.JsValue: Equatable {} // foundBySwift
extension pxr.TraceAggregateTreeRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceAggregateTree: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TraceAggregateTree, rhs: pxr.TraceAggregateTree) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceAggregateNodeRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceAggregateNodePtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceAggregateNode: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TraceAggregateNode, rhs: pxr.TraceAggregateNode) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceKey: Equatable {} // foundBySwift
extension pxr.TraceStaticKeyData: Equatable {} // foundBySwift
extension pxr.TraceDynamicKey: Equatable {} // foundBySwift
extension pxr.TraceEventContainer.const_iterator: Equatable {} // foundBySwift
extension pxr.TraceCollector: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TraceCollector, rhs: pxr.TraceCollector) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceEventNodeRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceEventNode: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TraceEventNode, rhs: pxr.TraceEventNode) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceEventTreeRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceEventTree: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TraceEventTree, rhs: pxr.TraceEventTree) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceReporterRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceReporterPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceReporter: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TraceReporter, rhs: pxr.TraceReporter) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceReporterBase: Equatable { // importedAsReference
    public static func ==(lhs: pxr.TraceReporterBase, rhs: pxr.TraceReporterBase) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.TraceReporterDataSourceCollectorPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.PlugPluginPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.PlugRegistry: Equatable { // importedAsReference
    public static func ==(lhs: pxr.PlugRegistry, rhs: pxr.PlugRegistry) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtDualQuatdArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtDualQuatfArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtDualQuathArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtHalfArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtIntervalArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtMatrix2dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtMatrix2fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtMatrix3dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtMatrix3fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtMatrix4dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtMatrix4fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtQuatdArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtQuaternionArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtQuatfArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtQuathArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtRange1dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtRange1fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtRange2dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtRange2fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtRange3dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtRange3fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtRect2iArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec2dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec2fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec2hArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec2iArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec3dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec3fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec3hArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec3iArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec4dArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec4fArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec4hArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtVec4iArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtTokenArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtBoolArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtCharArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtDoubleArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtFloatArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtInt64Array: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtIntArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtShortArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtStringArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtUInt64Array: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtUCharArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtUIntArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtUShortArray: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtDictionary: Equatable {} // foundBySwift
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.HdAovSettingsMap: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.VtDictionary.iterator: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtDictionary.const_iterator: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.VtValue: Equatable {} // foundBySwift
extension pxr.TsSpline: Equatable {} // foundBySwift
extension pxr.TsLoopParams: Equatable {} // foundBySwift
extension pxr.TsExtrapolation: Equatable {} // foundBySwift
extension pxr.TsKnotMap: Equatable {} // foundBySwift
extension pxr.TsKnot: Equatable {} // foundBySwift
extension pxr.ArAssetInfo: Equatable {} // foundBySwift
extension pxr.ArDefaultResolverContext: Equatable {} // foundBySwift
extension pxr.ArResolverContext: Equatable {} // foundBySwift
extension pxr.ArResolvedPath: Equatable {} // foundBySwift
extension pxr.ArTimestamp: Equatable {} // friendFunction
extension pxr.KindRegistry: Equatable { // importedAsReference
    public static func ==(lhs: pxr.KindRegistry, rhs: pxr.KindRegistry) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfAbstractData: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfAbstractData, rhs: pxr.SdfAbstractData) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfAbstractDataRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfAbstractDataPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfPath: Equatable {} // foundBySwift
extension pxr.UsdUtilsPathHashSet: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfPathAncestorsRange.iterator: Equatable {} // foundBySwift
extension pxr.SdfUnregisteredValue: Equatable {} // foundBySwift
extension pxr.SdfValueBlock: Equatable {} // foundBySwift
extension pxr.SdfHumanReadableValue: Equatable {} // foundBySwift
extension pxr.SdfAssetPath: Equatable {} // foundBySwift
extension pxr.SdfOpaqueValue: Equatable {} // foundBySwift
extension pxr.SdfPathExpression: Equatable {} // friendFunction
extension pxr.SdfPathExpression.ExpressionReference: Equatable {} // friendFunction
extension pxr.SdfPathPattern: Equatable {} // friendFunction
extension pxr.SdfPathPattern.Component: Equatable {} // friendFunction
extension pxr.SdfPredicateExpression: Equatable {} // friendFunction
extension pxr.SdfPredicateExpression.FnArg: Equatable {} // friendFunction
extension pxr.SdfPredicateExpression.FnCall: Equatable {} // friendFunction
extension pxr.SdfTimeCode: Equatable {} // foundBySwift
extension pxr.SdfTupleDimensions: Equatable {} // foundBySwift
extension pxr.SdfValueTypeName: Equatable {} // foundBySwift
extension pxr.SdfAllowed: Equatable {} // foundBySwift
extension pxr.SdfAttributeSpec: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfAttributeSpecHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfPropertySpecHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfPropertySpec: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfSpecHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfSpec: Equatable {} // foundBySwift
extension pxr.SdfSchema: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfSchema, rhs: pxr.SdfSchema) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfNameChildrenOrderProxy: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfSubLayerProxy: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfDictionaryProxy: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfRelocatesMapProxy: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfVariantSelectionProxy: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfCopySpecsValueEdit: Equatable {} // foundBySwift
extension pxr.SdfData: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfData, rhs: pxr.SdfData) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfDataRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfFileFormat: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfFileFormat, rhs: pxr.SdfFileFormat) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfFileFormatRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfLayer: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfLayer, rhs: pxr.SdfLayer) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfLayerRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfLayerHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfLayerOffset: Equatable {} // foundBySwift
extension pxr.SdfNamespaceEdit: Equatable {} // foundBySwift
extension pxr.SdfNamespaceEditDetail: Equatable {} // foundBySwift
extension pxr.SdfLayerStateDelegateBase: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfLayerStateDelegateBase, rhs: pxr.SdfLayerStateDelegateBase) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfLayerStateDelegateBaseRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfLayerStateDelegateBasePtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfSimpleLayerStateDelegate: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfSimpleLayerStateDelegate, rhs: pxr.SdfSimpleLayerStateDelegate) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfSimpleLayerStateDelegateRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfLayerTree: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfLayerTree, rhs: pxr.SdfLayerTree) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfLayerTreeHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfPayload: Equatable {} // foundBySwift
extension pxr.SdfPrimSpecHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfPrimSpec: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfPseudoRootSpec: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfReference: Equatable {} // foundBySwift
extension pxr.SdfRelationshipSpecHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfRelationshipSpec: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfSite: Equatable {} // foundBySwift
extension pxr.SdfTextFileFormat: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdfTextFileFormat, rhs: pxr.SdfTextFileFormat) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfTextFileFormatRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfVariableExpression.EmptyList: Equatable {} // foundBySwift
extension pxr.SdfVariantSetSpecHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfVariantSetSpec: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfVariantSpecHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdfVariantSpec: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.NdrVersion: Equatable {} // friendFunction
extension pxr.NdrDiscoveryPluginContext: Equatable { // importedAsReference
    public static func ==(lhs: pxr.NdrDiscoveryPluginContext, rhs: pxr.NdrDiscoveryPluginContext) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.NdrDiscoveryPlugin: Equatable { // importedAsReference
    public static func ==(lhs: pxr.NdrDiscoveryPlugin, rhs: pxr.NdrDiscoveryPlugin) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.NdrDiscoveryPluginRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.NdrSdfTypeIndicator: Equatable {} // foundBySwift
extension pxr.SdrVersion: Equatable {} // friendFunction
extension pxr.SdrDiscoveryPluginContext: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdrDiscoveryPluginContext, rhs: pxr.SdrDiscoveryPluginContext) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdrDiscoveryPlugin: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdrDiscoveryPlugin, rhs: pxr.SdrDiscoveryPlugin) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.SdrRegistry: Equatable { // importedAsReference
    public static func ==(lhs: pxr.SdrRegistry, rhs: pxr.SdrRegistry) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.PcpMapFunction: Equatable {} // foundBySwift
extension pxr.PcpNodeRef: Equatable {} // foundBySwift
extension pxr.PcpNodeRef_ChildrenIterator: Equatable {} // foundBySwift
extension pxr.PcpNodeRef_ChildrenReverseIterator: Equatable {} // foundBySwift
extension pxr.PcpSite: Equatable {} // foundBySwift
extension pxr.PcpLayerStackSite: Equatable {} // foundBySwift
extension pxr.PcpLayerStackIdentifier: Equatable {} // foundBySwift
extension pxr.PcpExpressionVariablesSource: Equatable {} // foundBySwift
extension pxr.PcpDependency: Equatable {} // foundBySwift
extension pxr.PcpNodeIterator: Equatable {} // foundBySwift
extension pxr.PcpNodeReverseIterator: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.PcpPrimIterator: Equatable {} // foundBySwift
extension pxr.PcpPrimReverseIterator: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.PcpPropertyIterator: Equatable {} // foundBySwift
extension pxr.PcpPropertyReverseIterator: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.PcpExpressionVariables: Equatable {} // foundBySwift
extension pxr.PcpInstanceKey: Equatable {} // foundBySwift
extension pxr.PcpLayerStack: Equatable { // importedAsReference
    public static func ==(lhs: pxr.PcpLayerStack, rhs: pxr.PcpLayerStack) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.PcpLayerStackRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.PcpLayerStackPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdPrim: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdPrimSiblingIterator: Equatable {} // foundBySwift
extension pxr.UsdPrimSiblingRange: Equatable {} // friendFunction
extension pxr.UsdPrimSubtreeIterator: Equatable {} // foundBySwift
extension pxr.UsdPrimSubtreeRange: Equatable {} // friendFunction
extension pxr.UsdTimeCode: Equatable {} // friendFunction
extension pxr.UsdObject: Equatable {} // friendFunction
extension pxr.UsdSchemaRegistry: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdSchemaRegistry, rhs: pxr.UsdSchemaRegistry) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdStageRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdStagePtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdStage: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdStage, rhs: pxr.UsdStage) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdEditTarget: Equatable {} // foundBySwift
extension pxr.UsdStageLoadRules: Equatable {} // foundBySwift
extension pxr.UsdStagePopulationMask: Equatable {} // foundBySwift
extension pxr.UsdAttribute: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdProperty: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdRelationship: Equatable { // differentArgumentTypes
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdNotice.ObjectsChanged.PathRange.iterator: Equatable { // availableShouldBeFoundBySwiftButIsnt
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdPrimRange: Equatable {} // foundBySwift
extension pxr.UsdPrimRange.iterator: Equatable {} // foundBySwift
extension pxr.UsdStageCache.Id: Equatable {} // friendFunction
extension pxr.UsdUsdFileFormatRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdUsdFileFormat: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdUsdFileFormat, rhs: pxr.UsdUsdFileFormat) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdUsdaFileFormatRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdUsdaFileFormat: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdUsdaFileFormat, rhs: pxr.UsdUsdaFileFormat) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdUsdcFileFormatRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdUsdcFileFormat: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdUsdcFileFormat, rhs: pxr.UsdUsdcFileFormat) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdUsdzFileFormatRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdUsdzFileFormat: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdUsdzFileFormat, rhs: pxr.UsdUsdzFileFormat) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdZipFile.pxrIterator: Equatable {} // foundBySwift
extension pxr.UsdGeomPrimvar: Equatable {} // friendFunction
extension pxr.UsdGeomXformOp: Equatable {} // friendFunction
extension pxr.UsdShadeConnectionSourceInfo: Equatable {} // foundBySwift
extension pxr.UsdShadeInput: Equatable {} // friendFunction
extension pxr.UsdShadeOutput: Equatable {} // friendFunction
extension pxr.UsdHydraDiscoveryPlugin: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdHydraDiscoveryPlugin, rhs: pxr.UsdHydraDiscoveryPlugin) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdSkelTopology: Equatable {} // foundBySwift
extension pxr.UsdSkelInbetweenShape: Equatable {} // foundBySwift
extension pxr.UsdSkelAnimMapper: Equatable {} // foundBySwift
extension pxr.UsdSkelAnimQuery: Equatable {} // friendFunction
extension pxr.UsdSkelSkeletonQuery: Equatable {} // friendFunction
extension pxr.UsdUtilsDependencyInfo: Equatable {} // foundBySwift
extension pxr.UsdUtilsTimeCodeRange: Equatable {} // foundBySwift
extension pxr.UsdUtilsTimeCodeRange.const_iterator: Equatable {} // foundBySwift
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.GarchGLPlatformDebugContext: Equatable { // importedAsReference
    public static func ==(lhs: pxr.GarchGLPlatformDebugContext, rhs: pxr.GarchGLPlatformDebugContext) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GarchGLPlatformDebugContextRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT) && canImport(Darwin)
extension pxr.GarchNSGLContextState: Equatable {} // foundBySwift
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT) && canImport(Darwin)
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.HioImageRegistry: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HioImageRegistry, rhs: pxr.HioImageRegistry) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.CameraUtilFraming: Equatable {} // foundBySwift
extension pxr.PxOsdMeshTopology: Equatable {} // foundBySwift
extension pxr.PxOsdSubdivTags: Equatable {} // foundBySwift
extension pxr.GlfBindingMap: Equatable { // importedAsReference
    public static func ==(lhs: pxr.GlfBindingMap, rhs: pxr.GlfBindingMap) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfBindingMapPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfContextCaps: Equatable { // importedAsReference
    public static func ==(lhs: pxr.GlfContextCaps, rhs: pxr.GlfContextCaps) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfDrawTarget: Equatable { // importedAsReference
    public static func ==(lhs: pxr.GlfDrawTarget, rhs: pxr.GlfDrawTarget) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfDrawTargetRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfDrawTargetPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfDrawTarget.AttachmentRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfTexture: Equatable { // importedAsReference
    public static func ==(lhs: pxr.GlfTexture, rhs: pxr.GlfTexture) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfSimpleLight: Equatable {} // foundBySwift
extension pxr.GlfSimpleLightingContext: Equatable { // importedAsReference
    public static func ==(lhs: pxr.GlfSimpleLightingContext, rhs: pxr.GlfSimpleLightingContext) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfSimpleLightingContextRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfSimpleLightingContextPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfSimpleMaterial: Equatable {} // foundBySwift
extension pxr.GlfSimpleShadowArray: Equatable { // importedAsReference
    public static func ==(lhs: pxr.GlfSimpleShadowArray, rhs: pxr.GlfSimpleShadowArray) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfSimpleShadowArrayRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfUniformBlock: Equatable { // importedAsReference
    public static func ==(lhs: pxr.GlfUniformBlock, rhs: pxr.GlfUniformBlock) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.GlfUniformBlockRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiAttachmentDesc: Equatable {} // foundBySwift
extension pxr.HgiBufferDesc: Equatable {} // foundBySwift
extension pxr.HgiBufferHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiComponentMapping: Equatable {} // foundBySwift
extension pxr.HgiTextureDesc: Equatable {} // foundBySwift
extension pxr.HgiTextureHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiTextureViewDesc: Equatable {} // foundBySwift
extension pxr.HgiTextureViewHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiComputeShaderConstantsDesc: Equatable {} // foundBySwift
extension pxr.HgiComputePipelineDesc: Equatable {} // foundBySwift
extension pxr.HgiComputePipelineHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiBufferBindDesc: Equatable {} // foundBySwift
extension pxr.HgiTextureBindDesc: Equatable {} // foundBySwift
extension pxr.HgiResourceBindingsDesc: Equatable {} // foundBySwift
extension pxr.HgiResourceBindingsHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiSamplerDesc: Equatable {} // foundBySwift
extension pxr.HgiSamplerHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiShaderProgramHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiShaderFunctionHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiShaderFunctionTextureDesc: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionBufferDesc: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionParamDesc: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionParamBlockDesc: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionParamBlockDesc.Member: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionComputeDesc: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionTessellationDesc: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionGeometryDesc: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionFragmentDesc: Equatable {} // foundBySwift
extension pxr.HgiShaderFunctionDesc: Equatable {} // foundBySwift
extension pxr.HgiComputeCmdsDesc: Equatable {} // foundBySwift
extension pxr.HgiGraphicsCmdsDesc: Equatable {} // foundBySwift
extension pxr.HgiVertexAttributeDesc: Equatable {} // foundBySwift
extension pxr.HgiVertexBufferDesc: Equatable {} // foundBySwift
extension pxr.HgiMultiSampleState: Equatable {} // foundBySwift
extension pxr.HgiRasterizationState: Equatable {} // foundBySwift
extension pxr.HgiStencilState: Equatable {} // foundBySwift
extension pxr.HgiDepthStencilState: Equatable {} // foundBySwift
extension pxr.HgiGraphicsShaderConstantsDesc: Equatable {} // foundBySwift
extension pxr.HgiGraphicsPipelineDesc: Equatable {} // foundBySwift
extension pxr.HgiGraphicsPipelineHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HgiGLContextArenaHandle: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdRenderBufferDescriptor: Equatable {} // foundBySwift
extension pxr.HdRenderPassAovBinding: Equatable {} // foundBySwift
extension pxr.HdSamplerParameters: Equatable {} // foundBySwift
extension pxr.HdVec4f_2_10_10_10_REV: Equatable {} // foundBySwift
extension pxr.HdTupleType: Equatable {} // foundBySwift
extension pxr.HdBufferSpec: Equatable {} // foundBySwift
extension pxr.HdReprSelector: Equatable {} // foundBySwift
extension pxr.HdPerfLog: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdPerfLog, rhs: pxr.HdPerfLog) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdDisplayStyle: Equatable {} // foundBySwift
extension pxr.HdPrimvarDescriptor: Equatable {} // foundBySwift
extension pxr.HdModelDrawMode: Equatable {} // foundBySwift
extension pxr.HdExtComputationPrimvarDescriptor: Equatable {} // foundBySwift
extension pxr.HdExtComputationInputDescriptor: Equatable {} // foundBySwift
extension pxr.HdExtComputationOutputDescriptor: Equatable {} // foundBySwift
extension pxr.HdBasisCurvesTopology: Equatable {} // foundBySwift
extension pxr.HdGeomSubset: Equatable {} // foundBySwift
extension pxr.HdRprimCollection: Equatable {} // foundBySwift
extension pxr.HdSceneIndexBase: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdSceneIndexBase, rhs: pxr.HdSceneIndexBase) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSceneIndexBaseRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSceneIndexBasePtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdDataSourceLocator: Equatable {} // foundBySwift
extension pxr.HdDataSourceLocatorSet: Equatable {} // foundBySwift
extension pxr.HdDataSourceLocatorSet.IntersectionIterator: Equatable {} // foundBySwift
extension pxr.HdSceneIndexObserverPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdMergingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdMergingSceneIndex, rhs: pxr.HdMergingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdMergingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdFilteringSceneIndexBase: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdFilteringSceneIndexBase, rhs: pxr.HdFilteringSceneIndexBase) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdFilteringSceneIndexBasePtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSingleInputFilteringSceneIndexBase: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdSingleInputFilteringSceneIndexBase, rhs: pxr.HdSingleInputFilteringSceneIndexBase) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdLegacyPrimSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdLegacyPrimSceneIndex, rhs: pxr.HdLegacyPrimSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdLegacyPrimSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdRetainedSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdRetainedSceneIndex, rhs: pxr.HdRetainedSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdRetainedSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdNoticeBatchingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdNoticeBatchingSceneIndex, rhs: pxr.HdNoticeBatchingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdNoticeBatchingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdDependencyForwardingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdDependencyForwardingSceneIndex, rhs: pxr.HdDependencyForwardingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdDependencyForwardingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdFlatteningSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdFlatteningSceneIndex, rhs: pxr.HdFlatteningSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdFlatteningSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdMaterialRelationship: Equatable {} // foundBySwift
extension pxr.HdMaterialNode: Equatable {} // foundBySwift
extension pxr.HdMaterialNetwork: Equatable {} // foundBySwift
extension pxr.HdMaterialNetworkMap: Equatable {} // foundBySwift
extension pxr.HdMaterialConnection2: Equatable {} // foundBySwift
extension pxr.HdMaterialNode2: Equatable {} // foundBySwift
extension pxr.HdMaterialNetwork2: Equatable {} // foundBySwift
extension pxr.HdLegacyGeomSubsetSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdLegacyGeomSubsetSceneIndex, rhs: pxr.HdLegacyGeomSubsetSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdLegacyGeomSubsetSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdMaterialFilteringSceneIndexBase: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdMaterialFilteringSceneIndexBase, rhs: pxr.HdMaterialFilteringSceneIndexBase) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdPrefixingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdPrefixingSceneIndex, rhs: pxr.HdPrefixingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdPrefixingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdPrimOriginSchema.OriginPath: Equatable { // availableShouldBeFoundBySwiftButIsnt
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdRendererPluginRegistry: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdRendererPluginRegistry, rhs: pxr.HdRendererPluginRegistry) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSceneIndexPluginRegistry: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdSceneIndexPluginRegistry, rhs: pxr.HdSceneIndexPluginRegistry) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSceneIndexPrimView.const_iterator: Equatable { // inlineMethodDefinedAfterDeclaration
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdGpGenerativeProceduralPluginRegistry: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdGpGenerativeProceduralPluginRegistry, rhs: pxr.HdGpGenerativeProceduralPluginRegistry) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdGpGenerativeProceduralFilteringSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdGpGenerativeProceduralFilteringSceneIndex, rhs: pxr.HdGpGenerativeProceduralFilteringSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdGpGenerativeProceduralFilteringSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdGpGenerativeProceduralResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdGpGenerativeProceduralResolvingSceneIndex, rhs: pxr.HdGpGenerativeProceduralResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdGpGenerativeProceduralResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiCoordSysPrimSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiCoordSysPrimSceneIndex, rhs: pxr.HdsiCoordSysPrimSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiCoordSysPrimSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiDebuggingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiDebuggingSceneIndex, rhs: pxr.HdsiDebuggingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiDebuggingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiExtComputationDependencySceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiExtComputationDependencySceneIndex, rhs: pxr.HdsiExtComputationDependencySceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiExtComputationDependencySceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSiExtComputationPrimvarPruningSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdSiExtComputationPrimvarPruningSceneIndex, rhs: pxr.HdSiExtComputationPrimvarPruningSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSiExtComputationPrimvarPruningSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiImplicitSurfaceSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiImplicitSurfaceSceneIndex, rhs: pxr.HdsiImplicitSurfaceSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiImplicitSurfaceSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiLegacyDisplayStyleOverrideSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiLegacyDisplayStyleOverrideSceneIndex, rhs: pxr.HdsiLegacyDisplayStyleOverrideSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiLegacyDisplayStyleOverrideSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiLegacyDisplayStyleOverrideSceneIndex.OptionalInt: Equatable {} // foundBySwift
extension pxr.HdsiLightLinkingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiLightLinkingSceneIndex, rhs: pxr.HdsiLightLinkingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiLightLinkingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiMaterialBindingResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiMaterialBindingResolvingSceneIndex, rhs: pxr.HdsiMaterialBindingResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiMaterialBindingResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiMaterialOverrideResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiMaterialOverrideResolvingSceneIndex, rhs: pxr.HdsiMaterialOverrideResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiMaterialOverrideResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiMaterialPrimvarTransferSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiMaterialPrimvarTransferSceneIndex, rhs: pxr.HdsiMaterialPrimvarTransferSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiMaterialPrimvarTransferSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSiNodeIdentifierResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdSiNodeIdentifierResolvingSceneIndex, rhs: pxr.HdSiNodeIdentifierResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdSiNodeIdentifierResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiNurbsApproximatingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiNurbsApproximatingSceneIndex, rhs: pxr.HdsiNurbsApproximatingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiNurbsApproximatingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrefixPathPruningSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiPrefixPathPruningSceneIndex, rhs: pxr.HdsiPrefixPathPruningSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrefixPathPruningSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPinnedCurveExpandingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiPinnedCurveExpandingSceneIndex, rhs: pxr.HdsiPinnedCurveExpandingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPinnedCurveExpandingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrimManagingSceneIndexObserver: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiPrimManagingSceneIndexObserver, rhs: pxr.HdsiPrimManagingSceneIndexObserver) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrimManagingSceneIndexObserverRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrimTypeAndPathPruningSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiPrimTypeAndPathPruningSceneIndex, rhs: pxr.HdsiPrimTypeAndPathPruningSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrimTypeAndPathPruningSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrimTypeNoticeBatchingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiPrimTypeNoticeBatchingSceneIndex, rhs: pxr.HdsiPrimTypeNoticeBatchingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrimTypeNoticeBatchingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrimTypePruningSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiPrimTypePruningSceneIndex, rhs: pxr.HdsiPrimTypePruningSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiPrimTypePruningSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiRenderSettingsFilteringSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiRenderSettingsFilteringSceneIndex, rhs: pxr.HdsiRenderSettingsFilteringSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiRenderSettingsFilteringSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiSceneGlobalsSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiSceneGlobalsSceneIndex, rhs: pxr.HdsiSceneGlobalsSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiSceneGlobalsSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiSwitchingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiSwitchingSceneIndex, rhs: pxr.HdsiSwitchingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiSwitchingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiTetMeshConversionSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiTetMeshConversionSceneIndex, rhs: pxr.HdsiTetMeshConversionSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiTetMeshConversionSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiVelocityMotionResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdsiVelocityMotionResolvingSceneIndex, rhs: pxr.HdsiVelocityMotionResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdsiVelocityMotionResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdStBindingRequest: Equatable {} // foundBySwift
extension pxr.HdStTextureIdentifier: Equatable {} // foundBySwift
extension pxr.HdxAovInputTaskParams: Equatable {} // foundBySwift
extension pxr.HdxBoundingBoxTaskParams: Equatable {} // foundBySwift
extension pxr.HdxColorizeSelectionTaskParams: Equatable {} // foundBySwift
extension pxr.HdxColorChannelTaskParams: Equatable {} // foundBySwift
extension pxr.HdxColorCorrectionTaskParams: Equatable {} // foundBySwift
extension pxr.HdxDrawTargetTaskParams: Equatable {} // foundBySwift
extension pxr.HdxRenderTaskParams: Equatable {} // foundBySwift
extension pxr.HdxOitResolveTaskParams: Equatable {} // foundBySwift
extension pxr.HdxPickTaskParams: Equatable {} // foundBySwift
extension pxr.HdxPickHit: Equatable {} // foundBySwift
extension pxr.HdxPickTaskContextParams: Equatable {} // foundBySwift
extension pxr.HdxPickFromRenderBufferTaskParams: Equatable {} // foundBySwift
extension pxr.HdxPresentTaskParams: Equatable {} // foundBySwift
extension pxr.HdxSelectionTaskParams: Equatable {} // foundBySwift
extension pxr.HdxShadowTaskParams: Equatable {} // foundBySwift
extension pxr.HdxSimpleLightTaskParams: Equatable {} // foundBySwift
extension pxr.HdxShadowParams: Equatable {} // foundBySwift
extension pxr.HdxTaskControllerSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.HdxTaskControllerSceneIndex, rhs: pxr.HdxTaskControllerSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdxTaskControllerSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.HdxShaderInputs: Equatable {} // foundBySwift
extension pxr.HdxVisualizeAovTaskParams: Equatable {} // foundBySwift
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
#if canImport(SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT)
extension pxr.UsdImagingDelegatePtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingDrawModeSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingDrawModeSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingDrawModeSceneIndex, rhs: pxr.UsdImagingDrawModeSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingExtentResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingExtentResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingExtentResolvingSceneIndex, rhs: pxr.UsdImagingExtentResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingStageSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingStageSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingStageSceneIndex, rhs: pxr.UsdImagingStageSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingSelectionSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingSelectionSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingSelectionSceneIndex, rhs: pxr.UsdImagingSelectionSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingMaterialBindingsResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingMaterialBindingsResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingMaterialBindingsResolvingSceneIndex, rhs: pxr.UsdImagingMaterialBindingsResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingNiPrototypePropagatingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingNiPrototypePropagatingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingNiPrototypePropagatingSceneIndex, rhs: pxr.UsdImagingNiPrototypePropagatingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingPiPrototypePropagatingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingPiPrototypePropagatingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingPiPrototypePropagatingSceneIndex, rhs: pxr.UsdImagingPiPrototypePropagatingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingRootOverridesSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingRootOverridesSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingRootOverridesSceneIndex, rhs: pxr.UsdImagingRootOverridesSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingUnloadedDrawModeSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingUnloadedDrawModeSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingUnloadedDrawModeSceneIndex, rhs: pxr.UsdImagingUnloadedDrawModeSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingRenderSettingsFlatteningSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingRenderSettingsFlatteningSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingRenderSettingsFlatteningSceneIndex, rhs: pxr.UsdImagingRenderSettingsFlatteningSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingRerootingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingRerootingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdImagingRerootingSceneIndex, rhs: pxr.UsdImagingRerootingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdImagingGLRenderParams: Equatable { // inlineMethodDefinedAfterDeclaration
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdSkelImagingPointsResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdSkelImagingPointsResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdSkelImagingPointsResolvingSceneIndex, rhs: pxr.UsdSkelImagingPointsResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdSkelImagingSkeletonResolvingSceneIndexRefPtr: Equatable { // classTemplateSpecialization
    public static func ==(lhs: Self, rhs: Self) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
extension pxr.UsdSkelImagingSkeletonResolvingSceneIndex: Equatable { // importedAsReference
    public static func ==(lhs: pxr.UsdSkelImagingSkeletonResolvingSceneIndex, rhs: pxr.UsdSkelImagingSkeletonResolvingSceneIndex) -> Bool {
        __Overlay.operatorEqualsEquals(lhs, rhs)
    }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT)
