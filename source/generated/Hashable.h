//
//  Hashable.h
//  swiftUsd
//
//  Created by Maddy Adams on 4/17/24.
//

// This file was generated by ast-answerer. Do not edit!
#ifndef SWIFTUSD_GENERATED_HASHABLE_H
#define SWIFTUSD_GENERATED_HASHABLE_H

#include "swiftUsd/defines.h"

#include "pxr/base/gf/bbox3d.h"
#include "pxr/base/gf/dualQuatd.h"
#include "pxr/base/gf/dualQuatf.h"
#include "pxr/base/gf/dualQuath.h"
#include "pxr/base/gf/frustum.h"
#include "pxr/base/gf/ilmbase_half.h"
#include "pxr/base/gf/interval.h"
#include "pxr/base/gf/matrix2d.h"
#include "pxr/base/gf/matrix2f.h"
#include "pxr/base/gf/matrix3d.h"
#include "pxr/base/gf/matrix3f.h"
#include "pxr/base/gf/matrix4d.h"
#include "pxr/base/gf/matrix4f.h"
#include "pxr/base/gf/multiInterval.h"
#include "pxr/base/gf/quatd.h"
#include "pxr/base/gf/quaternion.h"
#include "pxr/base/gf/quatf.h"
#include "pxr/base/gf/quath.h"
#include "pxr/base/gf/range1d.h"
#include "pxr/base/gf/range1f.h"
#include "pxr/base/gf/range2d.h"
#include "pxr/base/gf/range2f.h"
#include "pxr/base/gf/range3d.h"
#include "pxr/base/gf/range3f.h"
#include "pxr/base/gf/rect2i.h"
#include "pxr/base/gf/rotation.h"
#include "pxr/base/gf/vec2d.h"
#include "pxr/base/gf/vec2f.h"
#include "pxr/base/gf/vec2h.h"
#include "pxr/base/gf/vec2i.h"
#include "pxr/base/gf/vec3d.h"
#include "pxr/base/gf/vec3f.h"
#include "pxr/base/gf/vec3h.h"
#include "pxr/base/gf/vec3i.h"
#include "pxr/base/gf/vec4d.h"
#include "pxr/base/gf/vec4f.h"
#include "pxr/base/gf/vec4h.h"
#include "pxr/base/gf/vec4i.h"
#include "pxr/base/plug/notice.h"
#include "pxr/base/plug/plugin.h"
#include "pxr/base/plug/registry.h"
#include "pxr/base/tf/diagnosticMgr.h"
#include "pxr/base/tf/enum.h"
#include "pxr/base/tf/notice.h"
#include "pxr/base/tf/refBase.h"
#include "pxr/base/tf/refPtrTracker.h"
#include "pxr/base/tf/token.h"
#include "pxr/base/tf/type.h"
#include "pxr/base/tf/weakPtr.h"
#include "pxr/base/trace/aggregateNode.h"
#include "pxr/base/trace/aggregateTree.h"
#include "pxr/base/trace/collector.h"
#include "pxr/base/trace/eventNode.h"
#include "pxr/base/trace/eventTree.h"
#include "pxr/base/trace/reporter.h"
#include "pxr/base/trace/reporterBase.h"
#include "pxr/base/trace/reporterDataSourceCollector.h"
#include "pxr/base/ts/spline.h"
#include "pxr/base/vt/array.h"
#include "pxr/base/vt/dictionary.h"
#include "pxr/base/vt/types.h"
#include "pxr/base/vt/value.h"
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/imaging/garch/glPlatformDebugContext.h"
#include "pxr/imaging/glf/bindingMap.h"
#include "pxr/imaging/glf/contextCaps.h"
#include "pxr/imaging/glf/drawTarget.h"
#include "pxr/imaging/glf/simpleLightingContext.h"
#include "pxr/imaging/glf/simpleShadowArray.h"
#include "pxr/imaging/glf/texture.h"
#include "pxr/imaging/glf/uniformBlock.h"
#include "pxr/imaging/hd/aov.h"
#include "pxr/imaging/hd/bufferSpec.h"
#include "pxr/imaging/hd/dataSourceLocator.h"
#include "pxr/imaging/hd/dependencyForwardingSceneIndex.h"
#include "pxr/imaging/hd/filteringSceneIndex.h"
#include "pxr/imaging/hd/flatteningSceneIndex.h"
#include "pxr/imaging/hd/legacyGeomSubsetSceneIndex.h"
#include "pxr/imaging/hd/legacyPrimSceneIndex.h"
#include "pxr/imaging/hd/materialFilteringSceneIndexBase.h"
#include "pxr/imaging/hd/mergingSceneIndex.h"
#include "pxr/imaging/hd/noticeBatchingSceneIndex.h"
#include "pxr/imaging/hd/perfLog.h"
#include "pxr/imaging/hd/prefixingSceneIndex.h"
#include "pxr/imaging/hd/rendererPluginRegistry.h"
#include "pxr/imaging/hd/repr.h"
#include "pxr/imaging/hd/retainedSceneIndex.h"
#include "pxr/imaging/hd/rprimCollection.h"
#include "pxr/imaging/hd/sceneIndex.h"
#include "pxr/imaging/hd/sceneIndexObserver.h"
#include "pxr/imaging/hd/sceneIndexPluginRegistry.h"
#include "pxr/imaging/hd/types.h"
#include "pxr/imaging/hdGp/generativeProceduralFilteringSceneIndex.h"
#include "pxr/imaging/hdGp/generativeProceduralPluginRegistry.h"
#include "pxr/imaging/hdGp/generativeProceduralResolvingSceneIndex.h"
#include "pxr/imaging/hdSt/binding.h"
#include "pxr/imaging/hdSt/textureIdentifier.h"
#include "pxr/imaging/hdsi/coordSysPrimSceneIndex.h"
#include "pxr/imaging/hdsi/debuggingSceneIndex.h"
#include "pxr/imaging/hdsi/extComputationDependencySceneIndex.h"
#include "pxr/imaging/hdsi/extComputationPrimvarPruningSceneIndex.h"
#include "pxr/imaging/hdsi/implicitSurfaceSceneIndex.h"
#include "pxr/imaging/hdsi/legacyDisplayStyleOverrideSceneIndex.h"
#include "pxr/imaging/hdsi/lightLinkingSceneIndex.h"
#include "pxr/imaging/hdsi/materialBindingResolvingSceneIndex.h"
#include "pxr/imaging/hdsi/materialOverrideResolvingSceneIndex.h"
#include "pxr/imaging/hdsi/materialPrimvarTransferSceneIndex.h"
#include "pxr/imaging/hdsi/nodeIdentifierResolvingSceneIndex.h"
#include "pxr/imaging/hdsi/nurbsApproximatingSceneIndex.h"
#include "pxr/imaging/hdsi/pinnedCurveExpandingSceneIndex.h"
#include "pxr/imaging/hdsi/prefixPathPruningSceneIndex.h"
#include "pxr/imaging/hdsi/primManagingSceneIndexObserver.h"
#include "pxr/imaging/hdsi/primTypeAndPathPruningSceneIndex.h"
#include "pxr/imaging/hdsi/primTypeNoticeBatchingSceneIndex.h"
#include "pxr/imaging/hdsi/primTypePruningSceneIndex.h"
#include "pxr/imaging/hdsi/renderSettingsFilteringSceneIndex.h"
#include "pxr/imaging/hdsi/sceneGlobalsSceneIndex.h"
#include "pxr/imaging/hdsi/switchingSceneIndex.h"
#include "pxr/imaging/hdsi/tetMeshConversionSceneIndex.h"
#include "pxr/imaging/hdsi/velocityMotionResolvingSceneIndex.h"
#include "pxr/imaging/hdx/taskControllerSceneIndex.h"
#include "pxr/imaging/hio/imageRegistry.h"
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#include "pxr/usd/ar/assetInfo.h"
#include "pxr/usd/ar/defaultResolverContext.h"
#include "pxr/usd/ar/resolvedPath.h"
#include "pxr/usd/ar/resolverContext.h"
#include "pxr/usd/ar/timestamp.h"
#include "pxr/usd/kind/registry.h"
#include "pxr/usd/ndr/discoveryPlugin.h"
#include "pxr/usd/pcp/expressionVariablesSource.h"
#include "pxr/usd/pcp/instanceKey.h"
#include "pxr/usd/pcp/layerStack.h"
#include "pxr/usd/pcp/layerStackIdentifier.h"
#include "pxr/usd/pcp/mapFunction.h"
#include "pxr/usd/pcp/node.h"
#include "pxr/usd/pcp/site.h"
#include "pxr/usd/sdf/abstractData.h"
#include "pxr/usd/sdf/assetPath.h"
#include "pxr/usd/sdf/attributeSpec.h"
#include "pxr/usd/sdf/data.h"
#include "pxr/usd/sdf/declareHandles.h"
#include "pxr/usd/sdf/fileFormat.h"
#include "pxr/usd/sdf/layer.h"
#include "pxr/usd/sdf/layerOffset.h"
#include "pxr/usd/sdf/layerStateDelegate.h"
#include "pxr/usd/sdf/layerTree.h"
#include "pxr/usd/sdf/opaqueValue.h"
#include "pxr/usd/sdf/path.h"
#include "pxr/usd/sdf/pathExpression.h"
#include "pxr/usd/sdf/pathPattern.h"
#include "pxr/usd/sdf/payload.h"
#include "pxr/usd/sdf/predicateExpression.h"
#include "pxr/usd/sdf/primSpec.h"
#include "pxr/usd/sdf/propertySpec.h"
#include "pxr/usd/sdf/pseudoRootSpec.h"
#include "pxr/usd/sdf/reference.h"
#include "pxr/usd/sdf/relationshipSpec.h"
#include "pxr/usd/sdf/schema.h"
#include "pxr/usd/sdf/spec.h"
#include "pxr/usd/sdf/textFileFormat.h"
#include "pxr/usd/sdf/timeCode.h"
#include "pxr/usd/sdf/types.h"
#include "pxr/usd/sdf/valueTypeName.h"
#include "pxr/usd/sdf/variantSetSpec.h"
#include "pxr/usd/sdf/variantSpec.h"
#include "pxr/usd/sdr/discoveryPlugin.h"
#include "pxr/usd/sdr/registry.h"
#include "pxr/usd/usd/attribute.h"
#include "pxr/usd/usd/common.h"
#include "pxr/usd/usd/object.h"
#include "pxr/usd/usd/prim.h"
#include "pxr/usd/usd/property.h"
#include "pxr/usd/usd/relationship.h"
#include "pxr/usd/usd/schemaRegistry.h"
#include "pxr/usd/usd/stage.h"
#include "pxr/usd/usd/stageCache.h"
#include "pxr/usd/usd/stageLoadRules.h"
#include "pxr/usd/usd/stagePopulationMask.h"
#include "pxr/usd/usd/timeCode.h"
#include "pxr/usd/usd/usdFileFormat.h"
#include "pxr/usd/usd/usdaFileFormat.h"
#include "pxr/usd/usd/usdcFileFormat.h"
#include "pxr/usd/usd/usdzFileFormat.h"
#include "pxr/usd/usdGeom/primvar.h"
#include "pxr/usd/usdHydra/discoveryPlugin.h"
#include "pxr/usd/usdSkel/animQuery.h"
#include "pxr/usd/usdSkel/skeletonQuery.h"
#include "pxr/usd/usdSkel/skinningQuery.h"
#if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
#include "pxr/usdImaging/usdImaging/delegate.h"
#include "pxr/usdImaging/usdImaging/drawModeSceneIndex.h"
#include "pxr/usdImaging/usdImaging/extentResolvingSceneIndex.h"
#include "pxr/usdImaging/usdImaging/materialBindingsResolvingSceneIndex.h"
#include "pxr/usdImaging/usdImaging/niPrototypePropagatingSceneIndex.h"
#include "pxr/usdImaging/usdImaging/piPrototypePropagatingSceneIndex.h"
#include "pxr/usdImaging/usdImaging/renderSettingsFlatteningSceneIndex.h"
#include "pxr/usdImaging/usdImaging/rerootingSceneIndex.h"
#include "pxr/usdImaging/usdImaging/rootOverridesSceneIndex.h"
#include "pxr/usdImaging/usdImaging/selectionSceneIndex.h"
#include "pxr/usdImaging/usdImaging/stageSceneIndex.h"
#include "pxr/usdImaging/usdImaging/unloadedDrawModeSceneIndex.h"
#include "pxr/usdImaging/usdSkelImaging/pointsResolvingSceneIndex.h"
#include "pxr/usdImaging/usdSkelImaging/skeletonResolvingSceneIndex.h"
#endif // #if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT

namespace __Overlay {
  int64_t hash_value(const pxr::TfType& x);
  int64_t hash_value(const pxr::TfRefBase& x);
  int64_t hash_value(const pxr::TfSimpleRefBase& x);
  int64_t hash_value(const pxr::TfEnum& x);
  int64_t hash_value(const pxr::TfNotice::WeakProbePtr& x);
  int64_t hash_value(const pxr::TfDiagnosticMgr& x);
  int64_t hash_value(const pxr::TfRefPtrTracker& x);
  int64_t hash_value(const pxr::TfToken& x);
  int64_t hash_value(const pxr::GfBBox3d& x);
  int64_t hash_value(const pxr::GfMatrix4d& x);
  int64_t hash_value(const pxr::GfVec4d& x);
  int64_t hash_value(const pxr::GfVec4f& x);
  int64_t hash_value(const pxr::GfVec4h& x);
  int64_t hash_value(const pxr::pxr_half::half& x);
  int64_t hash_value(const pxr::GfVec4i& x);
  int64_t hash_value(const pxr::GfVec3d& x);
  int64_t hash_value(const pxr::GfVec3f& x);
  int64_t hash_value(const pxr::GfVec3h& x);
  int64_t hash_value(const pxr::GfVec3i& x);
  int64_t hash_value(const pxr::GfRange3d& x);
  int64_t hash_value(const pxr::GfRange3f& x);
  int64_t hash_value(const pxr::GfRange1f& x);
  int64_t hash_value(const pxr::GfRange1d& x);
  int64_t hash_value(const pxr::GfVec2f& x);
  int64_t hash_value(const pxr::GfVec2d& x);
  int64_t hash_value(const pxr::GfVec2h& x);
  int64_t hash_value(const pxr::GfVec2i& x);
  int64_t hash_value(const pxr::GfMatrix3f& x);
  int64_t hash_value(const pxr::GfDualQuatd& x);
  int64_t hash_value(const pxr::GfQuatd& x);
  int64_t hash_value(const pxr::GfDualQuatf& x);
  int64_t hash_value(const pxr::GfQuatf& x);
  int64_t hash_value(const pxr::GfDualQuath& x);
  int64_t hash_value(const pxr::GfQuath& x);
  int64_t hash_value(const pxr::GfFrustum& x);
  int64_t hash_value(const pxr::GfRange2d& x);
  int64_t hash_value(const pxr::GfRange2f& x);
  int64_t hash_value(const pxr::GfRotation& x);
  int64_t hash_value(const pxr::GfQuaternion& x);
  int64_t hash_value(const pxr::GfInterval& x);
  int64_t hash_value(const pxr::GfMatrix2d& x);
  int64_t hash_value(const pxr::GfMatrix2f& x);
  int64_t hash_value(const pxr::GfMatrix3d& x);
  int64_t hash_value(const pxr::GfMatrix4f& x);
  int64_t hash_value(const pxr::GfMultiInterval& x);
  int64_t hash_value(const pxr::GfRect2i& x);
  int64_t hash_value(const pxr::TraceAggregateTreeRefPtr& x);
  int64_t hash_value(const pxr::TraceAggregateTree& x);
  int64_t hash_value(const pxr::TraceAggregateNodeRefPtr& x);
  int64_t hash_value(const pxr::TraceAggregateNodePtr& x);
  int64_t hash_value(const pxr::TraceAggregateNode& x);
  int64_t hash_value(const pxr::TraceCollector& x);
  int64_t hash_value(const pxr::TraceEventNodeRefPtr& x);
  int64_t hash_value(const pxr::TraceEventNode& x);
  int64_t hash_value(const pxr::TraceEventTreeRefPtr& x);
  int64_t hash_value(const pxr::TraceEventTree& x);
  int64_t hash_value(const pxr::TraceReporterRefPtr& x);
  int64_t hash_value(const pxr::TraceReporterPtr& x);
  int64_t hash_value(const pxr::TraceReporter& x);
  int64_t hash_value(const pxr::TraceReporterBase& x);
  int64_t hash_value(const pxr::TraceReporterDataSourceCollectorPtr& x);
  int64_t hash_value(const pxr::PlugPluginPtr& x);
  int64_t hash_value(const pxr::PlugRegistry& x);
  int64_t hash_value(const pxr::VtDualQuatdArray& x);
  int64_t hash_value(const pxr::VtDualQuatfArray& x);
  int64_t hash_value(const pxr::VtDualQuathArray& x);
  int64_t hash_value(const pxr::VtHalfArray& x);
  int64_t hash_value(const pxr::VtIntervalArray& x);
  int64_t hash_value(const pxr::VtMatrix2dArray& x);
  int64_t hash_value(const pxr::VtMatrix2fArray& x);
  int64_t hash_value(const pxr::VtMatrix3dArray& x);
  int64_t hash_value(const pxr::VtMatrix3fArray& x);
  int64_t hash_value(const pxr::VtMatrix4dArray& x);
  int64_t hash_value(const pxr::VtMatrix4fArray& x);
  int64_t hash_value(const pxr::VtQuatdArray& x);
  int64_t hash_value(const pxr::VtQuaternionArray& x);
  int64_t hash_value(const pxr::VtQuatfArray& x);
  int64_t hash_value(const pxr::VtQuathArray& x);
  int64_t hash_value(const pxr::VtRange1dArray& x);
  int64_t hash_value(const pxr::VtRange1fArray& x);
  int64_t hash_value(const pxr::VtRange2dArray& x);
  int64_t hash_value(const pxr::VtRange2fArray& x);
  int64_t hash_value(const pxr::VtRange3dArray& x);
  int64_t hash_value(const pxr::VtRange3fArray& x);
  int64_t hash_value(const pxr::VtRect2iArray& x);
  int64_t hash_value(const pxr::VtVec2dArray& x);
  int64_t hash_value(const pxr::VtVec2fArray& x);
  int64_t hash_value(const pxr::VtVec2hArray& x);
  int64_t hash_value(const pxr::VtVec2iArray& x);
  int64_t hash_value(const pxr::VtVec3dArray& x);
  int64_t hash_value(const pxr::VtVec3fArray& x);
  int64_t hash_value(const pxr::VtVec3hArray& x);
  int64_t hash_value(const pxr::VtVec3iArray& x);
  int64_t hash_value(const pxr::VtVec4dArray& x);
  int64_t hash_value(const pxr::VtVec4fArray& x);
  int64_t hash_value(const pxr::VtVec4hArray& x);
  int64_t hash_value(const pxr::VtVec4iArray& x);
  int64_t hash_value(const pxr::VtTokenArray& x);
  int64_t hash_value(const pxr::VtBoolArray& x);
  int64_t hash_value(const pxr::VtCharArray& x);
  int64_t hash_value(const pxr::VtDoubleArray& x);
  int64_t hash_value(const pxr::VtFloatArray& x);
  int64_t hash_value(const pxr::VtInt64Array& x);
  int64_t hash_value(const pxr::VtIntArray& x);
  int64_t hash_value(const pxr::VtShortArray& x);
  int64_t hash_value(const pxr::VtStringArray& x);
  int64_t hash_value(const pxr::VtUInt64Array& x);
  int64_t hash_value(const pxr::VtUCharArray& x);
  int64_t hash_value(const pxr::VtUIntArray& x);
  int64_t hash_value(const pxr::VtUShortArray& x);
  int64_t hash_value(const pxr::VtDictionary& x);
  int64_t hash_value(const pxr::VtValue& x);
  int64_t hash_value(const pxr::TsSpline& x);
  int64_t hash_value(const pxr::ArAssetInfo& x);
  int64_t hash_value(const pxr::ArDefaultResolverContext& x);
  int64_t hash_value(const pxr::ArResolverContext& x);
  int64_t hash_value(const pxr::ArResolvedPath& x);
  int64_t hash_value(const pxr::ArTimestamp& x);
  int64_t hash_value(const pxr::KindRegistry& x);
  int64_t hash_value(const pxr::SdfAbstractData& x);
  int64_t hash_value(const pxr::SdfAbstractDataRefPtr& x);
  int64_t hash_value(const pxr::SdfAbstractDataPtr& x);
  int64_t hash_value(const pxr::SdfPath& x);
  int64_t hash_value(const pxr::SdfUnregisteredValue& x);
  int64_t hash_value(const pxr::SdfValueBlock& x);
  int64_t hash_value(const pxr::SdfHumanReadableValue& x);
  int64_t hash_value(const pxr::SdfAssetPath& x);
  int64_t hash_value(const pxr::SdfOpaqueValue& x);
  int64_t hash_value(const pxr::SdfPathExpression& x);
  int64_t hash_value(const pxr::SdfPathExpression::ExpressionReference& x);
  int64_t hash_value(const pxr::SdfPathPattern& x);
  int64_t hash_value(const pxr::SdfPathPattern::Component& x);
  int64_t hash_value(const pxr::SdfPredicateExpression& x);
  int64_t hash_value(const pxr::SdfPredicateExpression::FnArg& x);
  int64_t hash_value(const pxr::SdfPredicateExpression::FnCall& x);
  int64_t hash_value(const pxr::SdfTimeCode& x);
  int64_t hash_value(const pxr::SdfValueTypeName& x);
  int64_t hash_value(const pxr::SdfAttributeSpec& x);
  int64_t hash_value(const pxr::SdfAttributeSpecHandle& x);
  int64_t hash_value(const pxr::SdfPropertySpecHandle& x);
  int64_t hash_value(const pxr::SdfPropertySpec& x);
  int64_t hash_value(const pxr::SdfSpecHandle& x);
  int64_t hash_value(const pxr::SdfSpec& x);
  int64_t hash_value(const pxr::SdfSchema& x);
  int64_t hash_value(const pxr::SdfData& x);
  int64_t hash_value(const pxr::SdfDataRefPtr& x);
  int64_t hash_value(const pxr::SdfFileFormat& x);
  int64_t hash_value(const pxr::SdfFileFormatRefPtr& x);
  int64_t hash_value(const pxr::SdfLayer& x);
  int64_t hash_value(const pxr::SdfLayerRefPtr& x);
  int64_t hash_value(const pxr::SdfLayerHandle& x);
  int64_t hash_value(const pxr::SdfLayerOffset& x);
  int64_t hash_value(const pxr::SdfLayerStateDelegateBase& x);
  int64_t hash_value(const pxr::SdfLayerStateDelegateBaseRefPtr& x);
  int64_t hash_value(const pxr::SdfLayerStateDelegateBasePtr& x);
  int64_t hash_value(const pxr::SdfSimpleLayerStateDelegate& x);
  int64_t hash_value(const pxr::SdfSimpleLayerStateDelegateRefPtr& x);
  int64_t hash_value(const pxr::SdfLayerTree& x);
  int64_t hash_value(const pxr::SdfLayerTreeHandle& x);
  int64_t hash_value(const pxr::SdfPayload& x);
  int64_t hash_value(const pxr::SdfPrimSpecHandle& x);
  int64_t hash_value(const pxr::SdfPrimSpec& x);
  int64_t hash_value(const pxr::SdfPseudoRootSpec& x);
  int64_t hash_value(const pxr::SdfReference& x);
  int64_t hash_value(const pxr::SdfRelationshipSpecHandle& x);
  int64_t hash_value(const pxr::SdfRelationshipSpec& x);
  int64_t hash_value(const pxr::SdfTextFileFormat& x);
  int64_t hash_value(const pxr::SdfTextFileFormatRefPtr& x);
  int64_t hash_value(const pxr::SdfVariantSetSpecHandle& x);
  int64_t hash_value(const pxr::SdfVariantSetSpec& x);
  int64_t hash_value(const pxr::SdfVariantSpecHandle& x);
  int64_t hash_value(const pxr::SdfVariantSpec& x);
  int64_t hash_value(const pxr::NdrDiscoveryPluginContext& x);
  int64_t hash_value(const pxr::NdrDiscoveryPlugin& x);
  int64_t hash_value(const pxr::NdrDiscoveryPluginRefPtr& x);
  int64_t hash_value(const pxr::SdrDiscoveryPluginContext& x);
  int64_t hash_value(const pxr::SdrDiscoveryPlugin& x);
  int64_t hash_value(const pxr::SdrRegistry& x);
  int64_t hash_value(const pxr::PcpMapFunction& x);
  int64_t hash_value(const pxr::PcpNodeRef& x);
  int64_t hash_value(const pxr::PcpSite& x);
  int64_t hash_value(const pxr::PcpLayerStackSite& x);
  int64_t hash_value(const pxr::PcpLayerStackIdentifier& x);
  int64_t hash_value(const pxr::PcpExpressionVariablesSource& x);
  int64_t hash_value(const pxr::PcpInstanceKey& x);
  int64_t hash_value(const pxr::PcpLayerStack& x);
  int64_t hash_value(const pxr::PcpLayerStackRefPtr& x);
  int64_t hash_value(const pxr::PcpLayerStackPtr& x);
  int64_t hash_value(const pxr::UsdPrim& x);
  int64_t hash_value(const pxr::UsdTimeCode& x);
  int64_t hash_value(const pxr::UsdObject& x);
  int64_t hash_value(const pxr::UsdSchemaRegistry& x);
  int64_t hash_value(const pxr::UsdStageRefPtr& x);
  int64_t hash_value(const pxr::UsdStagePtr& x);
  int64_t hash_value(const pxr::UsdStage& x);
  int64_t hash_value(const pxr::UsdStageLoadRules& x);
  int64_t hash_value(const pxr::UsdStagePopulationMask& x);
  int64_t hash_value(const pxr::UsdAttribute& x);
  int64_t hash_value(const pxr::UsdProperty& x);
  int64_t hash_value(const pxr::UsdRelationship& x);
  int64_t hash_value(const pxr::UsdStageCache::Id& x);
  int64_t hash_value(const pxr::UsdUsdFileFormatRefPtr& x);
  int64_t hash_value(const pxr::UsdUsdFileFormat& x);
  int64_t hash_value(const pxr::UsdUsdaFileFormatRefPtr& x);
  int64_t hash_value(const pxr::UsdUsdaFileFormat& x);
  int64_t hash_value(const pxr::UsdUsdcFileFormatRefPtr& x);
  int64_t hash_value(const pxr::UsdUsdcFileFormat& x);
  int64_t hash_value(const pxr::UsdUsdzFileFormatRefPtr& x);
  int64_t hash_value(const pxr::UsdUsdzFileFormat& x);
  int64_t hash_value(const pxr::UsdGeomPrimvar& x);
  int64_t hash_value(const pxr::UsdHydraDiscoveryPlugin& x);
  int64_t hash_value(const pxr::UsdSkelAnimQuery& x);
  int64_t hash_value(const pxr::UsdSkelSkeletonQuery& x);
#if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
  int64_t hash_value(const pxr::GarchGLPlatformDebugContext& x);
  int64_t hash_value(const pxr::GarchGLPlatformDebugContextRefPtr& x);
  int64_t hash_value(const pxr::HioImageRegistry& x);
  int64_t hash_value(const pxr::GlfBindingMap& x);
  int64_t hash_value(const pxr::GlfBindingMapPtr& x);
  int64_t hash_value(const pxr::GlfContextCaps& x);
  int64_t hash_value(const pxr::GlfDrawTarget& x);
  int64_t hash_value(const pxr::GlfDrawTargetRefPtr& x);
  int64_t hash_value(const pxr::GlfDrawTargetPtr& x);
  int64_t hash_value(const pxr::GlfDrawTarget::AttachmentRefPtr& x);
  int64_t hash_value(const pxr::GlfTexture& x);
  int64_t hash_value(const pxr::GlfSimpleLightingContext& x);
  int64_t hash_value(const pxr::GlfSimpleLightingContextRefPtr& x);
  int64_t hash_value(const pxr::GlfSimpleLightingContextPtr& x);
  int64_t hash_value(const pxr::GlfSimpleShadowArray& x);
  int64_t hash_value(const pxr::GlfSimpleShadowArrayRefPtr& x);
  int64_t hash_value(const pxr::GlfUniformBlock& x);
  int64_t hash_value(const pxr::GlfUniformBlockRefPtr& x);
  int64_t hash_value(const pxr::HdRenderPassAovBinding& x);
  int64_t hash_value(const pxr::HdTupleType& x);
  int64_t hash_value(const pxr::HdBufferSpec& x);
  int64_t hash_value(const pxr::HdReprSelector& x);
  int64_t hash_value(const pxr::HdPerfLog& x);
  int64_t hash_value(const pxr::HdRprimCollection& x);
  int64_t hash_value(const pxr::HdSceneIndexBase& x);
  int64_t hash_value(const pxr::HdSceneIndexBaseRefPtr& x);
  int64_t hash_value(const pxr::HdSceneIndexBasePtr& x);
  int64_t hash_value(const pxr::HdDataSourceLocator& x);
  int64_t hash_value(const pxr::HdSceneIndexObserverPtr& x);
  int64_t hash_value(const pxr::HdMergingSceneIndex& x);
  int64_t hash_value(const pxr::HdMergingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdFilteringSceneIndexBase& x);
  int64_t hash_value(const pxr::HdFilteringSceneIndexBasePtr& x);
  int64_t hash_value(const pxr::HdSingleInputFilteringSceneIndexBase& x);
  int64_t hash_value(const pxr::HdLegacyPrimSceneIndex& x);
  int64_t hash_value(const pxr::HdLegacyPrimSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdRetainedSceneIndex& x);
  int64_t hash_value(const pxr::HdRetainedSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdNoticeBatchingSceneIndex& x);
  int64_t hash_value(const pxr::HdNoticeBatchingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdDependencyForwardingSceneIndex& x);
  int64_t hash_value(const pxr::HdDependencyForwardingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdFlatteningSceneIndex& x);
  int64_t hash_value(const pxr::HdFlatteningSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdLegacyGeomSubsetSceneIndex& x);
  int64_t hash_value(const pxr::HdLegacyGeomSubsetSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdMaterialFilteringSceneIndexBase& x);
  int64_t hash_value(const pxr::HdPrefixingSceneIndex& x);
  int64_t hash_value(const pxr::HdPrefixingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdRendererPluginRegistry& x);
  int64_t hash_value(const pxr::HdSceneIndexPluginRegistry& x);
  int64_t hash_value(const pxr::HdGpGenerativeProceduralPluginRegistry& x);
  int64_t hash_value(const pxr::HdGpGenerativeProceduralFilteringSceneIndex& x);
  int64_t hash_value(const pxr::HdGpGenerativeProceduralFilteringSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdGpGenerativeProceduralResolvingSceneIndex& x);
  int64_t hash_value(const pxr::HdGpGenerativeProceduralResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiCoordSysPrimSceneIndex& x);
  int64_t hash_value(const pxr::HdsiCoordSysPrimSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiDebuggingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiDebuggingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiExtComputationDependencySceneIndex& x);
  int64_t hash_value(const pxr::HdsiExtComputationDependencySceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdSiExtComputationPrimvarPruningSceneIndex& x);
  int64_t hash_value(const pxr::HdSiExtComputationPrimvarPruningSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiImplicitSurfaceSceneIndex& x);
  int64_t hash_value(const pxr::HdsiImplicitSurfaceSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiLegacyDisplayStyleOverrideSceneIndex& x);
  int64_t hash_value(const pxr::HdsiLegacyDisplayStyleOverrideSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiLightLinkingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiLightLinkingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiMaterialBindingResolvingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiMaterialBindingResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiMaterialOverrideResolvingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiMaterialOverrideResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiMaterialPrimvarTransferSceneIndex& x);
  int64_t hash_value(const pxr::HdsiMaterialPrimvarTransferSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdSiNodeIdentifierResolvingSceneIndex& x);
  int64_t hash_value(const pxr::HdSiNodeIdentifierResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiNurbsApproximatingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiNurbsApproximatingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiPrefixPathPruningSceneIndex& x);
  int64_t hash_value(const pxr::HdsiPrefixPathPruningSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiPinnedCurveExpandingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiPinnedCurveExpandingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiPrimManagingSceneIndexObserver& x);
  int64_t hash_value(const pxr::HdsiPrimManagingSceneIndexObserverRefPtr& x);
  int64_t hash_value(const pxr::HdsiPrimTypeAndPathPruningSceneIndex& x);
  int64_t hash_value(const pxr::HdsiPrimTypeAndPathPruningSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiPrimTypeNoticeBatchingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiPrimTypeNoticeBatchingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiPrimTypePruningSceneIndex& x);
  int64_t hash_value(const pxr::HdsiPrimTypePruningSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiRenderSettingsFilteringSceneIndex& x);
  int64_t hash_value(const pxr::HdsiRenderSettingsFilteringSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiSceneGlobalsSceneIndex& x);
  int64_t hash_value(const pxr::HdsiSceneGlobalsSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiSwitchingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiSwitchingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiTetMeshConversionSceneIndex& x);
  int64_t hash_value(const pxr::HdsiTetMeshConversionSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdsiVelocityMotionResolvingSceneIndex& x);
  int64_t hash_value(const pxr::HdsiVelocityMotionResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::HdStBindingRequest& x);
  int64_t hash_value(const pxr::HdStTextureIdentifier& x);
  int64_t hash_value(const pxr::HdxTaskControllerSceneIndex& x);
  int64_t hash_value(const pxr::HdxTaskControllerSceneIndexRefPtr& x);
#endif // #if SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT
#if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
  int64_t hash_value(const pxr::UsdImagingDelegatePtr& x);
  int64_t hash_value(const pxr::UsdImagingDrawModeSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingDrawModeSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingExtentResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingExtentResolvingSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingStageSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingStageSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingSelectionSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingSelectionSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingMaterialBindingsResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingMaterialBindingsResolvingSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingNiPrototypePropagatingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingNiPrototypePropagatingSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingPiPrototypePropagatingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingPiPrototypePropagatingSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingRootOverridesSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingRootOverridesSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingUnloadedDrawModeSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingUnloadedDrawModeSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingRenderSettingsFlatteningSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingRenderSettingsFlatteningSceneIndex& x);
  int64_t hash_value(const pxr::UsdImagingRerootingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdImagingRerootingSceneIndex& x);
  int64_t hash_value(const pxr::UsdSkelImagingPointsResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdSkelImagingPointsResolvingSceneIndex& x);
  int64_t hash_value(const pxr::UsdSkelImagingSkeletonResolvingSceneIndexRefPtr& x);
  int64_t hash_value(const pxr::UsdSkelImagingSkeletonResolvingSceneIndex& x);
#endif // #if SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT
}
#endif /* SWIFTUSD_GENERATED_HASHABLE_H */
