//
//  Hashable.swift
//  swiftUsd
//
//  Created by Maddy Adams on 4/17/24.
//

// This file was generated by ast-answerer. Do not edit!


// Conformance blocked by no Swift type name:

// pxr::TfWeakPtr<void>
// pxr::TfRefPtr<pxr::TfRefBase>
// pxr::TfWeakPtr<pxr::PlugRegistry>
// pxr::VtArray<pxr::GfFrustum>
// pxr::VtArray<pxr::GfMultiInterval>
// pxr::VtArray<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string>>>>
// pxr::VtArray<std::vector<pxr::TfToken, std::allocator<pxr::TfToken>>>
// pxr::VtArray<std::vector<double, std::allocator<double>>>
// pxr::VtArray<std::vector<std::string, std::allocator<std::string>>>
// pxr::VtArray<pxr::VtArray<int>>
// pxr::VtArray<pxr::VtDictionary>
// pxr::VtArray<pxr::VtValue>
// pxr::VtArray<pxr::TsSpline>
// pxr::VtArray<pxr::SdfPath>
// pxr::VtArray<std::vector<pxr::SdfPath, std::allocator<pxr::SdfPath>>>
// pxr::VtArray<std::vector<std::pair<pxr::SdfPath, pxr::SdfPath>, std::allocator<std::pair<pxr::SdfPath, pxr::SdfPath>>>>
// pxr::VtArray<pxr::SdfSpecifier>
// pxr::VtArray<pxr::SdfPermission>
// pxr::VtArray<pxr::SdfVariability>
// pxr::VtArray<pxr::SdfUnregisteredValue>
// pxr::VtArray<pxr::SdfValueBlock>
// pxr::VtArray<pxr::SdfAssetPath>
// pxr::VtArray<pxr::SdfOpaqueValue>
// pxr::VtArray<pxr::SdfPathExpression>
// pxr::VtArray<pxr::SdfTimeCode>
// pxr::TfWeakPtr<pxr::SdfSchemaBase>
// pxr::VtArray<std::vector<pxr::SdfLayerOffset, std::allocator<pxr::SdfLayerOffset>>>
// pxr::VtArray<pxr::SdfPayload>
// pxr::TfRefPtr<pxr::UsdHydraDiscoveryPlugin>
// pxr::VtArray<pxr::UsdSkelSkinningQuery>
// pxr::TfRefPtr<pxr::GlfDrawTarget::AttachmentsContainer>
// pxr::VtArray<pxr::HdVec4f_2_10_10_10_REV>
// pxr::TfWeakPtr<pxr::UsdImagingStageSceneIndex>


// Conformance available:

extension pxr.TfType: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TfRefBase: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TfSimpleRefBase: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TfEnum: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TfNotice.WeakProbePtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TfDiagnosticMgr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TfRefPtrTracker: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TfToken: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfBBox3d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfMatrix4d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec4d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec4f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec4h: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.pxr_half.half: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec4i: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec3d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec3f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec3h: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec3i: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfRange3d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfRange3f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfRange1f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfRange1d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec2f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec2d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec2h: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfVec2i: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfMatrix3f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfDualQuatd: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfQuatd: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfDualQuatf: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfQuatf: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfDualQuath: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfQuath: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfFrustum: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfRange2d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfRange2f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfRotation: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfQuaternion: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfInterval: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfMatrix2d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfMatrix2f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfMatrix3d: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfMatrix4f: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfMultiInterval: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GfRect2i: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceAggregateTreeRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceAggregateTree: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceAggregateNodeRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceAggregateNodePtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceAggregateNode: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceCollector: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceEventNodeRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceEventNode: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceEventTreeRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceEventTree: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceReporterRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceReporterPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceReporter: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceReporterBase: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TraceReporterDataSourceCollectorPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PlugPluginPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PlugRegistry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtDualQuatdArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtDualQuatfArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtDualQuathArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtHalfArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtIntervalArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtMatrix2dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtMatrix2fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtMatrix3dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtMatrix3fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtMatrix4dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtMatrix4fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtQuatdArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtQuaternionArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtQuatfArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtQuathArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtRange1dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtRange1fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtRange2dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtRange2fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtRange3dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtRange3fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtRect2iArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec2dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec2fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec2hArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec2iArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec3dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec3fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec3hArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec3iArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec4dArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec4fArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec4hArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtVec4iArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtTokenArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtBoolArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtCharArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtDoubleArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtFloatArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtInt64Array: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtIntArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtShortArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtStringArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtUInt64Array: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtUCharArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtUIntArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtUShortArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtDictionary: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.VtValue: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.TsSpline: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.ArAssetInfo: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.ArDefaultResolverContext: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.ArResolverContext: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.ArResolvedPath: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.ArTimestamp: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.KindRegistry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfAbstractData: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfAbstractDataRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfAbstractDataPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPath: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfUnregisteredValue: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfValueBlock: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfHumanReadableValue: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfAssetPath: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfOpaqueValue: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPathExpression: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPathExpression.ExpressionReference: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPathPattern: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPathPattern.Component: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPredicateExpression: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPredicateExpression.FnArg: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPredicateExpression.FnCall: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfTimeCode: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfValueTypeName: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfAttributeSpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfAttributeSpecHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPropertySpecHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPropertySpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfSpecHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfSpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfSchema: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfData: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfDataRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfFileFormat: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfFileFormatRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayer: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayerRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayerHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayerOffset: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayerStateDelegateBase: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayerStateDelegateBaseRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayerStateDelegateBasePtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfSimpleLayerStateDelegate: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfSimpleLayerStateDelegateRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayerTree: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfLayerTreeHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPayload: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPrimSpecHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPrimSpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfPseudoRootSpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfReference: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfRelationshipSpecHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfRelationshipSpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfTextFileFormat: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfTextFileFormatRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfVariantSetSpecHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfVariantSetSpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfVariantSpecHandle: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdfVariantSpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.NdrDiscoveryPluginContext: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.NdrDiscoveryPlugin: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.NdrDiscoveryPluginRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdrDiscoveryPluginContext: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdrDiscoveryPlugin: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.SdrRegistry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpMapFunction: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpNodeRef: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpSite: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpLayerStackSite: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpLayerStackIdentifier: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpExpressionVariablesSource: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpInstanceKey: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpLayerStack: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpLayerStackRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.PcpLayerStackPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdPrim: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdTimeCode: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdObject: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdSchemaRegistry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdStageRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdStagePtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdStage: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdStageLoadRules: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdStagePopulationMask: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdAttribute: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdProperty: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdRelationship: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdStageCache.Id: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdUsdFileFormatRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdUsdFileFormat: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdUsdaFileFormatRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdUsdaFileFormat: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdUsdcFileFormatRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdUsdcFileFormat: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdUsdzFileFormatRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdUsdzFileFormat: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdGeomPrimvar: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdHydraDiscoveryPlugin: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdSkelAnimQuery: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdSkelSkeletonQuery: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
#if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
extension pxr.GarchGLPlatformDebugContext: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GarchGLPlatformDebugContextRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HioImageRegistry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfBindingMap: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfBindingMapPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfContextCaps: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfDrawTarget: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfDrawTargetRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfDrawTargetPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfDrawTarget.AttachmentRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfTexture: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfSimpleLightingContext: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfSimpleLightingContextRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfSimpleLightingContextPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfSimpleShadowArray: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfSimpleShadowArrayRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfUniformBlock: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.GlfUniformBlockRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdRenderPassAovBinding: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdTupleType: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdBufferSpec: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdReprSelector: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdPerfLog: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdRprimCollection: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSceneIndexBase: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSceneIndexBaseRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSceneIndexBasePtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdDataSourceLocator: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSceneIndexObserverPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdMergingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdMergingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdFilteringSceneIndexBase: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdFilteringSceneIndexBasePtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSingleInputFilteringSceneIndexBase: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdLegacyPrimSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdLegacyPrimSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdRetainedSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdRetainedSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdNoticeBatchingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdNoticeBatchingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdDependencyForwardingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdDependencyForwardingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdFlatteningSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdFlatteningSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdLegacyGeomSubsetSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdLegacyGeomSubsetSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdMaterialFilteringSceneIndexBase: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdPrefixingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdPrefixingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdRendererPluginRegistry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSceneIndexPluginRegistry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdGpGenerativeProceduralPluginRegistry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdGpGenerativeProceduralFilteringSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdGpGenerativeProceduralFilteringSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdGpGenerativeProceduralResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdGpGenerativeProceduralResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiCoordSysPrimSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiCoordSysPrimSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiDebuggingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiDebuggingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiExtComputationDependencySceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiExtComputationDependencySceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSiExtComputationPrimvarPruningSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSiExtComputationPrimvarPruningSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiImplicitSurfaceSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiImplicitSurfaceSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiLegacyDisplayStyleOverrideSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiLegacyDisplayStyleOverrideSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiLightLinkingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiLightLinkingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiMaterialBindingResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiMaterialBindingResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiMaterialOverrideResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiMaterialOverrideResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiMaterialPrimvarTransferSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiMaterialPrimvarTransferSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSiNodeIdentifierResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdSiNodeIdentifierResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiNurbsApproximatingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiNurbsApproximatingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrefixPathPruningSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrefixPathPruningSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPinnedCurveExpandingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPinnedCurveExpandingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrimManagingSceneIndexObserver: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrimManagingSceneIndexObserverRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrimTypeAndPathPruningSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrimTypeAndPathPruningSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrimTypeNoticeBatchingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrimTypeNoticeBatchingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrimTypePruningSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiPrimTypePruningSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiRenderSettingsFilteringSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiRenderSettingsFilteringSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiSceneGlobalsSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiSceneGlobalsSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiSwitchingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiSwitchingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiTetMeshConversionSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiTetMeshConversionSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiVelocityMotionResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdsiVelocityMotionResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdStBindingRequest: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdStTextureIdentifier: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdxTaskControllerSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.HdxTaskControllerSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_IMAGING_SUPPORT)
#if canImport(SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT)
extension pxr.UsdImagingDelegatePtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingDrawModeSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingDrawModeSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingExtentResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingExtentResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingStageSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingStageSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingSelectionSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingSelectionSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingMaterialBindingsResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingMaterialBindingsResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingNiPrototypePropagatingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingNiPrototypePropagatingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingPiPrototypePropagatingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingPiPrototypePropagatingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingRootOverridesSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingRootOverridesSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingUnloadedDrawModeSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingUnloadedDrawModeSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingRenderSettingsFlatteningSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingRenderSettingsFlatteningSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingRerootingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdImagingRerootingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdSkelImagingPointsResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdSkelImagingPointsResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdSkelImagingSkeletonResolvingSceneIndexRefPtr: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
extension pxr.UsdSkelImagingSkeletonResolvingSceneIndex: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(__Overlay.hash_value(self))
    }
}
#endif // #if canImport(SwiftUsd_PXR_ENABLE_USD_IMAGING_SUPPORT)
